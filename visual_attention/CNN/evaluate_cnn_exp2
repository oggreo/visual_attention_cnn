{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_cnn_exp2","version":"0.3.2","provenance":[{"file_id":"1goYwIeqqN1mJr07yiom0jxvGh-735U1Y","timestamp":1566424435634},{"file_id":"1wTkqln-Mdo_VsWQeYtrdM2q1NbgXNUB1","timestamp":1566423804256},{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566418130179},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"dm2wSqJvpjGf"},"source":["# TPUs in Colab\n","\n","This notebook provides an introduction to computing on a [TPU](https://cloud.google.com/tpu/) in Colab. In this notebook you will connect to a TPU, run some basic TensorFlow operations on the TPU, and print out the speed of the TPU as measured in teraflops."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_pQCOmISAQBu"},"source":["## Enabling and testing the TPU\n","\n","First, you'll need to enable TPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select TPU from the Hardware Accelerator drop-down\n","\n","Next, we'll check that we can connect to the TPU:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"71iSWtsXe36x","outputId":"b5aafd38-bbdd-469a-b235-90f22c05084e","executionInfo":{"status":"ok","timestamp":1566424461462,"user_tz":-60,"elapsed":2220,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["import os\n","import pprint\n","import tensorflow as tf\n","\n","if 'COLAB_TPU_ADDR' not in os.environ:\n","  print('ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!')\n","else:\n","  tpu_address = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","  print ('TPU address is', tpu_address)\n","\n","  with tf.Session(tpu_address) as session:\n","    devices = session.list_devices()\n","    \n","  print('TPU devices:')\n","  pprint.pprint(devices)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["TPU address is grpc://10.51.73.114:8470\n","TPU devices:\n","[_DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:CPU:0, CPU, -1, 18443194593367577701),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, 9142288199186370820),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:0, TPU, 17179869184, 17241610813667290959),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:1, TPU, 17179869184, 1289560492528546108),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:2, TPU, 17179869184, 16120369426568442820),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:3, TPU, 17179869184, 17053318457678606619),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:4, TPU, 17179869184, 12277426293039606809),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:5, TPU, 17179869184, 13605242261856074580),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:6, TPU, 17179869184, 15223398749580302300),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:7, TPU, 17179869184, 17646194077960320849),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 8589934592, 9785213797139609996)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"ec3a1d93-dd6b-4ec7-c6d2-0643b3e8266f","executionInfo":{"status":"ok","timestamp":1566744574910,"user_tz":-60,"elapsed":2024,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    # utility function to normalize a tensor by its L2 norm\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    # img = image.load_img(img_path, target_size=(224, 224))\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        # print(\"K.one_hot\", K.eval(K.one_hot([category_index], nb_classes)))\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    # model = Sequential()\n","    # model.add(input_model)\n","    # nb_classes = 1000\n","    # print(\"category_index\", category_index)\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # if not \"lambda\" in input_model.layers[-1].name:\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # input_model.pop_layer()\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # target_layer = lambda x: target_category_loss(x, category_index, nb_classes)\n","        # target_layer = lambda x: tf.math.multiply(x[0], one_hot)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # print(\"name of the last layer\", input_model.layers[-1].name)\n","    # print(\"input_model.layers[-1].output\", input_model.layers[-1].output)\n","    loss = K.sum(input_model.layers[-1].output)\n","    # print(\"loss\", loss)\n","    # conv_output =  [l for l in model.layers[0].layers if l.name is layer_name][0].output\n","    # print([l.name for l in input_model.layers])\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \"\"\"\n","    dense_output = input_model.layers[-2].output\n","    final_output = input_model.layers[-1].output\n","    fin_out_manual = tf.math.multiply(input_model.layers[-2].output, one_hot)\n","    \"\"\"\n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","    \n","    # print(\"number of all zero map\", count)\n","    # print(\"dense output\", dense_output)\n","    # print(\"final output\", final_output)\n","    # print(\"fin out manual\", fin_out_manual)\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    # print(\"one_hot * dense_output\", one_hot_num * dense_output)\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    # cam = cv2.resize(cam, (224, 224))\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    #Return to BGR [0..255] from the preprocessed image\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        # print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        # (img_num, 112, 112, 32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","        gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                      grad_1, grad_2, grad_3, grad_4,\n","                                                                                                      sparse_1, sparse_2, sparse_3, sparse_4])\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","        gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                              grad_1, grad_2, grad_3, grad_4])\n","    outputs  = gradient_function([image])\n","    # this is slow af\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    # sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        print(\"output shape\", output.shape)\n","        # print(\"cam shape\", cam.shape)\n","        print(\" \")\n","        # (img_num, 112, 112, 32)\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        # self.output_dim = output_dim\n","        self.k = k\n","        # @TODO randome intialize\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        # p, h, w, c = tf.shape(x)\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        # x (p, h, w, c)\n","        print(\"x\", x)\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        print(\"global_average\", global_average)\n","        # x_sort_arg = self.top_k(global_average, k=K.int_shape(global_average)[-1]) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        print(\"x_sort_arg\", x_sort_arg)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        print(\"boosted_x\", boosted_x)\n","        # boosted_x_arg = np.argsort(boosted_x)\n","        # boosted_x_arg = self.top_k(boosted_x, k=K.int_shape(boosted_x)[-1]) # (p, c)\n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        # print(\"boosted_x_arg\", boosted_x_arg)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        print(\"x\", x)\n","        print(\"spx\", spx)\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        print(sparse_mtx)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        self.duty = duty\n","        print(\"duty\", duty)\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        # x_shape = tf.shape(x, out_type=tf.int64)\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS # 2\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        # assert isinstance(input_shape, list)\n","        return input_shape"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"7ff48d19-f0cf-438e-d242-b8704f3d8552","executionInfo":{"status":"ok","timestamp":1566505866932,"user_tz":-60,"elapsed":13855,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"251c598a-f9b6-4612-c12f-7623828eca18","executionInfo":{"status":"ok","timestamp":1566744620988,"user_tz":-60,"elapsed":684,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 4/pAEP2FlsxHMIP0_H7Q1xreW48rdKrZpU1vAMW0v2Svz12lmNfX-7dI8"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["ratio = [0.4, 0.4, 0.6, 0.8]  # exp1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","outputId":"cbfd3593-8620-4c60-dd01-c15b89a566f7","executionInfo":{"status":"ok","timestamp":1566744666266,"user_tz":-60,"elapsed":1073,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":292}},"source":["model_no = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","model_no.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=None, name='conv_1'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=None, name='conv_1'))\n","model_no.add(MaxPooling2D(pool_size=(2, 2)))\n","# model.add(KW(16, 1))\n","model_no.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_2'))\n","model_no.add(MaxPooling2D(pool_size=(2, 2)))\n","# model.add(Dropout(0.2))\n","# model.add(KW(26, 1))\n","model_no.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","model_no.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_4'))\n","# model.add(KW(100, 1))\n","model_no.add(Flatten())\n","model_no.add(Dense(10, name='dense_1'))\n","model_no.add(Activation(\"softmax\", name=\"softmax\"))\n","\n","model_no.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model = model_no\n","model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/cnn_model.h5\")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0825 14:51:05.295254 140432298551168 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","W0825 14:51:05.309926 140432298551168 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0825 14:51:05.313211 140432298551168 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","W0825 14:51:05.328764 140432298551168 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","W0825 14:51:05.500063 140432298551168 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","W0825 14:51:05.520009 140432298551168 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n","W0825 14:51:06.039711 140432298551168 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"b39a41d1-4423-4eb7-c824-5e1e14ea1b9c","executionInfo":{"status":"ok","timestamp":1566505874629,"user_tz":-60,"elapsed":568,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":387}},"source":["p = 9001\n","x = x_test[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  np.argmax(y_test[p]))\n","print(predicted_class.dtype)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 112, 112, 1)\n","[[4.5070234e-10 3.5182218e-11 6.4964005e-19 7.9527150e-22 9.8764454e-13\n","  1.4009657e-08 1.0000000e+00 4.8517122e-28 5.7851749e-15 4.9036436e-20]]\n","predicted_class 6\n","correct_class 6\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","outputId":"b1bba20e-66be-49d3-fa3e-469360bcedd9","executionInfo":{"status":"ok","timestamp":1566489123141,"user_tz":-60,"elapsed":1788,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=False)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["1\n","2\n","3\n","4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQEAAAEICAYAAABf40E1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADe9JREFUeJzt3UuIZHcVx/Hf6Zn0THo6mZ4ZwXGC\nMZpFEEFF8LEIGDSbCCEoImIiiY+4cuHCB+IjBsVAcOVCBNFEE43R+MAIirpQEUPEV1YqSMzEvCSa\nmcxM9/R0uvvvour03Dpd/6pb/ZjuqvP9QLhdXbdu3VH6d8793/+910opApDX1E7vAICdRQgAyREC\nQHKEAJAcIQAkRwgAyREC2BQz+5yZ3XuBv/MKMytmtvdCfu+kIgSwbczsGjN7Ygu285iZXbsV+4T1\nCIEJM27Vcdz2dxIRAmPAzF5nZn8xs9Nm9n0zu9/MvtB97xoze8LMPmFmz0i6q/v7W83sn2b2nJn9\nxMyOdX+/rpU2s1+b2Qe7P99iZr8zsy+Z2Qkz+5eZXddY9+Vm9pvuvvxS0osq+3xA0s8kHTOzM93/\njnUPHx4ws3vN7JSkW8zsbv/3NP9N3Z/vkXS5pAe72/h442tuNLPHzey/ZvaprfjfOiNCYJczs2lJ\nP5J0t6TDku6T9Paw2tHuey+T9CEze4ukOyS9S9JLJB2X9N0RvvaNkv6hzh/4nZK+bmbWfe87kv7U\nfe/zkm7ut4FSyryk6yQ9VUqZ7f73VPftGyQ9IGlO0rcH7Ugp5b2SHpd0fXcbdzbevlrSVZLeKumz\nZvbKEf6N6KIV2/3epM7/T18unQs9fmhmfwjrrEq6rZRyTpLM7EZJ3yil/Ln7+pOSTpjZFS2/83gp\n5Wvdz35T0lckvbgbSK+XdG33u35rZg9u4N/0UCnlx92fz57Pl5HdXko5K+kRM3tE0msk/W2jG8uK\nTmD3OybpydJ7pde/wzrPllIWw2eO+4tSyhlJ/5N0WcvvfKbx2YXuj7Pd7Z7oVnl3XKOL+79RzzR+\nXlBnHzEiQmD3e1rSZdZbLl8a1omXgj6lzqGBpLXj8yOSnpTkf8AzjfWPjrAvh7rbc5cPWL92iWr8\n/fyQ/eFS121ECOx+D0lakfRhM9trZjdIesOQz9wn6X1m9loz2yfpi5IeLqU8Vkp5Vp0wuMnM9pjZ\n+yVd2WZHSinHJf1R0u1mNm1mV0u6fsBH/iPpiJkdHLLpv0p6m5kdNrOjkj7SZzuvaLOPGB0hsMuV\nUpYkvUPSBySdlHSTpJ9KOjfgM7+S9BlJP1Cnel8p6d2NVW6V9DF1DhFeJen3I+zSe9QZOHxO0m2S\nvjVgP/6uTiA9amYn/QxFH/dIekTSY5J+Ien+8P4dkj7d3cZHR9hXtGDcVGT8mNnDkr5aSrlrp/cF\n449OYAyY2ZvN7Gj3cOBmSa+W9POd3i9MBk4RjoerJH1P0gFJj0p6Zynl6Z3dJUwKDgeA5DgcAJLb\nFYcDZkY7AmyzUkrfqZl0AkByhACQHCEAJEcIAMkRAkByhACQHCEAJEcIAMkRAkByhACQHCEAJEcI\nAMkRAkByhACQHCEAJEcIAMkRAkByhACQHCEAJEcIAMkRAkByhACQ3K645TgwrnqfGN/ebnroD50A\nkBydADCCWPk32glEO9kZ0AkAydEJAAPUKv9GO4K2Ff9CdgZ0AkBydAJAw7DK33YZeWWPy9XV1b7r\n+XYuREdAJwAkRycAdDWruP88NTXV93VcDusEvOLHDsDXH/T+dncDdAJAcnQCSK9ZvWuVf8+ePX2X\ntc7Axcq+srLSd+lih1BK2fbxAToBIDk6AaTVb2Q/VnSv+Hv37h24jJ2Bix3A8vJyz/KFF14YuI+r\nq6uMCQDYXnQCSKc2F2BqamqtknuFv+iii3qW09PTfV/7+v55r96xA1haWupZRnEeQfPswHaNDdAJ\nAMnRCSCN2AH0G9mPHcC+fft6lvv37+9Zxk7Axwa8WscOYHFxsec7XTyL0OwIODsAYFvRCWDitekA\npE4198peq/wHDhyQJF188cU9v/fOwbflFd1H/2MHEMcM4tI/v7q6SicAYHvRCSCNOC8gngmYnp5e\n1wF45Y/L2dlZSec7Au8EfNte0b0DqI0VxPkCg65FiB3NVnUGdAJAcnQCmFi1yh9nATbPBHgH4JXe\nl5dccknf17ETcF7Z4++98p87d65nWZt5aGaMCQDYXnQCmDi1DiB2AnEuwP79+9cd8x88eFCSdOml\nl/Ys/X3vHLyS+6i+zwvwfYhnCWrzC/qduYhXFkab7RDoBIDk6AQwMWr3+6t1AF6Nm2cC/FjfO4C5\nubme194JeMfgXYR/h1d8/y4fA/Dvih1A7AT6dQRxbkGs/JsdM6ATAJKjE8DE6jcjUFo/FuAj/LOz\ns2uV3juAQ4cOSTrfCfhYwMzMTM+2nI8FeFWOVyHGyl97vznGEK8ncLXfj4pOAEiOTgBjb6NnA5od\ngNQ53o8dQOwEamMB8fkBPjYQK3vcB58nEMcpmlV+WKWvPbugLUIAE2PYtGD/Q/OBQG/pm4OB8Y//\n8OHDPevEyUH+B+d/9D5dOH5n7cIkDwHfl4209rXPtN0WhwNAcnQCGFttTwl6VY5VOE4ImpubW6v8\nR44cWftdc914GOCVP76OpwT9O71j8FOHXq1rFw4NetBp7ZFmo96OjE4ASI5OABOj7eSgfgOCUmcc\nwDsBX3onEE8JxrGA+Dgxr/TeGcRqHMcr2t7CvLmt2jJ2AMMem04nACRHJ4Cx13aacDwrEDuBubm5\ndWcFfLzAuwffpld4nxzUr2L325d4liC+jrcpa1bxeOwfl7VpxYwJABiITgBjpzaCPmx+QJwk5BN/\nfA5Av8lC3iV4F+HbjjcHicfyzVuWNT/vlxJ7N+LLU6dO9exrswOoPcIsLuP/DswTANAKnQAmRtvb\niA0aG4g3D4mdQLyRaJz2G7sOHzOItxOLHYGvH29Osrq6unYGIm4rdh/xduXDzgo4OgEgOToBjL22\nYwPxOD2OEczMzFRvLV4bE4gPKI2zEr16x2p+9uzZnvXjLcmbtyObn5/v+139bkraXLZFJwAkRyeA\nsVV7xHhtWRvBb44ZxC4hVvZ4/F27VNi34xU9dgK1x5b58f6ZM2fWvjeOF2xVB+DoBIDk6AQw8TZS\nIWtnGmpVOH4urh8/F4/94/F+83ZjcR/aXmnIVYQAWqETwNgaVuHiXPt4ZV98GOjS0tLaMXsc1fel\nG/a489hJDOtG4vz/5tWHw64J4M5CADaFTgATo3aVXaz8cdbewsKCpM6I/OnTpyWdnzsQZ/D5SH08\n3u7XVTR/H2f7+Xf7fIH4url+vBuRL4ddPdgWnQCQHJ0Axl7tXnveAdRm6/m5+Oeff15SZ5ZgbT6A\nV+raDD//zli14xhD7D786kFfeifi+7awsLD2mdhdxGsFNtoR0AkAydEJYOzURsnjWECsxl5RfS6+\nV9/mXX38WN8/612DV+g4ey/eWzB2H7ELifvgFf/kyZOSpBMnTvS8Pn369Nq6/tnYbQy7wxDzBAAM\nRCeAiVGbF+CV04/D46w8P76Xzldy7wB8vMDvPhQ7gTgD0D9fG4+IYwKxK/Hv807g1KlTa93CsLEB\nxgQAbAidAMZerIDxqUDxjsBefeMsvuXl5bXz+D4G4B1A7Q5A8S7DbccGvNNozlFoLptnC3ydWifQ\n9q7DNXQCQHJ0AhhbsdLFe+vFaly7G2/zWn6vtnHU3ucPDOsE4gxC33as3t5xeEcQOwPvVubn59f2\nKZ4diOMPPHcAwIbQCWBixMredv3m04S82sZrCIbd3y+KYwO1MYJ4LUE87l9cXKxe2bjZDsDRCQDJ\n0Qlg7NWexjusI+g3nyBeI+BjA7WnBre9T0CtI6hdfdjsGOK68ZoBrh0AsCl0ApgYtQoYO4La1YbL\ny8trlb72lJ/YAQwbE4ivYxWv3e2o+fta5d+q+wkQApg4w8Jg0KXH/scXb+456m3Dahfx1AKo9ge+\nsrKy7jOjXiA0DIcDQHK22RTZkp0w2/mdwMRq+5CSqampaqWvtf/DBgaHdQS1DqH5+9rhzKh/u6WU\nvjtLJwAkRyeAdAZ1Bm27htq2ora3CR90nL/RSUB99oVOAMB6nB1AOoMe1tG20o/6aLO2Dwjpt952\nd+t0AkBydAJIb1Clrb23VZ3ARtfbSnQCQHJ0AkDDqBV71LMDuxGdAJAcnQCwCeNQ6YehEwCSIwSA\n5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACS\nIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiO\nEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlC\nAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgB\nIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA\n5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACS\nIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiOEACSIwSA5AgBIDlCAEiO\nEACSIwSA5AgBIDlCAEiOEACSIwSA5KyUstP7AGAH0QkAyRECQHKEAJAcIQAkRwgAyRECQHKEAJAc\nIQAkRwgAyRECQHKEAJAcIQAkRwgAyRECQHKEAJAcIQAkRwgAyRECQHKEAJAcIQAkRwgAyRECQHKE\nAJDc/wHY0u0jrftvJgAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["KL divergenvce\n","2.8940064409972406\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"S5bTNMOXkimK","colab_type":"code","outputId":"94022d93-f4a2-4aee-8a7e-ec5d630643ce","executionInfo":{"status":"ok","timestamp":1566414484686,"user_tz":-60,"elapsed":400,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["x_comb_gt /= np.sum(x_comb_gt)\n","print(np.sum(x_comb_gt))\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))\n","print(np.sum(combined))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1.0\n","2.9415657532918003\n","1.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fu1DQa2Q1bSC","colab_type":"text"},"source":["Create dataset"]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","colab":{}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","preprocessed_x_t.shape\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border\n","\n","numbers = {}\n","for i in range(0, 10):\n","  numbers[i] = sorted_x[border[i]:border[i+1]]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Tg4AIiEIBxO8","colab_type":"text"},"source":["overlap 10"]},{"cell_type":"code","metadata":{"id":"rT_xx0PFBvC3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":538},"outputId":"e63d16c9-a108-400b-9ef7-2641f49f22d2","executionInfo":{"status":"ok","timestamp":1566506125534,"user_tz":-60,"elapsed":28215,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 10)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  noise3_arg = random.sample(range(len(numbers[noises[2]])), 1)\n","  noise4_arg = random.sample(range(len(numbers[noises[3]])), 1)\n","  noise5_arg = random.sample(range(len(numbers[noises[4]])), 1)\n","  noise6_arg = random.sample(range(len(numbers[noises[5]])), 1)\n","  noise7_arg = random.sample(range(len(numbers[noises[6]])), 1)\n","  noise8_arg = random.sample(range(len(numbers[noises[7]])), 1)\n","  noise9_arg = random.sample(range(len(numbers[noises[8]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg] +\\\n","                    numbers[noises[2]][noise3_arg]+numbers[noises[3]][noise4_arg]+numbers[noises[4]][noise5_arg] +\\\n","                    numbers[noises[5]][noise6_arg]+numbers[noises[6]][noise7_arg]+numbers[noises[7]][noise8_arg] +\\\n","                    numbers[noises[8]][noise9_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQUAAAD8CAYAAAB+fLH0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAHxhJREFUeJzt3XeYVdX1//H3EkSxhCKKCCqIBcGK\nJajYv4ogwW5sEaOPRKMGK2JPoom9RiJg5WcBETVgQUEUCRYUxEJTFKOMoIhdrOj+/XHv4sy+zDAz\nt8/weT3PPDP33HvP2Zxh9l1nn73XshACIiJulVI3QETKizoFEYmoUxCRiDoFEYmoUxCRiDoFEYmo\nUxCRSEE6BTM7wMzeNrN3zWxgIY4hIoVh+Z68ZGaNgHeA/YAK4FXg6BDCrLweSEQKonEB9rkz8G4I\nYR6AmY0ADgKq7RTMTNMqRQpvcQhh3ZpeVIjLh7bA/EqPK9LbImbWz8ymmtnUArRBRJb3QW1eVIhI\noVZCCEOBoaBIQaScFCJS+AjYsNLjdultIlIPFKJTeBXYzMw6mFkT4ChgTAGOIyIFkPfLhxDCUjM7\nHXgaaATcFUKYme/jiEhh5P2WZFaN0JiCSDFMCyHsWNOLNKNRRCLqFEQkok5BRCLqFEQkok5BRCLq\nFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQk\nok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkUrJS9CIrg6222gqAN998E4B77rkH\ngBNPPLFUTaqRIgURiShSECmA1VdfHYBbbrkFAC/k3LJly5K1qbayjhTMbEMze87MZpnZTDPrn97e\n0szGm9nc9PcW+WuuiBRaLpcPS4FzQgidgW7AaWbWGRgITAghbAZMSD8WWamEEAgh0KpVK1q1arVs\ne7NmzWjWrFkJW1azrDuFEMLCEMJr6Z+/AWYDbYGDgGHplw0DDs61kSJSPHkZUzCz9sD2wBSgdQhh\nYfqpj4HW+TiGSKH4dX7jxo1ZtGhRXva55557AtClS5do+7///e+87L+Qcu4UzGwt4GHgzBDC12a2\n7LkQQjCzUM37+gH9cj2+iORXTp2Cma1KqkO4P4TwSHrzJ2bWJoSw0MzaAFV2vSGEocDQ9H6q7DhE\nCumMM84A4NJLLwVg9uzZ7LHHHnnZ98UXXxw9fu211wAYO3ZsXvZfSLncfTDgTmB2COGGSk+NAfqm\nf+4LjM6+eSJSbLlECrsBfwDeMrPX09suBK4CRprZScAHwJG5NVEkPzp27AjAXnvtBSQRgo8prLHG\nGjkfY+ONNwZgm222ibY/++yzAHz77bc5H6PQsu4UQgiTAavm6X2z3a+IlJZmNEqD16hRIwAOOOAA\nIJll6H755RcAHnvssZyPcdZZZwGw9tprA/Drr78C8OSTT2a972LT2gcRiShSkAbvzDPPBOCaa66J\ntn/33XcAnHzyyQCMGDEi62PstNNOQHJHw3lU8vzzz2e972JTpCAiEUUK0mC1adMGgGOOOSba/uWX\nXwLQo0cPAKZOnZrzsQ455JDo8axZswC4/vrrc953sSlSEJGIIgVpsLp16wbAdtttF20fMmQIkJ8I\nwec2rLPOOtH2//3vfwAsWLAg52MUmyIFEYkoUpAGy1cqrrJK6rNvxowZANx55515O4bPhuzevTsA\nviCwefPmeTtGsalTkAbLLxt8AlHnzp2BpHMYN25cjfuYPn06AF27dgWStGquU6dOAGy66abR85mv\nq090+SAiESuHHk1Lp6UQ/Jbk/fffDySXE9nwy4La/r30798fgFtvvTXrYxbAtBDCjjW9SJGCiEQU\nKUiDt9pqqwGw7bbbArDvvlUv4j355JNp2rRplc998803ACxevBiAHXdMfeD6Qij38ssvA7D//vsD\nsGTJklyanm+KFESk7hQpSEH4p/KkSZOAZCnxoYceCsB//vOf0jQsRxtttBEAL730EgDrr78+kCRP\n2XXXXQGYOXNmCVpXI0UKIlJ3mqcgeeGfoOeccw4A/fqlEnU3adIESEbt/U7AoEGDABgwYEBR25kr\nXxr9m9/8Jtp+2WWXAWUbIdSJIgURiShSkDrxa+i9994bgMMOOwyA3XffHWBZibTq7ut74VWPKJYu\nXcoll1wCJGnRypHfTTjwwAOBZCHUxIkTgSQxa0OgSEFEIooUpE4eeughIBllr8ncuXMBeOqpp4Ak\nsUmHDh0AGDhwIG+99RYAw4cPz2tb88nnOmyxxRbR9meeeQaAN998s+htKhRFCiISUaQgdeLJQzxS\n8Jl+Hgn4TL/TTz8dgAkTJgDw888/R/t54oknAOjZs+dyCUrKkbf/k08+AaB161Td5Ndff73a99RX\n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\nICIRdQoiEvn/2hXM1FKk2uIAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1mJsZRn9RsLF","colab_type":"text"},"source":["overlap 5"]},{"cell_type":"code","metadata":{"id":"Kf1gH6QyRuiq","colab_type":"code","outputId":"b1dcead1-d680-4794-f3e0-69df50392f99","executionInfo":{"status":"ok","timestamp":1566502653498,"user_tz":-60,"elapsed":26069,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 5)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  noise3_arg = random.sample(range(len(numbers[noises[2]])), 1)\n","  noise4_arg = random.sample(range(len(numbers[noises[3]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg] +\\\n","                    numbers[noises[2]][noise3_arg]+numbers[noises[3]][noise4_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":22,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n7yl8SuCPAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cvVT0WqAB7E9","colab_type":"text"},"source":["overlap 4"]},{"cell_type":"code","metadata":{"id":"tZwkKDUIB5qF","colab_type":"code","outputId":"1f647f78-04c3-4178-8b35-e415ce33c08c","executionInfo":{"status":"ok","timestamp":1566489264696,"user_tz":-60,"elapsed":26874,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 4@)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  noise3_arg = random.sample(range(len(numbers[noises[2]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg] +\\\n","                    numbers[noises[2]][noise3_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nEJHA/wM+wP4xZdl7nQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CefVVAqR3CN5","colab_type":"text"},"source":["overlap3"]},{"cell_type":"code","metadata":{"id":"DTqNPM8h3A_Y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":538},"outputId":"00eaffe2-2e0c-4dd3-841b-a97587c6c11c","executionInfo":{"status":"ok","timestamp":1566503136982,"user_tz":-60,"elapsed":25904,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":32,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQUAAAD8CAYAAAB+fLH0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAE9JJREFUeJzt3XuwVnW9x/H3Ry6pdFRABrkpOCpm\nlIqIMjhFeixQFHMsLU1qNGaqczSqQTyni8yImmlK4+2gZeQwYgctCBtvKIE5h+NWHENQwVtCXBPx\nfhL5nj+etXj2b7M3e/PcN31eM3uevdaznrV++wf7s7/rt26KCMzMcnvVuwFm1lgcCmaWcCiYWcKh\nYGYJh4KZJRwKZpZwKJhZoiqhIGmspBckrZY0tRrbMLPqUKVPXpLUBXgROBVYAzwJfCUiVlR0Q2ZW\nFV2rsM6RwOqIeBlA0hxgAtBmKEjyaZVm1bc5Ivq0t1A1dh8GAK83m16TzUtImiSpSVJTFdpgZjt7\nrSMLVaNS6JCImAnMBFcKZo2kGpXCWmBQs+mB2Twz6wSqEQpPAodLGiKpO3AeML8K2zGzKqj47kNE\nbJP0b8CDQBfgVxHxXKW3Y2bVUfFDkiU1wmMKZrXwVESMaG8hn9FoZgmHgpklHApmlnAomFnCoWBm\nCYeCmSUcCmaWcCiYWcKhYGYJh4KZJRwKZpZwKJhZwqFgZgmHgpklHApmlnAomFnCoWBmCYeCmSUc\nCmaWcCiYWcKhYGYJh4KZJRwKZpZwKJhZwqFgZgmHgpklHApmlnAomFnCoWBmiZJDQdIgSY9JWiHp\nOUmXZvN7SXpY0qrstWflmmtm1VZOpbAN+H5EHAWcCHxH0lHAVGBhRBwOLMymzayTKDkUImJdRDyd\nff82sBIYAEwAZmWLzQLOKreRZlY7FRlTkDQYOBZYCvSNiHXZW+uBvpXYhpnVRtdyVyDp48C9wHcj\n4i1JO96LiJAUbXxuEjCp3O2bWWWVVSlI6kYhEGZHxH3Z7A2S+mXv9wM2tvbZiJgZESMiYkQ5bTCz\nyirn6IOAXwIrI+Lnzd6aD0zMvp8IzCu9eWZWa4potbpv/4PSScAS4C/A9mz2f1AYV/gtcDDwGvDl\niHijnXWV1ggz2x1PdaQyLzkUKsmhYFYTHQoFn9FoZgmHgpklHApmlnAomFnCoWBmCYeCmSUcCmaW\ncCiYWcKhYGYJh4KZJRwKZpZwKJhZwqFgZgmHgpklHApmlij7Ho1mVrpPf/rTAGzfvj2ZP3r0aAD+\n8Y9/8PLLLwNw6KGHAvDRRx8B8MQTTwCwevXqirbJlYKZJVwpmNXA6aefDsBpp50GwMknnwzA0KFD\nAdjVHdA++OADAPbee+9k/quvvpqs67XXXqtIW10pmFnC92g0q6IRIwq3RMz3/7t2TYvz/DkpW7Zs\nAeCtt97aaR0bNxaekjBo0CAA+vZNn690//33A3DGGWe01xzfo9HMdp/HFMyq6OyzzwaKYwbXXnst\nUKwMmpqaAHj22WcB2LRpU5vr6tGjBwBDhgwB4IYbbgCK4xKV4krBzBKuFMyq6OGHHwaK5xb86Ec/\nKnld7777LsCO8xb22qvwN73lOEW5XCmYWcJHH8w6iRNOOAGAq666CoAxY8YAcOGFFwIwe/bs9lbh\now9mtvs8pmDWwE455RT69+8PwO233w5At27dAFi2bBkA8+ZV9sHurhTMLOFKwawCunfvDsCpp54K\nwBFHHAEU/6rvs88+QPHsxPw1P0/hzTffBKBnz54AjBs3DoArr7ySXr16AfDSSy8BMH36dADuvPPO\nqvwsZVcKkrpIWiZpQTY9RNJSSasl3SOpe/nNNLNaqUSlcCmwEtgvm/4pcENEzJF0G3ARcGsFtmPW\ncL71rW8BxSMAI0eOBIrXNLR3dC9fbv369QD06dMHKJ6DADBt2jQAbr75ZmDXZz1WQlmVgqSBwOnA\nHdm0gJOBudkis4CzytmGmdVWuZXCjcAU4F+y6d7AmxGxLZteAwwocxtmDeOggw4CYMqUKQB8+9vf\nBopjB7n87MMPP/wQgHfeeQeAAQNa/3VoeeVjc+PHjweKlUK1lVwpSBoPbIyIp0r8/CRJTZKaSm2D\nmVVeOZXCaOBMSacBe1MYU5gBHCCpa1YtDATWtvbhiJgJzASf0WidR75/f/HFFwOwefNmAG688UYA\nlixZAsB7770HFO6xCHD11VcD0Lt3bwBWrVoFwKxZs4DimMKwYcMAOOywwwCYMGECw4cPB2Dp0qUA\nfOpTnwKK1UillVwpRMTlETEwIgYD5wGPRsT5wGPAOdliE4HKnllhZlVVjfMULgPmSLoSWAb8sgrb\nMKuLUaNGAcVzBi655BIAunTpAsD+++8PwPHHHw/AmWeeCRQriOuvvx6ARYsWdWh7/fv337HN/MhE\nPk5RLRUJhYhYBCzKvn8ZGFmJ9ZpZ7fkqSbPdcM011wAwefJkALZu3QrAI488AsCLL74IwIIFC4Di\nmYqVfjZDiXyVpJntPlcKZiXIjw7kRx/yiqDBuVIws93nqyTNStAgYwRV4UrBzBIOBTNLOBTMLOFQ\nMLOEQ8HMEg4FM0s4FMws4VAws4RDwcwSDgUzSzgUzCzhUDCzhEPBzBIOBTNLOBTMLOFQMLOEQ8HM\nEg4FM0s4FMws4VAws4RDwcwSDgUzSzgUzCzhUDCzhEPBzBJlhYKkAyTNlfS8pJWSRknqJelhSauy\n156VaqyZVV+5lcIM4IGIOBI4GlgJTAUWRsThwMJs2sw6iZKfOi1pf+AZ4NBothJJLwBjImKdpH7A\noogY2s66/NRps+qr+lOnhwCbgDslLZN0h6QeQN+IWJctsx7oW8Y2zKzGygmFrsBw4NaIOBZ4lxa7\nClkF0WoVIGmSpCZJTWW0wcwqrJxQWAOsiYil2fRcCiGxIdttIHvd2NqHI2JmRIzoSDljZrVTcihE\nxHrgdUn5eMEpwApgPjAxmzcRmFdWC82sprqW+fl/B2ZL6g68DHyDQtD8VtJFwGvAl8vchpnVUMlH\nHyraCB99MKuFqh99MLM9kEPBzBIOBTNLOBTMLOFQMLOEQ8HMEg4FM0s4FMws4VAws4RDwcwSDgUz\nSzgUzCzhUDCzhEPBzBIOBTNLOBTMLOFQMLOEQ8HMEg4FM0s4FMws4VAws4RDwcwSDgUzSzgUzCzh\nUDCzhEPBzBIOBTNLOBTMLOFQMLOEQ8HMEmWFgqTJkp6TtFzS3ZL2ljRE0lJJqyXdI6l7pRprZtVX\ncihIGgBcAoyIiGFAF+A84KfADRFxGLAFuKgSDTWz2ih396ErsI+krsC+wDrgZGBu9v4s4Kwyt2Fm\nNdS11A9GxFpJ1wF/Bd4HHgKeAt6MiG3ZYmuAAWW30qwVPXr0AGDq1KkA9OnTB4AvfvGLAPz9738H\nYOjQocn0fffdB8Djjz+eTL/33nu1aHbDK2f3oScwARgC9Ad6AGN34/OTJDVJaiq1DWZWeYqI0j4o\nfQkYGxEXZdMXAqOALwEHRcQ2SaOAKyLiC+2sq7RG2D+lvBK48sorgWIlIAmA/P90R6dXrFgBwJw5\nc5g+fXrV219HT0XEiPYWKmdM4a/AiZL2VaF3TwFWAI8B52TLTATmlbENM6uxkisFAEnTgHOBbcAy\n4GIKYwhzgF7ZvAsi4v/aWY8rBWvX5MmTAbjuuuuAtv/yb9q0qdX39913XwA2b94MwCGHHLLT58eN\nGwfAgw8+WMWfpG46VCmUPNAIEBE/AX7SYvbLwMhy1mtm9VNWpVCxRrhSsA7YsGEDAL179wZ2rgRG\njiz8LcorgZbySuFzn/scALfcckub23ryyScBeOCBBwD48Y9/XFbbG0T1KwWzWvjMZz4DFA85ttxd\nmDlzJgBPP/30Ltdz5JFHAnDTTTe1u83jjz8egKOPPhooBsq0adMAePvttzv+A3QyvvbBzBKuFKzh\nbd++HShWCC13eT/xiU/s8vP54OG8eemBsHy9e+3V9t/Grl0LvyL5IGdTU+G0mjlz5nSo7Z2RKwUz\nS3ig0TqNP/3pT0BxbKDlGMM55xROj/nd734HQL9+/QCYP38+ACNGtDvGtlP18NFHHwHF8YtFixYB\ncO655wJtD2o2qKqfvGRmeyBXCtZpHHzwwQCcffbZAFx//fVAsVJ4//33gWKl0LdvXwA+//nP73K9\nzauBfF1jxowB4IILLgDgm9/8ZvKZe+65B4CvfvWrJf40deFKwcx2nysF67TuuusuAM46q3DLjvxS\n6nz/vz0tj2Y0rxTy8YmlS5cC8PrrryefXbVqFVA8h2Ljxo2l/RC15UrBzHafKwXr9PKjEVdddRVQ\nvLS6LS2PKLRWKSxbtgyAk046CYAlS5YAcNxxxyXr+t73vgfAjBkzyvshasOVgpntPlcKtsfIL3R6\n9NFHW30/v5lKftu122+/PZm/ePHina6ryCuB/JyHH/zgB8k677//fqB4RGTbtm00MFcKZrb7XCnY\nHiOvAPbZZ59k/hNPPAHA6NGjd/n5uXPn7jiS0fIKzKuvvhqAV155pdXPHnHEEQC89NJLpTS9Vlwp\nmNnu81WS1unllUHLCiH3hz/8oUPr2bx5844KIX+dNGkSAFdcccWOZQAOPPDAktvb6FwpmFnClYJ1\nepdddtku37/jjjs6vK6WY2z5dH4ruIULFwLFqyT3RK4UzCzhSsE6vf79++/y/fwsxI7ctr3lmMI/\nI1cKZpZwpWB7vFmzZgHFeyQ8//zzbS7b1pjCfvvtBxQfUbcnc6VgZglXCrbHaOvuzPm9HBcvXgzA\n1772NaD4aPr8MXN9+vTZMZaQr+O2224D4IwzzgDgmGOOSdadXzfxxhtvVPAnqS9XCmaWcKVge7x8\nXCB/3Fx+ZWPLB9L26dNnx7J51ZFf6zBlypRW153fmWnLli3VaHpduFIws4QrBdvjtBxbyO+ilN+h\nKZff0zEfc2h+bsJDDz0EwL333gsUr5LM5WMJ7Z1N2Rm1WylI+pWkjZKWN5vXS9LDklZlrz2z+ZL0\nC0mrJT0raXg1G29mldeRSuHXwE3Ab5rNmwosjIhrJE3Npi8DxgGHZ18nALdmr2Y197e//Q0o/tX/\n+te/DhTvfXD++ecDxTGHP//5zzvGBj75yU8CxUfRt5Q/qj4/grEnabdSiIjFQMvjLROAWdn3s4Cz\nms3/TRT8D3CApH6VaqyZVV+H7rwkaTCwICKGZdNvRsQB2fcCtkTEAZIWANdExOPZewuByyKiqZV1\nTgImZZPHtXzfrKPycwfy+ya0dS3E008/DcDbb78NFI8sDBs2bMcy+X0SBg8e3Oo6fvjDHwJwyy23\nALB169Zyml5rHbrzUtkDjRERpdxOLSJmAjPBt2MzaySlhsIGSf0iYl22e5A/HmctMKjZcgOzeWZV\n88wzzwDFsw6nT58OwNixY5Plhg9Px70/+9nPtrvupqZCkfuzn/0MKI4xvPPOO2W0uLGVep7CfGBi\n9v1EYF6z+RdmRyFOBLZGxLoy22hmNdTumIKku4ExwIHABuAnwO+B3wIHA68BX46IN7LxhZuAscB7\nwDdaG09oZRvefbCK6datGwAjR44EYPz48QBMnjw5eT+3dm2hmJ09ezbLlxeOvP/xj38E4IMPPgCK\nT7Tu5Do0puBbvJv98/At3s1s9zkUzCzhUDCzhEPBzBIOBTNLOBTMLOFQMLOEQ8HMEg4FM0s4FMws\n4VAws4RDwcwSDgUzSzgUzCzhUDCzhEPBzBIOBTNLNMpj4zYD72avjehA3LZSNGrbGrVdUN22HdKR\nhRridmwAkpo6cquoenDbStOobWvUdkFjtM27D2aWcCiYWaKRQmFmvRuwC25baRq1bY3aLmiAtjXM\nmIKZNYZGqhTMrAE0RChIGivpBUmrJU2tYzsGSXpM0gpJz0m6NJvfS9LDklZlrz3r2MYukpZlT/hG\n0hBJS7O+u0dS9zq16wBJcyU9L2mlpFGN0m+SJmf/nssl3S1p73r1m6RfSdooaXmzea32U/b4xV9k\nbXxW0vC211w5dQ8FSV2Am4FxwFHAVyQdVafmbAO+HxFHAScC38naMhVYGBGHAwuz6Xq5FFjZbPqn\nwA0RcRiwBbioLq2CGcADEXEkcDSFNta93yQNAC4BRkTEMKALcB7167dfU3isYnNt9dM44PDsaxJw\na01aGBF1/QJGAQ82m74cuLze7craMg84FXgB6JfN6we8UKf2DMz+05wMLABE4USXrq31ZQ3btT/w\nCtkYVbP5de83YADwOtCLwsl6C4Av1LPfgMHA8vb6Cfgv4CutLVfNr7pXChT/0XJrsnl1JWkwcCyw\nFOgbxadnrwf61qlZNwJTgO3ZdG/gzYjYlk3Xq++GAJuAO7Ndmzsk9aAB+i0i1gLXAX8F1gFbgado\njH7LtdVPdfndaIRQaDiSPg7cC3w3It5q/l4UIrvmh2wkjQc2RsRTtd52B3QFhgO3RsSxFE5ZT3YV\n6thvPYEJFIKrP9CDncv3hlGvfmquEUJhLTCo2fTAbF5dSOpGIRBmR8R92ewNkvpl7/cDNtahaaOB\nMyW9CsyhsAsxAzhAUn4NS736bg2wJiKWZtNzKYREI/TbvwKvRMSmiPgQuI9CXzZCv+Xa6qe6/G40\nQig8CRyejQZ3pzAINL8eDZEk4JfAyoj4ebO35gMTs+8nUhhrqKmIuDwiBkbEYAp99GhEnA88BpxT\n57atB16XNDSbdQqwggboNwq7DSdK2jf7983bVvd+a6atfpoPXJgdhTgR2NpsN6N6aj3w08bAy2nA\ni8BLwH/WsR0nUSjdngWeyb5Oo7DvvhBYBTwC9Kpzf40BFmTfHwr8L7Aa+G/gY3Vq0zFAU9Z3vwd6\nNkq/AdOA54HlwF3Ax+rVb8DdFMY2PqRQYV3UVj9RGEi+Ofu9+AuFIyhVb6PPaDSzRCPsPphZA3Eo\nmFnCoWBmCYeCmSUcCmaWcCiYWcKhYGYJh4KZJf4f2bUfUHkZlbsAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nqUPYQYQAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yJR20Be95ik2","colab_type":"text"},"source":["overlap3"]},{"cell_type":"code","metadata":{"id":"sJ-hM6LA2G_U","colab_type":"code","outputId":"8b46661e-70a4-42c9-81d3-b8b15f2b1cfe","executionInfo":{"status":"error","timestamp":1566500626479,"user_tz":-60,"elapsed":1675,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":232}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":15,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-61a2da8cf793>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0mtar\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnums\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m   \u001b[0mnoises\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnums\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m   \u001b[0mtar_arg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumbers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtar\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m   \u001b[0mnoise1_arg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumbers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnoises\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0mnoise2_arg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumbers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnoises\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'numbers' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"QNEHx6-3S2dM","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"rOWcexhmR46u","colab_type":"code","colab":{}},"source":["\"\"\"\n","sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap10.npz\"\n","np.savez(outfile, sorted_x, sorted_y, gt_x)\n","\"\"\"\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap4.npz\"\n","testfile = np.load(outfile)\n","sorted_x = testfile[\"arr_0\"]\n","sorted_y = testfile[\"arr_1\"]\n","gt_x = testfile[\"arr_2\"]\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MPHy5BoFt_xZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"2a8f421d-d65c-44ff-fd35-531d48ab3ebe","executionInfo":{"status":"ok","timestamp":1566500721565,"user_tz":-60,"elapsed":545,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["sorted_y.shape"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000,)"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"ZgyY43g3RzFT","colab_type":"code","outputId":"223e5f26-64a9-40fc-a84f-fd03705d1b4a","executionInfo":{"status":"ok","timestamp":1566749313237,"user_tz":-60,"elapsed":372,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\"\"\"\n","sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","\"\"\"\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1003, 2037, 2990, 4012, 5068, 6034, 7028, 8025, 9045, 10000]"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"nUCnPEku_Rlw","colab_type":"code","outputId":"dd4798fd-7886-4505-d81c-5c898227282e","executionInfo":{"status":"ok","timestamp":1566748245422,"user_tz":-60,"elapsed":357,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\"\"\"\n","sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","\"\"\"\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1033, 2052, 3069, 4084, 5050, 5982, 7001, 7997, 8982, 10000]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"9TQ3yLlTuekM","colab_type":"text"},"source":["Evaluate!"]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"70e28b84-d634-425a-c2b8-fb34ec5916cd","executionInfo":{"status":"ok","timestamp":1566749331962,"user_tz":-60,"elapsed":14077,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":289}},"source":["kl = np.zeros(10000)\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(1)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    preprocessed_input = np.expand_dims(sorted_x[border[i]:border[i+1]], axis=-1)\n","    # print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=False)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()\n"],"execution_count":38,"outputs":[{"output_type":"stream","text":["\n","  0%|          | 0/1 [00:00<?, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (1003, 32)\n","output shape (1003, 112, 112, 32)\n"," \n","weights shape (1003, 32)\n","output shape (1003, 56, 56, 32)\n"," \n","weights shape (1003, 64)\n","output shape (1003, 26, 26, 64)\n"," \n","weights shape (1003, 64)\n","output shape (1003, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\n","100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1/1 [00:13<00:00, 13.58s/it]\u001b[A\n","\u001b[A"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"s9GIEBFq9a1Z","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"1928e4ea-591b-41c6-f3bd-a82ab10cb796","executionInfo":{"status":"ok","timestamp":1566749367749,"user_tz":-60,"elapsed":1349,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":791}},"source":["plt.imshow(sorted_x[border[0]+2].reshape(112, 112), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[2][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[2][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[2][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[2][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[2][1:], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":39,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n+eWSR6Ky2QSk5GwCScWNSf7888+SR6Ky2QSk5GwCSe3YsQMoVtEpL5uAlJxNIJndu3cDcMoppwBw\n8sknA/D111+XNiaVyyYgJWcTSOazzz4Dij0DcVNOm0BeNgEpOc8TkJLwPAFJLRkCUnKGgJScISAl\nZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJSc\nISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKG\ngJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkC\nUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJScISAlZwhIyRkCUnKGgJRcrV6vlz0G\nSSWyCUjJGQJScoaAlJwhICVnCEjJGQJScoaAlJwhICVnCEjJGQJScoaAlJwhICVnCEjJGQJScoaA\nlJwhICVnCEjJGQJScoaAlJwhICVnCEjJGQJScoaAlNz/AO8Z0g4muxg6AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nXMeY1dmcoW/3VLh48aKk5nNydTO75999992SmvHW676dZJrn6hHmy9LS0kRCIZNDKyUGpHrP92r3\nl6rXSnWOuZLf/p6RqSefO66kuXpZjVH5XFXaKnsoZUJiNRXMqoeC368Tn+6hcPDgQUlNUiF3v/Br\nyu9Za3mNWAzVriiLlFr57LPPyu8aXe8vz/8cHxbh81kP/hw8DnpcJaEAAAAAAABmBgmFBeBZuWvX\nrkmSTp8+LalZs1dVzDxr5dmqXGM5j5U27/Lgo92+fVuvvvqqJOlf//VfJTWzmv/8z/8sSfrGN74h\nSXrllVckNSkHdn3APKj2gXcFzD/3uVGtiXa1IM8lP64ra04ytXdSmJUxo9rf2kfv9HLy5MlRnwVX\neP15vfDCC5ImK46HDx8eu97j5qy8dyyuPrs85N/x/N3P6tRqf28zkZCvx9qVyKzOu8pfVWS7qvRV\nH4cqpZXV/xwrV5IJBd/X67/Nl71LjI/t7utSM37m+FF9BlRdt58qmbAof2t8LmXSoNrpJFWJBs6V\ncf633kb/3pBQAAAAAAAAg5FQmGOe2XZl7ejRo5Katb6ZQEiuzGUl0hUGV+I8C+h9ZOdx9m/Hjh2j\nz+X3v/+9JOlHP/qRJOnMmTOSpH/4h3+QJD399NOSpN/+9reSpJ/85Ceb+lqBtcgKZe7ikrs/ZFUv\newfkuOAKvh83+xXMkj4Vzvw8XDW5dOmSpMn1nX7fHnf986yCAhvl9u3bo2pT7j7gY1XN7KrmVbu9\nZJW0+j3362lXxfIxq/Nytd8t+u5IUVVA+1REPf7leOn35s/dfSE8PjiNcfXqVUlNn4js61B9zvP4\nfQv9dJ0HVbpoFv/WrkaeO7krQXUeZ++UHHOyP9x2V32e642EAgAAAAAAGIyEwhzz2jyvB3aX4Vyr\nl1xRO3LkiKRmbbATDl7b99hjj0lqZrX+53/+Z33fwBbx5/b2229Lkp599llJ0te+9jVJTcLjgQce\nkERCAbMtqxa5ltrnuy9X+9Vbdo/PCr4fz4/TTjrMyhrPqrLhsdFj3Pnz50eJC+/e4MqiuWri3SCy\nO757Kfh2rrYA661dtc7qXK5HzoSib99V5Ry6a0s+bu4Cc+vWrd7jQd9+AVlxq459b5/7s9++fXui\nt1Qes1rq71tOKJjHGl/vy759JhRIJiy+vr1BrOoN4r9V8/43J/+tkt9B8nLuEpPnHMbld8CNSiqQ\n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\nWQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nSUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","colab":{}},"source":["\"\"\"\n","sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = x_comb_gt\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()\n","\"\"\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sEfuI3GpeRg5","colab_type":"code","outputId":"3317dc75-0d55-431a-abca-51f5083dd2e2","executionInfo":{"status":"ok","timestamp":1566413510802,"user_tz":-60,"elapsed":427,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["results[0][0].shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4, 112, 112)"]},"metadata":{"tags":[]},"execution_count":90}]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"d5b28d66-78e7-4e7b-cd9a-1d6f009f24b1","executionInfo":{"status":"ok","timestamp":1566506364590,"user_tz":-60,"elapsed":4087,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["kls = np.zeros((10000))\n","temp = []\n","for i in range(0, 10):\n","  gts = gt_x[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    kls[border[i]+j] = kl\n","    temp.append(kl)\n","  print(i, \"mean kl\", np.mean(temp))\n","print(kls.mean())"],"execution_count":14,"outputs":[{"output_type":"stream","text":["0 mean kl 3.0511244089631426\n","1 mean kl 3.056755069618845\n","2 mean kl 3.048933103714388\n","3 mean kl 3.050766460466014\n","4 mean kl 3.047881624062294\n","5 mean kl 3.0503084390402995\n","6 mean kl 3.05045498730665\n","7 mean kl 3.0491851031415154\n","8 mean kl 3.048417534494232\n","9 mean kl 3.047711710231922\n","3.0102248561960696\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ookWUk3PRoKF","colab_type":"code","outputId":"420c9a1e-7904-45e6-d5e1-994063c2aed6","executionInfo":{"status":"error","timestamp":1566610273837,"user_tz":-60,"elapsed":766,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":130}},"source":["kl divergence overlap3\n","0 mean kl 3.0378353348747353\n","1 mean kl 3.038974855874704\n","2 mean kl 3.0390930306960016\n","3 mean kl 3.0435816291343443\n","4 mean kl 3.043890705257461\n","5 mean kl 3.0453530056399254\n","6 mean kl 3.0456591014249432\n","7 mean kl 3.0452695154305007\n","8 mean kl 3.0456518523427563\n","9 mean kl 3.0454341108570557\n","3.023506985258885\n","\n","kl divergence overlap4\n","0 mean kl 3.0321734929197124\n","1 mean kl 3.035347910361329\n","2 mean kl 3.036184004918074\n","3 mean kl 3.04338054129518\n","4 mean kl 3.0427828448055725\n","5 mean kl 3.043959458569267\n","6 mean kl 3.045032368549812\n","7 mean kl 3.044579607277202\n","8 mean kl 3.04431400546849\n","9 mean kl 3.0444338200051204\n","3.025253886939088\n","\n","kl divergence overlap5\n","0 mean kl 3.044482590759768\n","1 mean kl 3.0428625607818987\n","2 mean kl 3.043030214434262\n","3 mean kl 3.045128350183585\n","4 mean kl 3.0454188430322184\n","5 mean kl 3.0445008145794756\n","6 mean kl 3.046633161593329\n","7 mean kl 3.045641745909299\n","8 mean kl 3.0449735902748536\n","9 mean kl 3.044998293697173\n","3.020942807176965\n","\n","overlap 10\n","0 mean kl 3.0511244089631426\n","1 mean kl 3.056755069618845\n","2 mean kl 3.048933103714388\n","3 mean kl 3.050766460466014\n","4 mean kl 3.047881624062294\n","5 mean kl 3.0503084390402995\n","6 mean kl 3.05045498730665\n","7 mean kl 3.0491851031415154\n","8 mean kl 3.048417534494232\n","9 mean kl 3.047711710231922\n","3.0102248561960696"],"execution_count":1,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-be18953fefc7>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    kl divergence overlap3\u001b[0m\n\u001b[0m                ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","metadata":{"id":"ioySD7oZUeYT","colab_type":"code","outputId":"2e21cbf8-0d37-4987-e774-50a0107f988e","executionInfo":{"status":"ok","timestamp":1566503448682,"user_tz":-60,"elapsed":588,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["temp = [2,3,4,5]\n","np.mean(temp)"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.5"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"R1OdRz7QaKa1","colab_type":"code","outputId":"4eee7c8a-7ef8-43fa-eba1-7ab094a563c9","executionInfo":{"status":"ok","timestamp":1566385094684,"user_tz":-60,"elapsed":496,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(49, 4, 112, 112)"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"itPglejX07x1","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}