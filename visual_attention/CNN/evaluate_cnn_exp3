{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_cnn_exp3","version":"0.3.2","provenance":[{"file_id":"1lBrBldUbF1aqu7SixE7O4en2TeznW8VE","timestamp":1566514473876},{"file_id":"1goYwIeqqN1mJr07yiom0jxvGh-735U1Y","timestamp":1566424435634},{"file_id":"1wTkqln-Mdo_VsWQeYtrdM2q1NbgXNUB1","timestamp":1566423804256},{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566418130179},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"dm2wSqJvpjGf"},"source":["# TPUs in Colab\n","\n","This notebook provides an introduction to computing on a [TPU](https://cloud.google.com/tpu/) in Colab. In this notebook you will connect to a TPU, run some basic TensorFlow operations on the TPU, and print out the speed of the TPU as measured in teraflops."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_pQCOmISAQBu"},"source":["## Enabling and testing the TPU\n","\n","First, you'll need to enable TPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select TPU from the Hardware Accelerator drop-down\n","\n","Next, we'll check that we can connect to the TPU:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"71iSWtsXe36x","outputId":"b5aafd38-bbdd-469a-b235-90f22c05084e","executionInfo":{"status":"ok","timestamp":1566424461462,"user_tz":-60,"elapsed":2220,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["import os\n","import pprint\n","import tensorflow as tf\n","\n","if 'COLAB_TPU_ADDR' not in os.environ:\n","  print('ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!')\n","else:\n","  tpu_address = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","  print ('TPU address is', tpu_address)\n","\n","  with tf.Session(tpu_address) as session:\n","    devices = session.list_devices()\n","    \n","  print('TPU devices:')\n","  pprint.pprint(devices)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["TPU address is grpc://10.51.73.114:8470\n","TPU devices:\n","[_DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:CPU:0, CPU, -1, 18443194593367577701),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, 9142288199186370820),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:0, TPU, 17179869184, 17241610813667290959),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:1, TPU, 17179869184, 1289560492528546108),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:2, TPU, 17179869184, 16120369426568442820),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:3, TPU, 17179869184, 17053318457678606619),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:4, TPU, 17179869184, 12277426293039606809),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:5, TPU, 17179869184, 13605242261856074580),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:6, TPU, 17179869184, 15223398749580302300),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:7, TPU, 17179869184, 17646194077960320849),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 8589934592, 9785213797139609996)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"a171e1cd-96e2-44e2-ed6b-84656e8358ec","executionInfo":{"status":"ok","timestamp":1566729466480,"user_tz":-60,"elapsed":3197,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    # utility function to normalize a tensor by its L2 norm\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    # img = image.load_img(img_path, target_size=(224, 224))\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        # print(\"K.one_hot\", K.eval(K.one_hot([category_index], nb_classes)))\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    # model = Sequential()\n","    # model.add(input_model)\n","    # nb_classes = 1000\n","    # print(\"category_index\", category_index)\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # if not \"lambda\" in input_model.layers[-1].name:\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # input_model.pop_layer()\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # target_layer = lambda x: target_category_loss(x, category_index, nb_classes)\n","        # target_layer = lambda x: tf.math.multiply(x[0], one_hot)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # print(\"name of the last layer\", input_model.layers[-1].name)\n","    # print(\"input_model.layers[-1].output\", input_model.layers[-1].output)\n","    loss = K.sum(input_model.layers[-1].output)\n","    # print(\"loss\", loss)\n","    # conv_output =  [l for l in model.layers[0].layers if l.name is layer_name][0].output\n","    # print([l.name for l in input_model.layers])\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \"\"\"\n","    dense_output = input_model.layers[-2].output\n","    final_output = input_model.layers[-1].output\n","    fin_out_manual = tf.math.multiply(input_model.layers[-2].output, one_hot)\n","    \"\"\"\n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","    \n","    # print(\"number of all zero map\", count)\n","    # print(\"dense output\", dense_output)\n","    # print(\"final output\", final_output)\n","    # print(\"fin out manual\", fin_out_manual)\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    # print(\"one_hot * dense_output\", one_hot_num * dense_output)\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    # cam = cv2.resize(cam, (224, 224))\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    #Return to BGR [0..255] from the preprocessed image\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        # print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        # (img_num, 112, 112, 32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","        gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                      grad_1, grad_2, grad_3, grad_4,\n","                                                                                                      sparse_1, sparse_2, sparse_3, sparse_4])\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","        gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                              grad_1, grad_2, grad_3, grad_4])\n","    outputs  = gradient_function([image])\n","    # this is slow af\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    # sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        print(\"output shape\", output.shape)\n","        # print(\"cam shape\", cam.shape)\n","        print(\" \")\n","        # (img_num, 112, 112, 32)\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        # self.output_dim = output_dim\n","        self.k = k\n","        # @TODO randome intialize\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        # p, h, w, c = tf.shape(x)\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        # x (p, h, w, c)\n","        print(\"x\", x)\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        print(\"global_average\", global_average)\n","        # x_sort_arg = self.top_k(global_average, k=K.int_shape(global_average)[-1]) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        print(\"x_sort_arg\", x_sort_arg)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        print(\"boosted_x\", boosted_x)\n","        # boosted_x_arg = np.argsort(boosted_x)\n","        # boosted_x_arg = self.top_k(boosted_x, k=K.int_shape(boosted_x)[-1]) # (p, c)\n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        # print(\"boosted_x_arg\", boosted_x_arg)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        print(\"x\", x)\n","        print(\"spx\", spx)\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        print(sparse_mtx)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        self.duty = duty\n","        print(\"duty\", duty)\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        # x_shape = tf.shape(x, out_type=tf.int64)\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS # 2\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        # assert isinstance(input_shape, list)\n","        return input_shape"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"3a3e8b1f-2abe-41b3-a1ae-d297396be079","executionInfo":{"status":"ok","timestamp":1566729486850,"user_tz":-60,"elapsed":3245,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"557a1e72-f4b9-44b3-c7f8-9594a4e15475","executionInfo":{"status":"ok","timestamp":1566483931250,"user_tz":-60,"elapsed":481,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 4/pAEP2FlsxHMIP0_H7Q1xreW48rdKrZpU1vAMW0v2Svz12lmNfX-7dI8"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GmGBUjGvi7Iq","colab_type":"code","colab":{}},"source":["\"\"\"\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/scale.npz\"\n","# np.savez(outfile, x_train, y_train, x_test, y_test, x_test_gt)\n","scaleFile = np.load(outfile)\n","\n","x_train = scaleFile[\"arr_0\"]\n","y_train = scaleFile[\"arr_1\"]\n","x_test = scaleFile[\"arr_2\"]\n","y_test = scaleFile[\"arr_3\"]\n","x_test_gt = scaleFile[\"arr_4\"]\n","\n","\"\"\"\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/scale_test.npz\"\n","scaleFile = np.load(outfile)\n","x_test = scaleFile[\"arr_0\"]\n","y_test = scaleFile[\"arr_1\"]\n","x_test_gt = scaleFile[\"arr_2\"]\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LsXoHy5kwgj5","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"kGU_sSB_pjke","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":286},"outputId":"620472de-7662-4c42-d216-345cb203c88c","executionInfo":{"status":"ok","timestamp":1566729523752,"user_tz":-60,"elapsed":847,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["p = 9\n","plt.imshow(x_test[p].reshape(112, 112), cmap='gray')\n","plt.show()\n","print(np.argmax(y_test[p]))"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["ratio = [0.4, 0.4, 0.6, 0.8]  # exp1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","outputId":"fd1e6504-eea0-4aff-a6d6-d71b658f755b","executionInfo":{"status":"ok","timestamp":1566729529319,"user_tz":-60,"elapsed":1057,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["model_no = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","model_no.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=None, name='conv_1'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=None, name='conv_1'))\n","model_no.add(MaxPooling2D(pool_size=(2, 2)))\n","# model.add(KW(16, 1))\n","model_no.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_2'))\n","model_no.add(MaxPooling2D(pool_size=(2, 2)))\n","# model.add(Dropout(0.2))\n","# model.add(KW(26, 1))\n","model_no.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","model_no.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_4'))\n","# model.add(KW(100, 1))\n","model_no.add(Flatten())\n","model_no.add(Dense(10, name='dense_1'))\n","model_no.add(Activation(\"softmax\", name=\"softmax\"))\n","\n","model_no.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model = model_no\n","# model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/cnn_model.h5\")"],"execution_count":9,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0825 10:38:48.375651 140116884400000 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","W0825 10:38:48.389238 140116884400000 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0825 10:38:48.391476 140116884400000 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","W0825 10:38:48.403815 140116884400000 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","W0825 10:38:48.450985 140116884400000 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","W0825 10:38:48.468783 140116884400000 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"1GhvFEyykaAu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":258},"outputId":"a8b0a7d8-8f05-47a9-cd00-8fd5fc872bac","executionInfo":{"status":"ok","timestamp":1566515450723,"user_tz":-60,"elapsed":87173,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=3, batch_size=32)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["W0822 23:09:23.779587 139881381451648 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","W0822 23:09:23.846554 139881381451648 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:986: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Train on 60000 samples, validate on 10000 samples\n","Epoch 1/3\n","60000/60000 [==============================] - 33s 549us/step - loss: 0.5220 - acc: 0.8283 - val_loss: 0.1999 - val_acc: 0.9395\n","Epoch 2/3\n","60000/60000 [==============================] - 27s 443us/step - loss: 0.1309 - acc: 0.9604 - val_loss: 0.1499 - val_acc: 0.9527\n","Epoch 3/3\n","60000/60000 [==============================] - 27s 443us/step - loss: 0.0697 - acc: 0.9786 - val_loss: 0.1285 - val_acc: 0.9626\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f384f96df28>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"-o75fmsxnUWg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"ea80e365-14ca-46d2-ed43-9cf4378f2722","executionInfo":{"status":"ok","timestamp":1566729536607,"user_tz":-60,"elapsed":1844,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["# model.save_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_scale_CNN.h5\")\n","model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_scale_CNN.h5\")"],"execution_count":10,"outputs":[{"output_type":"stream","text":["W0825 10:38:55.490431 140116884400000 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"f71ddae5-15b7-47fb-ec96-722e4aab2014","executionInfo":{"status":"ok","timestamp":1566729825258,"user_tz":-60,"elapsed":1374,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":387}},"source":["p = 8996\n","x = sorted_x[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  sorted_y[p])\n","print(predicted_class.dtype)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nKu5/ha83nXs6YxsAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 112, 112, 1)\n","[[2.8572725e-03 1.9377851e-05 9.4465521e-04 5.6153999e-06 2.4749134e-02\n","  4.9620643e-03 1.1404228e-03 4.2405419e-04 8.2241354e-04 9.6407497e-01]]\n","predicted_class 9\n","correct_class 0\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yKWEoLZzYAWr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"3e1d14c1-b84f-48e4-d946-a2e9203a7eab","executionInfo":{"status":"ok","timestamp":1566729850375,"user_tz":-60,"elapsed":965,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":[""],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","outputId":"a55986cd-e2d3-4412-932a-9484821db34e","executionInfo":{"status":"ok","timestamp":1566729801895,"user_tz":-60,"elapsed":2338,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=False)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    else:\n","        combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nKu5/ha83nXs6YxsAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["1\n","2\n","3\n","4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nAAAAAACgt/8fXzW+HcZeTz8AAAAASUVORK5CYII=\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["KL divergenvce\n","2.1033336758104997\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"S5bTNMOXkimK","colab_type":"code","outputId":"94022d93-f4a2-4aee-8a7e-ec5d630643ce","executionInfo":{"status":"ok","timestamp":1566414484686,"user_tz":-60,"elapsed":400,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["x_comb_gt /= np.sum(x_comb_gt)\n","print(np.sum(x_comb_gt))\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))\n","print(np.sum(combined))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1.0\n","2.9415657532918003\n","1.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fu1DQa2Q1bSC","colab_type":"text"},"source":["Create dataset"]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"ad68b286-61c3-4cb2-a975-489b0d7e87dd","executionInfo":{"status":"ok","timestamp":1566729815522,"user_tz":-60,"elapsed":2059,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","print(border)\n","\n","numbers = {}\n","for i in range(0, 10):\n","  numbers[i] = sorted_x[border[i]:border[i+1]]"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[0, 980, 2115, 3147, 4157, 5139, 6031, 6989, 8017, 8991, 10000]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Tg4AIiEIBxO8","colab_type":"text"},"source":["overlap 10"]},{"cell_type":"code","metadata":{"id":"rT_xx0PFBvC3","colab_type":"code","outputId":"e63d16c9-a108-400b-9ef7-2641f49f22d2","executionInfo":{"status":"ok","timestamp":1566506125534,"user_tz":-60,"elapsed":28215,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 10)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  noise3_arg = random.sample(range(len(numbers[noises[2]])), 1)\n","  noise4_arg = random.sample(range(len(numbers[noises[3]])), 1)\n","  noise5_arg = random.sample(range(len(numbers[noises[4]])), 1)\n","  noise6_arg = random.sample(range(len(numbers[noises[5]])), 1)\n","  noise7_arg = random.sample(range(len(numbers[noises[6]])), 1)\n","  noise8_arg = random.sample(range(len(numbers[noises[7]])), 1)\n","  noise9_arg = random.sample(range(len(numbers[noises[8]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg] +\\\n","                    numbers[noises[2]][noise3_arg]+numbers[noises[3]][noise4_arg]+numbers[noises[4]][noise5_arg] +\\\n","                    numbers[noises[5]][noise6_arg]+numbers[noises[6]][noise7_arg]+numbers[noises[7]][noise8_arg] +\\\n","                    numbers[noises[8]][noise9_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQUAAAD8CAYAAAB+fLH0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAHxhJREFUeJzt3XeYVdX1//H3EkSxhCKKCCqIBcGK\nJajYv4ogwW5sEaOPRKMGK2JPoom9RiJg5WcBETVgQUEUCRYUxEJTFKOMoIhdrOj+/XHv4sy+zDAz\nt8/weT3PPDP33HvP2Zxh9l1nn73XshACIiJulVI3QETKizoFEYmoUxCRiDoFEYmoUxCRiDoFEYmo\nUxCRSEE6BTM7wMzeNrN3zWxgIY4hIoVh+Z68ZGaNgHeA/YAK4FXg6BDCrLweSEQKonEB9rkz8G4I\nYR6AmY0ADgKq7RTMTNMqRQpvcQhh3ZpeVIjLh7bA/EqPK9LbImbWz8ymmtnUArRBRJb3QW1eVIhI\noVZCCEOBoaBIQaScFCJS+AjYsNLjdultIlIPFKJTeBXYzMw6mFkT4ChgTAGOIyIFkPfLhxDCUjM7\nHXgaaATcFUKYme/jiEhh5P2WZFaN0JiCSDFMCyHsWNOLNKNRRCLqFEQkok5BRCLqFEQkok5BRCLq\nFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQk\nok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkok5BRCLqFEQkUrJS9CIrg6222gqAN998E4B77rkH\ngBNPPLFUTaqRIgURiShSECmA1VdfHYBbbrkFAC/k3LJly5K1qbayjhTMbEMze87MZpnZTDPrn97e\n0szGm9nc9PcW+WuuiBRaLpcPS4FzQgidgW7AaWbWGRgITAghbAZMSD8WWamEEAgh0KpVK1q1arVs\ne7NmzWjWrFkJW1azrDuFEMLCEMJr6Z+/AWYDbYGDgGHplw0DDs61kSJSPHkZUzCz9sD2wBSgdQhh\nYfqpj4HW+TiGSKH4dX7jxo1ZtGhRXva55557AtClS5do+7///e+87L+Qcu4UzGwt4GHgzBDC12a2\n7LkQQjCzUM37+gH9cj2+iORXTp2Cma1KqkO4P4TwSHrzJ2bWJoSw0MzaAFV2vSGEocDQ9H6q7DhE\nCumMM84A4NJLLwVg9uzZ7LHHHnnZ98UXXxw9fu211wAYO3ZsXvZfSLncfTDgTmB2COGGSk+NAfqm\nf+4LjM6+eSJSbLlECrsBfwDeMrPX09suBK4CRprZScAHwJG5NVEkPzp27AjAXnvtBSQRgo8prLHG\nGjkfY+ONNwZgm222ibY/++yzAHz77bc5H6PQsu4UQgiTAavm6X2z3a+IlJZmNEqD16hRIwAOOOAA\nIJll6H755RcAHnvssZyPcdZZZwGw9tprA/Drr78C8OSTT2a972LT2gcRiShSkAbvzDPPBOCaa66J\ntn/33XcAnHzyyQCMGDEi62PstNNOQHJHw3lU8vzzz2e972JTpCAiEUUK0mC1adMGgGOOOSba/uWX\nXwLQo0cPAKZOnZrzsQ455JDo8axZswC4/vrrc953sSlSEJGIIgVpsLp16wbAdtttF20fMmQIkJ8I\nwec2rLPOOtH2//3vfwAsWLAg52MUmyIFEYkoUpAGy1cqrrJK6rNvxowZANx55515O4bPhuzevTsA\nviCwefPmeTtGsalTkAbLLxt8AlHnzp2BpHMYN25cjfuYPn06AF27dgWStGquU6dOAGy66abR85mv\nq090+SAiESuHHk1Lp6UQ/Jbk/fffDySXE9nwy4La/r30798fgFtvvTXrYxbAtBDCjjW9SJGCiEQU\nKUiDt9pqqwGw7bbbArDvvlUv4j355JNp2rRplc998803ACxevBiAHXdMfeD6Qij38ssvA7D//vsD\nsGTJklyanm+KFESk7hQpSEH4p/KkSZOAZCnxoYceCsB//vOf0jQsRxtttBEAL730EgDrr78+kCRP\n2XXXXQGYOXNmCVpXI0UKIlJ3mqcgeeGfoOeccw4A/fqlEnU3adIESEbt/U7AoEGDABgwYEBR25kr\nXxr9m9/8Jtp+2WWXAWUbIdSJIgURiShSkDrxa+i9994bgMMOOwyA3XffHWBZibTq7ut74VWPKJYu\nXcoll1wCJGnRypHfTTjwwAOBZCHUxIkTgSQxa0OgSEFEIooUpE4eeughIBllr8ncuXMBeOqpp4Ak\nsUmHDh0AGDhwIG+99RYAw4cPz2tb88nnOmyxxRbR9meeeQaAN998s+htKhRFCiISUaQgdeLJQzxS\n8Jl+Hgn4TL/TTz8dgAkTJgDw888/R/t54oknAOjZs+dyCUrKkbf/k08+AaB161Td5Ndff73a99RX\n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\nICIRdQoiEvn/2hXM1FKk2uIAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1mJsZRn9RsLF","colab_type":"text"},"source":["overlap 5"]},{"cell_type":"code","metadata":{"id":"Kf1gH6QyRuiq","colab_type":"code","outputId":"b1dcead1-d680-4794-f3e0-69df50392f99","executionInfo":{"status":"ok","timestamp":1566502653498,"user_tz":-60,"elapsed":26069,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 5)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  noise3_arg = random.sample(range(len(numbers[noises[2]])), 1)\n","  noise4_arg = random.sample(range(len(numbers[noises[3]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg] +\\\n","                    numbers[noises[2]][noise3_arg]+numbers[noises[3]][noise4_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n7yl8SuCPAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cvVT0WqAB7E9","colab_type":"text"},"source":["overlap 4"]},{"cell_type":"code","metadata":{"id":"tZwkKDUIB5qF","colab_type":"code","outputId":"1f647f78-04c3-4178-8b35-e415ce33c08c","executionInfo":{"status":"ok","timestamp":1566489264696,"user_tz":-60,"elapsed":26874,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 4@)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  noise3_arg = random.sample(range(len(numbers[noises[2]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg] +\\\n","                    numbers[noises[2]][noise3_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nEJHA/wM+wP4xZdl7nQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CefVVAqR3CN5","colab_type":"text"},"source":["overlap3"]},{"cell_type":"code","metadata":{"id":"DTqNPM8h3A_Y","colab_type":"code","outputId":"00eaffe2-2e0c-4dd3-841b-a97587c6c11c","executionInfo":{"status":"ok","timestamp":1566503136982,"user_tz":-60,"elapsed":25904,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nqUPYQYQAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yJR20Be95ik2","colab_type":"text"},"source":["overlap3"]},{"cell_type":"code","metadata":{"id":"sJ-hM6LA2G_U","colab_type":"code","outputId":"e655d27b-4ad4-4c53-be9e-4a86cb9f82b0","executionInfo":{"status":"error","timestamp":1566515701429,"user_tz":-60,"elapsed":8598,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":375}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":13,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-61a2da8cf793>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mcomb_y\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0mx_gt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumbers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtar\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtar_arg\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m   \u001b[0mx_gt\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgaussian_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_gt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'reflect'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtruncate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m   \u001b[0mx_gt\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_gt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m   \u001b[0mgt_x\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_gt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/ndimage/filters.py\u001b[0m in \u001b[0;36mgaussian_filter\u001b[0;34m(input, sigma, order, output, mode, cval, truncate)\u001b[0m\n\u001b[1;32m    297\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             gaussian_filter1d(input, sigma, axis, order, output,\n\u001b[0;32m--> 299\u001b[0;31m                               mode, cval, truncate)\n\u001b[0m\u001b[1;32m    300\u001b[0m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    301\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/ndimage/filters.py\u001b[0m in \u001b[0;36mgaussian_filter1d\u001b[0;34m(input, sigma, axis, order, output, mode, cval, truncate)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;31m# Since we are calling correlate, not convolve, revert the kernel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0mweights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_gaussian_kernel1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msigma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mcorrelate1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/scipy/ndimage/filters.py\u001b[0m in \u001b[0;36mcorrelate1d\u001b[0;34m(input, weights, axis, output, mode, cval, origin)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0mmode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_ni_support\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extend_mode_to_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m     _nd_image.correlate1d(input, weights, axis, output, mode, cval,\n\u001b[0;32m---> 95\u001b[0;31m                           origin)\n\u001b[0m\u001b[1;32m     96\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"QNEHx6-3S2dM","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"rOWcexhmR46u","colab_type":"code","outputId":"8003b554-e212-4b99-8159-551b91aff9b8","executionInfo":{"status":"ok","timestamp":1566506185261,"user_tz":-60,"elapsed":35251,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["\"\"\"\n","sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap10.npz\"\n","np.savez(outfile, sorted_x, sorted_y, gt_x)\n","\n","\"\"\"\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap5.npz\"\n","testfile = np.load(outfile)\n","sorted_x = testfile[\"arr_0\"]\n","print(comb_x.shape)\n","sorted_y = testfile[\"arr_1\"]\n","print(comb_y.shape)\n","gt_x = testfile[\"arr_2\"]\n","print(gt_x.shape)\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\noutfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap5.npz\"\\ntestfile = np.load(outfile)\\nsorted_x = testfile[\"arr_0\"]\\nprint(comb_x.shape)\\nsorted_y = testfile[\"arr_1\"]\\nprint(comb_y.shape)\\ngt_x = testfile[\"arr_2\"]\\nprint(gt_x.shape)\\n'"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"MPHy5BoFt_xZ","colab_type":"code","outputId":"be2ad670-1c40-4399-ed87-c23450275ffb","executionInfo":{"status":"ok","timestamp":1566518405984,"user_tz":-60,"elapsed":494,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["np.where(sorted_y == 0)\n","plt.imshow(sorted_x[2], cmap='gray')\n","plt.show()"],"execution_count":32,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQUAAAD8CAYAAAB+fLH0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADG9JREFUeJzt3V/s3XV9x/Hna/1ZHZhJy5amtmzU\n2GiIiYM0CwYvDGqGzggXxmBMbBaS3riJfxKF7WqXJEbExJA1gLLFoK6S0XChwcqy3azjVzFQWrBV\nhrQpFCLi4pUN712cb+fvja2/ev6zPB/Jye98v+f7PeeTT/k98/1+z+F3UlVI0ll/sOgBSFouRkFS\nYxQkNUZBUmMUJDVGQVJjFCQ1M4lCkuuSPJXkeJJbZvEakmYj0/7wUpINwI+B9wMngEeAj1XVkam+\nkKSZWJnBc/4FcLyqfgqQ5JvA9cB5o5DEj1VKs/diVf3JehvN4vRhG/DsmuUTw7omyZ4kq0lWZzAG\nSb/tmQvZaBZHChekqvYCe8EjBWmZzOJI4SRw2Zrl7cM6Sa8Bs4jCI8DOJDuSbARuBPbP4HUkzcDU\nTx+q6kySvwG+B2wA7qmqJ6b9OpJmY+pvSY41CK8pSPNwqKp2rbeRn2iU1BgFSY1RkNQYBUmNUZDU\nGAVJjVGQ1BgFSY1RkNQYBUmNUZDUGAVJjVGQ1BgFSY1RkNQYBUmNUZDUGAVJjVGQ1BgFSY1RkNQY\nBUmNUZDUGAVJjVGQ1BgFSY1RkNQYBUmNUZDUjB2FJJcleTjJkSRPJLl5WL85yUNJjg0/N01vuJJm\nbZIjhTPA56rqCuBq4JNJrgBuAQ5U1U7gwLAs6TVi7ChU1amq+uFw/3+Ao8A24Hrg3mGze4EbJh2k\npPmZyjWFJJcDVwIHgS1VdWp46DlgyzReQ9J8rEz6BEneCHwH+HRV/TLJ/z1WVZWkzrPfHmDPpK8v\nabomOlJI8jpGQfhGVd0/rH4+ydbh8a3A6XPtW1V7q2pXVe2aZAySpmuSdx8C3A0craovrXloP7B7\nuL8beGD84Umat1Sd8+h+/R2TdwP/ATwOvDKs/jtG1xW+Dfwp8Azw0ar6+TrPNd4gJP0+Dl3IkfnY\nUZgmoyDNxQVFwU80SmqMgqTGKEhqjIKkxihIaoyCpMYoSGqMgqTGKEhqjIKkxihIaoyCpMYoSGqM\ngqTGKEhqjIKkxihIaoyCpMYoSGqMgqTGKEhqjIKkxihIaoyCpMYoSGqMgqTGKEhqjIKkxihIaoyC\npGbiKCTZkOTRJA8OyzuSHExyPMm3kmycfJiS5mUaRwo3A0fXLN8G3F5VbwVeAm6awmtImpOJopBk\nO/BXwF3DcoBrgX3DJvcCN0zyGpLma9IjhS8DnwdeGZYvBX5RVWeG5RPAtglfQ9IcjR2FJB8CTlfV\noTH335NkNcnquGOQNH0rE+x7DfDhJB8E3gD8EXAHcEmSleFoYTtw8lw7V9VeYC9AkppgHJKmaOwj\nhaq6taq2V9XlwI3AD6rq48DDwEeGzXYDD0w8SklzM4vPKXwB+GyS44yuMdw9g9eQNCOpWvyRu6cP\n0lwcqqpd623kJxolNUZBUmMUJDVGQVJjFCQ1RkFSYxQkNUZBUmMUJDVGQVJjFCQ1RkFSYxQkNUZB\nUmMUJDVGQVJjFCQ1RkFSYxQkNUZBUmMUJDVGQVJjFCQ1RkFSYxQkNUZBUmMUJDVGQVJjFCQ1RkFS\nM1EUklySZF+SJ5McTfKuJJuTPJTk2PBz07QGK2n2Jj1SuAP4blW9HXgncBS4BThQVTuBA8OypNeI\nVNV4OyZvAn4EvKXWPEmSp4D3VNWpJFuBf6uqt63zXOMNQtLv41BV7Vpvo0mOFHYALwBfS/JokruS\nXAxsqapTwzbPAVsmeA1JczZJFFaAq4A7q+pK4Fe86lRhOII451FAkj1JVpOsTjAGSVM2SRROACeq\n6uCwvI9RJJ4fThsYfp4+185Vtbeqdl3I4Yyk+Rk7ClX1HPBskrPXC94LHAH2A7uHdbuBByYaoaS5\nWplw/78FvpFkI/BT4K8ZhebbSW4CngE+OuFrSJqjsd99mOogfPdBmoeZv/sg6f8hoyCpMQqSGqMg\nqTEKkhqjIKkxCpIaoyCpMQqSGqMgqTEKkhqjIKkxCpIaoyCpMQqSGqMgqTEKkhqjIKkxCpIaoyCp\nMQqSGqMgqTEKkhqjIKkxCpIaoyCpMQqSGqMgqTEKkhqjIKmZKApJPpPkiSSHk9yX5A1JdiQ5mOR4\nkm8l2TitwUqavbGjkGQb8ClgV1W9A9gA3AjcBtxeVW8FXgJumsZAJc3HpKcPK8AfJlkBLgJOAdcC\n+4bH7wVumPA1JM3R2FGoqpPAF4GfMYrBy8Ah4BdVdWbY7ASwbdJBSpqfSU4fNgHXAzuANwMXA9f9\nHvvvSbKaZHXcMUiavpUJ9n0f8HRVvQCQ5H7gGuCSJCvD0cJ24OS5dq6qvcDeYd+aYBySpmiSawo/\nA65OclGSAO8FjgAPAx8ZttkNPDDZECXN0yTXFA4yuqD4Q+Dx4bn2Al8APpvkOHApcPcUxilpTlK1\n+CN3Tx+kuThUVbvW28hPNEpqjIKkxihIaoyCpMYoSGqMgqTGKEhqjIKkxihIaoyCpMYoSGqMgqTG\nKEhqjIKkxihIaoyCpMYoSGqMgqTGKEhqjIKkxihIaoyCpMYoSGqMgqTGKEhqjIKkxihIaoyCpMYo\nSGqMgqRm3SgkuSfJ6SSH16zbnOShJMeGn5uG9UnylSTHkzyW5KpZDl7S9F3IkcLXgetete4W4EBV\n7QQODMsAHwB2Drc9wJ3TGaakeVk3ClX178DPX7X6euDe4f69wA1r1v9TjfwncEmSrdMarKTZG/ea\nwpaqOjXcfw7YMtzfBjy7ZrsTw7rfkmRPktUkq2OOQdIMrEz6BFVVSWqM/fYCewHG2V/SbIx7pPD8\n2dOC4efpYf1J4LI1220f1kl6jRg3CvuB3cP93cADa9Z/YngX4mrg5TWnGZJeC6rqd96A+4BTwK8Z\nXSO4CbiU0bsOx4DvA5uHbQN8FfgJ8Diwa73nH/Yrb968zfy2eiG/jxl+KRfKawrSXByqql3rbeQn\nGiU1RkFSYxQkNUZBUmMUJDVGQVJjFCQ1RkFSYxQkNUZBUmMUJDVGQVJjFCQ1RkFSYxQkNUZBUmMU\nJDUT/zXnKXkR+NXwcxn9MY5tHMs6tmUdF8x2bH92IRstxZ9jA0iyeiF/KmoRHNt4lnVsyzouWI6x\nefogqTEKkpplisLeRQ/gd3Bs41nWsS3ruGAJxrY01xQkLYdlOlKQtASWIgpJrkvyVJLjSW5Z4Dgu\nS/JwkiNJnkhy87B+c5KHkhwbfm5a4Bg3JHk0yYPD8o4kB4e5+1aSjQsa1yVJ9iV5MsnRJO9alnlL\n8pnh3/NwkvuSvGFR85bkniSnkxxes+6c8zR8/eJXhjE+luSqeYxx4VFIsoHRV819ALgC+FiSKxY0\nnDPA56rqCuBq4JPDWG4BDlTVTkZfl7ewcAE3A0fXLN8G3F5VbwVeYvS1fotwB/Ddqno78E5GY1z4\nvCXZBnyK0VcYvgPYANzI4ubt68B1r1p3vnn6ALBzuO0B7pzLCC/ku+VmeQPeBXxvzfKtwK2LHtcw\nlgeA9wNPAVuHdVuBpxY0nu3DfzTXAg8y+u7OF4GVc83lHMf1JuBphmtUa9YvfN6AbcCzwGZGH9Z7\nEPjLRc4bcDlweL15Av4R+Ni5tpvlbeFHCvzmH+2sE8O6hUpyOXAlcBDYUr/59uzngC0LGtaXgc8D\nrwzLlwK/qKozw/Ki5m4H8ALwteHU5q4kF7ME81ZVJ4EvAj9j9EXJLwOHWI55O+t887SQ341liMLS\nSfJG4DvAp6vql2sfq1Gy5/6WTZIPAaer6tC8X/sCrABXAXdW1ZWMPrLeThUWOG+bgOsZhevNwMX8\n9uH70ljUPK21DFE4CVy2Znn7sG4hkryOURC+UVX3D6ufT7J1eHwrcHoBQ7sG+HCS/wa+yegU4g7g\nkiRn/x+WRc3dCeBEVR0clvcxisQyzNv7gKer6oWq+jVwP6O5XIZ5O+t887SQ341liMIjwM7havBG\nRheB9i9iIEkC3A0craovrXloP7B7uL+b0bWGuaqqW6tqe1VdzmiOflBVHwceBj6y4LE9Bzyb5G3D\nqvcCR1iCeWN02nB1kouGf9+zY1v4vK1xvnnaD3xieBfiauDlNacZszPvCz/nufDyQeDHwE+Av1/g\nON7N6NDtMeBHw+2DjM7dDwDHgO8Dmxc8X+8BHhzuvwX4L+A48C/A6xc0pj8HVoe5+1dg07LMG/AP\nwJPAYeCfgdcvat6A+xhd2/g1oyOsm843T4wuJH91+L14nNE7KDMfo59olNQsw+mDpCViFCQ1RkFS\nYxQkNUZBUmMUJDVGQVJjFCQ1/wvSsDj4sYYXcgAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ZgyY43g3RzFT","colab_type":"code","outputId":"2ee2cfe0-41b3-4257-8e7c-c1f67695afb0","executionInfo":{"status":"ok","timestamp":1566518372001,"user_tz":-60,"elapsed":1539,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 7080, 7395, 7746, 8047, 8368, 8693, 9007, 9317, 9672, 10000]"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"nUCnPEku_Rlw","colab_type":"code","outputId":"5ac40fed-792b-45c9-abc1-907c0a4be97f","executionInfo":{"status":"ok","timestamp":1566516262715,"user_tz":-60,"elapsed":1285,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 7080, 7395, 7746, 8047, 8368, 8693, 9007, 9317, 9672, 10000]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"9TQ3yLlTuekM","colab_type":"text"},"source":["Evaluate!"]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"5a95ca76-1c72-4db7-b689-5a7353219a08","executionInfo":{"status":"ok","timestamp":1566520665940,"user_tz":-60,"elapsed":96708,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["kl = np.zeros(10000)\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    preprocessed_input = sorted_x[border[i]:border[i+1]]\n","    print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=False)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()\n"],"execution_count":11,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["(980, 112, 112, 1)\n","y 0\n","weights shape (980, 32)\n","output shape (980, 112, 112, 32)\n"," \n","weights shape (980, 32)\n","output shape (980, 56, 56, 32)\n"," \n","weights shape (980, 64)\n","output shape (980, 26, 26, 64)\n"," \n","weights shape (980, 64)\n","output shape (980, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|â–ˆ         | 1/10 [00:17<02:37, 17.45s/it]"],"name":"stderr"},{"output_type":"stream","text":["(1135, 112, 112, 1)\n","y 1\n","weights shape (1135, 32)\n","output shape (1135, 112, 112, 32)\n"," \n","weights shape (1135, 32)\n","output shape (1135, 56, 56, 32)\n"," \n","weights shape (1135, 64)\n","output shape (1135, 26, 26, 64)\n"," \n","weights shape (1135, 64)\n","output shape (1135, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|â–ˆâ–ˆ        | 2/10 [00:27<02:02, 15.36s/it]"],"name":"stderr"},{"output_type":"stream","text":["(1032, 112, 112, 1)\n","y 2\n","weights shape (1032, 32)\n","output shape (1032, 112, 112, 32)\n"," \n","weights shape (1032, 32)\n","output shape (1032, 56, 56, 32)\n"," \n","weights shape (1032, 64)\n","output shape (1032, 26, 26, 64)\n"," \n","weights shape (1032, 64)\n","output shape (1032, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|â–ˆâ–ˆâ–ˆ       | 3/10 [00:35<01:31, 13.09s/it]"],"name":"stderr"},{"output_type":"stream","text":["(1010, 112, 112, 1)\n","y 3\n","weights shape (1010, 32)\n","output shape (1010, 112, 112, 32)\n"," \n","weights shape (1010, 32)\n","output shape (1010, 56, 56, 32)\n"," \n","weights shape (1010, 64)\n","output shape (1010, 26, 26, 64)\n"," \n","weights shape (1010, 64)\n","output shape (1010, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|â–ˆâ–ˆâ–ˆâ–ˆ      | 4/10 [00:43<01:09, 11.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["(982, 112, 112, 1)\n","y 4\n","weights shape (982, 32)\n","output shape (982, 112, 112, 32)\n"," \n","weights shape (982, 32)\n","output shape (982, 56, 56, 32)\n"," \n","weights shape (982, 64)\n","output shape (982, 26, 26, 64)\n"," \n","weights shape (982, 64)\n","output shape (982, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 5/10 [00:51<00:52, 10.43s/it]"],"name":"stderr"},{"output_type":"stream","text":["(892, 112, 112, 1)\n","y 5\n","weights shape (892, 32)\n","output shape (892, 112, 112, 32)\n"," \n","weights shape (892, 32)\n","output shape (892, 56, 56, 32)\n"," \n","weights shape (892, 64)\n","output shape (892, 26, 26, 64)\n"," \n","weights shape (892, 64)\n","output shape (892, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    | 6/10 [00:58<00:37,  9.46s/it]"],"name":"stderr"},{"output_type":"stream","text":["(958, 112, 112, 1)\n","y 6\n","weights shape (958, 32)\n","output shape (958, 112, 112, 32)\n"," \n","weights shape (958, 32)\n","output shape (958, 56, 56, 32)\n"," \n","weights shape (958, 64)\n","output shape (958, 26, 26, 64)\n"," \n","weights shape (958, 64)\n","output shape (958, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   | 7/10 [01:07<00:28,  9.40s/it]"],"name":"stderr"},{"output_type":"stream","text":["(1028, 112, 112, 1)\n","y 7\n","weights shape (1028, 32)\n","output shape (1028, 112, 112, 32)\n"," \n","weights shape (1028, 32)\n","output shape (1028, 56, 56, 32)\n"," \n","weights shape (1028, 64)\n","output shape (1028, 26, 26, 64)\n"," \n","weights shape (1028, 64)\n","output shape (1028, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  | 8/10 [01:17<00:19,  9.53s/it]"],"name":"stderr"},{"output_type":"stream","text":["(974, 112, 112, 1)\n","y 8\n","weights shape (974, 32)\n","output shape (974, 112, 112, 32)\n"," \n","weights shape (974, 32)\n","output shape (974, 56, 56, 32)\n"," \n","weights shape (974, 64)\n","output shape (974, 26, 26, 64)\n"," \n","weights shape (974, 64)\n","output shape (974, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 90%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 9/10 [01:25<00:09,  9.11s/it]"],"name":"stderr"},{"output_type":"stream","text":["(1009, 112, 112, 1)\n","y 9\n","weights shape (1009, 32)\n","output shape (1009, 112, 112, 32)\n"," \n","weights shape (1009, 32)\n","output shape (1009, 56, 56, 32)\n"," \n","weights shape (1009, 64)\n","output shape (1009, 26, 26, 64)\n"," \n","weights shape (1009, 64)\n","output shape (1009, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [01:36<00:00,  9.49s/it]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"s9GIEBFq9a1Z","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"7b1affa9-076b-418e-f85b-e6f09f275442","executionInfo":{"status":"ok","timestamp":1566519511495,"user_tz":-60,"elapsed":1277,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":791}},"source":["plt.imshow(sorted_x[border[9]].reshape(112, 112), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[0][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[0][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[0][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[0][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[0], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n/h/YvvwnqynIFAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sEfuI3GpeRg5","colab_type":"code","outputId":"94de0e2b-7cbd-46c1-c16c-790ae9c7410a","executionInfo":{"status":"ok","timestamp":1566520732564,"user_tz":-60,"elapsed":5991,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = np.expand_dims(x_comb_gt, axis=-1)\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nghCi4v8D34uS61wL4gYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"18c47a0b-01ba-41aa-b59f-2da382c1871c","executionInfo":{"status":"ok","timestamp":1566520754489,"user_tz":-60,"elapsed":4959,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["kls = np.zeros((10000))\n","temp = []\n","for i in range(0, 10):\n","  gts = sorted_x_gt[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    kls[border[i]+j] = kl\n","    temp.append(kl)\n","  print(i, \"mean kl\", np.mean(temp))\n","print(kls.mean())"],"execution_count":14,"outputs":[{"output_type":"stream","text":["0 mean kl 2.292927104780866\n","1 mean kl 2.310886684886619\n","2 mean kl 2.177596707813752\n","3 mean kl 2.0529821118823293\n","4 mean kl 2.005572672820099\n","5 mean kl 1.977049552384364\n","6 mean kl 2.0072547771209766\n","7 mean kl 2.000040717027002\n","8 mean kl 1.9976264518240217\n","9 mean kl 2.0263726185305466\n","2.0081352649637716\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"U2WIqKow6hZQ","colab_type":"text"},"source":["0 mean kl 2.292927104780866\n","1 mean kl 2.310886684886619\n","2 mean kl 2.177596707813752\n","3 mean kl 2.0529821118823293\n","4 mean kl 2.005572672820099\n","5 mean kl 1.977049552384364\n","6 mean kl 2.0072547771209766\n","7 mean kl 2.000040717027002\n","8 mean kl 1.9976264518240217\n","9 mean kl 2.0263726185305466\n","2.0081352649637716"]},{"cell_type":"markdown","metadata":{"id":"ZbaF4fDG6iDW","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"j2GqbpGk6iKD","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"ookWUk3PRoKF","colab_type":"code","outputId":"64d1e68f-6fd7-4292-9dc9-7125679ac710","executionInfo":{"status":"ok","timestamp":1566427326612,"user_tz":-60,"elapsed":454,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["kl divergence overlap3\n","0 mean kl 3.0378353348747353\n","1 mean kl 3.038974855874704\n","2 mean kl 3.0390930306960016\n","3 mean kl 3.0435816291343443\n","4 mean kl 3.043890705257461\n","5 mean kl 3.0453530056399254\n","6 mean kl 3.0456591014249432\n","7 mean kl 3.0452695154305007\n","8 mean kl 3.0456518523427563\n","9 mean kl 3.0454341108570557\n","3.023506985258885\n","\n","kl divergence overlap4\n","0 mean kl 3.0321734929197124\n","1 mean kl 3.035347910361329\n","2 mean kl 3.036184004918074\n","3 mean kl 3.04338054129518\n","4 mean kl 3.0427828448055725\n","5 mean kl 3.043959458569267\n","6 mean kl 3.045032368549812\n","7 mean kl 3.044579607277202\n","8 mean kl 3.04431400546849\n","9 mean kl 3.0444338200051204\n","3.025253886939088\n","\n","kl divergence overlap5\n","0 mean kl 3.044482590759768\n","1 mean kl 3.0428625607818987\n","2 mean kl 3.043030214434262\n","3 mean kl 3.045128350183585\n","4 mean kl 3.0454188430322184\n","5 mean kl 3.0445008145794756\n","6 mean kl 3.046633161593329\n","7 mean kl 3.045641745909299\n","8 mean kl 3.0449735902748536\n","9 mean kl 3.044998293697173\n","3.020942807176965\n","\n","overlap 10\n","0 mean kl 3.0511244089631426\n","1 mean kl 3.056755069618845\n","2 mean kl 3.048933103714388\n","3 mean kl 3.050766460466014\n","4 mean kl 3.047881624062294\n","5 mean kl 3.0503084390402995\n","6 mean kl 3.05045498730665\n","7 mean kl 3.0491851031415154\n","8 mean kl 3.048417534494232\n","9 mean kl 3.047711710231922\n","3.0102248561960696"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["991"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"ioySD7oZUeYT","colab_type":"code","outputId":"2e21cbf8-0d37-4987-e774-50a0107f988e","executionInfo":{"status":"ok","timestamp":1566503448682,"user_tz":-60,"elapsed":588,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["temp = [2,3,4,5]\n","np.mean(temp)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.5"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"R1OdRz7QaKa1","colab_type":"code","outputId":"4eee7c8a-7ef8-43fa-eba1-7ab094a563c9","executionInfo":{"status":"ok","timestamp":1566385094684,"user_tz":-60,"elapsed":496,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(49, 4, 112, 112)"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"itPglejX07x1","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}