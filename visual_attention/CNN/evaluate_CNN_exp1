{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_CNN_exp1","version":"0.3.2","provenance":[{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566415096297},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"dm2wSqJvpjGf"},"source":["# TPUs in Colab\n","\n","This notebook provides an introduction to computing on a [TPU](https://cloud.google.com/tpu/) in Colab. In this notebook you will connect to a TPU, run some basic TensorFlow operations on the TPU, and print out the speed of the TPU as measured in teraflops."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_pQCOmISAQBu"},"source":["## Enabling and testing the TPU\n","\n","First, you'll need to enable TPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select TPU from the Hardware Accelerator drop-down\n","\n","Next, we'll check that we can connect to the TPU:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"71iSWtsXe36x","outputId":"a58a0e5d-e40e-42b4-f773-2c55561ce150","executionInfo":{"status":"ok","timestamp":1566416416244,"user_tz":-60,"elapsed":2441,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":238}},"source":["import os\n","import pprint\n","import tensorflow as tf\n","\n","if 'COLAB_TPU_ADDR' not in os.environ:\n","  print('ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!')\n","else:\n","  tpu_address = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","  print ('TPU address is', tpu_address)\n","\n","  with tf.Session(tpu_address) as session:\n","    devices = session.list_devices()\n","    \n","  print('TPU devices:')\n","  pprint.pprint(devices)\n","  TPU_ADDRESS = \"grpc://10.3.194.2:8470\""],"execution_count":1,"outputs":[{"output_type":"stream","text":["TPU address is grpc://10.3.194.2:8470\n","TPU devices:\n","[_DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:CPU:0, CPU, -1, 4572059448855021),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, 15333266673255782822),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:0, TPU, 17179869184, 14515978942392360809),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:1, TPU, 17179869184, 16396388540581366220),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:2, TPU, 17179869184, 14275561251636579121),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:3, TPU, 17179869184, 9987467398435441381),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:4, TPU, 17179869184, 535699506511818045),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:5, TPU, 17179869184, 15305353818480653622),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:6, TPU, 17179869184, 7929234575852387920),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:7, TPU, 17179869184, 8946963927064628952),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 8589934592, 1436156604203029593)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"f7e3a0ce-5f2d-4c4e-fc7c-3a8699836903","executionInfo":{"status":"ok","timestamp":1566728833389,"user_tz":-60,"elapsed":2700,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    # utility function to normalize a tensor by its L2 norm\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    # img = image.load_img(img_path, target_size=(224, 224))\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        # print(\"K.one_hot\", K.eval(K.one_hot([category_index], nb_classes)))\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    # model = Sequential()\n","    # model.add(input_model)\n","    # nb_classes = 1000\n","    # print(\"category_index\", category_index)\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # if not \"lambda\" in input_model.layers[-1].name:\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # input_model.pop_layer()\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # target_layer = lambda x: target_category_loss(x, category_index, nb_classes)\n","        # target_layer = lambda x: tf.math.multiply(x[0], one_hot)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # print(\"name of the last layer\", input_model.layers[-1].name)\n","    # print(\"input_model.layers[-1].output\", input_model.layers[-1].output)\n","    loss = K.sum(input_model.layers[-1].output)\n","    # print(\"loss\", loss)\n","    # conv_output =  [l for l in model.layers[0].layers if l.name is layer_name][0].output\n","    # print([l.name for l in input_model.layers])\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \"\"\"\n","    dense_output = input_model.layers[-2].output\n","    final_output = input_model.layers[-1].output\n","    fin_out_manual = tf.math.multiply(input_model.layers[-2].output, one_hot)\n","    \"\"\"\n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","    \n","    # print(\"number of all zero map\", count)\n","    # print(\"dense output\", dense_output)\n","    # print(\"final output\", final_output)\n","    # print(\"fin out manual\", fin_out_manual)\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    # print(\"one_hot * dense_output\", one_hot_num * dense_output)\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    # cam = cv2.resize(cam, (224, 224))\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    #Return to BGR [0..255] from the preprocessed image\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        # print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        # (img_num, 112, 112, 32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","        gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                      grad_1, grad_2, grad_3, grad_4,\n","                                                                                                      sparse_1, sparse_2, sparse_3, sparse_4])\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","        gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                              grad_1, grad_2, grad_3, grad_4])\n","    outputs  = gradient_function([image])\n","    # this is slow af\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    # sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        print(\"output shape\", output.shape)\n","        # print(\"cam shape\", cam.shape)\n","        print(\" \")\n","        # (img_num, 112, 112, 32)\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        # self.output_dim = output_dim\n","        self.k = k\n","        # @TODO randome intialize\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        # p, h, w, c = tf.shape(x)\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        # x (p, h, w, c)\n","        print(\"x\", x)\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        print(\"global_average\", global_average)\n","        # x_sort_arg = self.top_k(global_average, k=K.int_shape(global_average)[-1]) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        print(\"x_sort_arg\", x_sort_arg)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        print(\"boosted_x\", boosted_x)\n","        # boosted_x_arg = np.argsort(boosted_x)\n","        # boosted_x_arg = self.top_k(boosted_x, k=K.int_shape(boosted_x)[-1]) # (p, c)\n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        # print(\"boosted_x_arg\", boosted_x_arg)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        print(\"x\", x)\n","        print(\"spx\", spx)\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        print(sparse_mtx)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        self.duty = duty\n","        print(\"duty\", duty)\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        # x_shape = tf.shape(x, out_type=tf.int64)\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS # 2\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        # assert isinstance(input_shape, list)\n","        return input_shape\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mvftdHIcn7R8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":351},"outputId":"888f6c88-72fa-46eb-c53c-f4ea8d9955ee","executionInfo":{"status":"error","timestamp":1566728849435,"user_tz":-60,"elapsed":5548,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["trainfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/train_dataset.npz\")\n","\n","x_train = trainfile[\"arr_0\"]\n","print(x_train.shape)\n","y_train = trainfile[\"arr_1\"]\n","print(y_train.shape)\n"],"execution_count":5,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-e12c46e35e7d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrainfile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/drive/Shared drives/UniLeeds/marc_pj/train_dataset.npz\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mx_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrainfile\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"arr_0\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrainfile\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"arr_1\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    420\u001b[0m         \u001b[0mown_fid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    421\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 422\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos_fspath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    423\u001b[0m         \u001b[0mown_fid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    424\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/Shared drives/UniLeeds/marc_pj/train_dataset.npz'"]}]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"5900bc97-2d5a-4e95-f7ab-1fd4586ea326","executionInfo":{"status":"ok","timestamp":1566728903918,"user_tz":-60,"elapsed":9002,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"0d42ef4d-5406-4a26-dd30-c3aa554eb94e","executionInfo":{"status":"ok","timestamp":1566728891978,"user_tz":-60,"elapsed":25741,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 4/pAEP2FlsxHMIP0_H7Q1xreW48rdKrZpU1vAMW0v2Svz12lmNfX-7dI8"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dOZsnf2DulNZ","colab_type":"code","colab":{}},"source":["model_no = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","model_no.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=None, name='conv_1'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=None, name='conv_1'))\n","model_no.add(MaxPooling2D(pool_size=(2, 2)))\n","# model.add(KW(16, 1))\n","model_no.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_2'))\n","model_no.add(MaxPooling2D(pool_size=(2, 2)))\n","# model.add(Dropout(0.2))\n","# model.add(KW(26, 1))\n","model_no.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","model_no.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_4'))\n","# model.add(KW(100, 1))\n","model_no.add(Flatten())\n","model_no.add(Dense(10, name='dense_1'))\n","model_no.add(Activation(\"softmax\", name=\"softmax\"))\n","\n","model_no.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","# model_no.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=3, batch_size=32)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"I2ONnE83umE-","colab_type":"code","colab":{}},"source":["model = model_no\n","# model.save_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/cnn_model.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMkaGTZJU_6u","colab_type":"code","colab":{}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/cnn_model.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","outputId":"9b60bba1-fafc-47a4-8039-2432d5020617","executionInfo":{"status":"ok","timestamp":1566728988522,"user_tz":-60,"elapsed":2105,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","preprocessed_x_t.shape\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 980, 2115, 3147, 4157, 5139, 6031, 6989, 8017, 8991, 10000]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"bca8c6dc-4e61-45a6-c631-9fa3b053057f","executionInfo":{"status":"ok","timestamp":1566728988836,"user_tz":-60,"elapsed":512,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":387}},"source":["p = 8991\n","x = sorted_x[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  sorted_y[p])\n","print(predicted_class.dtype)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n8s4OpJxqfKYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 112, 112, 1)\n","[[4.3870237e-12 5.3980744e-09 7.3366530e-10 1.3124130e-05 2.2014414e-04\n","  4.7286237e-09 3.4700838e-12 2.6757512e-04 2.6006950e-07 9.9949884e-01]]\n","predicted_class 9\n","correct_class 9\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","outputId":"6c18861f-bdf8-4ff7-c727-e0e8f6276518","executionInfo":{"status":"ok","timestamp":1566728993873,"user_tz":-60,"elapsed":2200,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=False)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    else:\n","        combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":22,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQEAAAD7CAYAAABqkiE2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAABlhJREFUeJzt3c2rzP0fx/HXSCkikSxOsaSI3JSN\nsmAhZaPoLNnYsFFuyj/A0ooUCys2ssVGSUhKYWFJkoUoKzelcy2upum4hs7vus51HX6vx2M3XzNz\nPgs95z3fuxlMTU0F6DVvrhcAzC0RgHIiAOVEAMqJAJQTASgnAlBOBKDc/LleQJIMBgNnLMG/bGpq\najBuu0kAyokAlBMBKCcCUE4EoJwIQDkRgHIiAOVEAMqJAJQTASgnAlBOBKCcCEA5EYByIgDlRADK\niQCUEwEoJwJQTgSgnAhAORGAciIA5UQAyokAlBMBKCcCUE4EoJwIQDkRgHIiAOVEAMqJAJQTASgn\nAlBOBKCcCEA5EYByIgDlRADKiQCUEwEoJwJQTgSgnAhAORGAciIA5UQAyokAlBMBKCcCUE4EoJwI\nQDkRgHIiAOVEAMqJAJQTASgnAlBOBKCcCEA5EYByIgDlRADKiQCUEwEoJwJQTgSgnAhAORGAciIA\n5UQAyokAlBMBKCcCUE4EoJwIQDkRgHIiAOVEAMqJAJQTASgnAlBOBKCcCEA5EYByIgDlRADKiQCU\nEwEoJwJQTgSgnAhAORGAciIA5UQAyokAlBMBKCcCUE4EoJwIQDkRgHIiAOVEAMqJAJQTASgnAlBO\nBKCcCEA5EYByIgDlRADKiQCUEwEoJwJQTgSgnAhAORGAciIA5UQAyokAlBMBKCcCUE4EoJwIQDkR\ngHIiAOVEAMqJAJQTASgnAlBOBKCcCEA5EYByIgDlRADKiQCUEwEoJwJQTgSgnAhAORGAciIA5UQA\nyokAlBMBKCcCUE4EoJwIQDkRgHIiAOVEAMqJAJQTASgnAlBOBKCcCEA5EYByIgDlRADKiQCUEwEo\nJwJQTgSgnAhAORGAciIA5UQAyokAlBMBKCcCUG7+XC+A38uSJUuSJHv27EmS7N27N0kyb96fnyeT\nk5NJkocPHyZJDh06lCR58eLFf7pOZs4kAOUGU1NTc72GDAaDuV8E06xYsSJJsnPnziTJ8ePHkyRr\n1qxJkixatGhG7/PmzZskyebNm5Mk7969m9V1MnNTU1ODcdtNAlDOPgGm2b17d5Lk7NmzSZINGzbM\n6HUfPnxIkixbtmza9omJiSSjfQkmgV+PSQDKmQRIkhw9ejRJcubMmSQ//s7//v37JMm9e/eSJNev\nX0+S3L17N0ny8uXLac9/+vRpkuT169ezu2BmjUkAypkEyu3atSvJjyeAL1++JEmuXbuWJDl9+nSS\n5O3bt0lG5wecOnVq7PsvXbo0SbJw4cIkydevX2dt7cwOkwCUc55AuTt37iRJduzYMW37t2/fkiQH\nDhxIkty4cWPavw8/4S9dupQk2bdv30//zvCow+3bt//hivm7nCcAjGWfQLmVK1eO3X7u3Lkkf50A\ntm/fniS5cOFCkmTdunUz+jvbtm1LYhL4FZkEoJxJoNxwL//atWunbd+yZUuS5MqVK0mSrVu3Jhld\nOzA8KjBTV69e/Ufr5N9jEoByjg6UG37Cnz9/ftrj2TI8g3DTpk1Jko8fP87q+zNzjg4AY5kESDKa\nAA4fPpxkdH7A8Oq/oc+fPycZfcJ/vy/he0eOHEkyOprA3DEJAGOZBBhr9erVSZLFixcnGZ1ReOvW\nrSTJggULkiTPnj0b+/pPnz4lSVatWpVkdPUhc8ckAIzlPAHGevXq1bTHz58/T5LMn//nf5nLly//\n9PUXL15MYgL4HZgEoJx9AvxPNm7cmCR58uTJT583vC/BcN8Ac88+AWAs+wSYkeXLlycZ3T/gR4b3\nHHQHod+HCDAjJ06cSDK6sOh7w5uQDJ83fMyvz9cBKGcS4Kf279+fZPQzZD/y+PHjJH+95Ti/PpMA\nlHOIkLHWr1+fZPQjI99fSDQ0/O4//Inymzdv/ger4+9wiBAYyz4Bxjp27FiSH08Aw5uDDG81Prx1\nOb8fkwCUMwkw1qNHj5IkBw8eTJIMBtO/Tt6/fz+JCeD/gUkAypkEGGt4KfDExESS5OTJk0mSBw8e\nJEkmJyfnZmHMOpMAlHOeAJRwngAwlghAORGAciIA5UQAyv0SRweAuWMSgHIiAOVEAMqJAJQTASgn\nAlBOBKCcCEA5EYByIgDlRADKiQCUEwEoJwJQTgSgnAhAORGAciIA5UQAyokAlBMBKCcCUE4EoNwf\n8s4OpJxqfKYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["1\n","2\n","3\n","4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n62rbyGrO9qlPfSqnT59OMov4VRbjRz/6UZLkySefTCLSB+8V7drKdr1y3V4Zhja7eOjQoXVrH9sK\nhXYbuDrXjBE2V1uZ0G6BVtm5ur2OVUVU3+nz+prU69W8sFFPhcpe1rEqFKbWUNc1V+axrYpqeypM\nZSqntoGDvWpqS9VFx0bbM6HGeTVjPXny5FWPVV20f//+ddtD1nnNQVPH+v3Qjvf2M7W/L+r57ZzW\n/jfYquqO9zsVCgAAAEA3FQqsU9G+2hLyvvvuS5KVvgkPPfTQSkag1lnWeswf/OAHSZKXXnpp+y4Y\n2HSVeawo/9S2c2Ucx5V5oDIHlc2oOaW2f6vdYCpjoJsybI2pHgpTWbvqa1K3L/r6UxUKx48fX7eu\nunZvqGuZWus8taVlWx01tZ0ksKT9/r7WXR5qzFXvhBrntW1s/d1QFc3tsforHThwYF3vlBrv1Yut\nKhHaY/Vmm6pMqHmkeqvUb5h2fqh5Zt4OGCzG7AsAAAB0U6HAOpU9qD4J999/f5LkscceS7K0dqoi\nhWfOnEmS/PCHP0ySfPe7301iLTS8V7VR/jaTWdmDqk5avaay1ki3O0PUa1TGoOaPeeuzgT5T64Db\nzuaVtauKhDrvVfNEuzvM6gqFWl9dHd/rN0b73nVerzm1y0N7bLvEX2v2FfaKa+0v0lYJVS+F2sFl\nqqfCqVOnkqzdAaqtPGp3d5namaYd722PlTq21VdtRQObS4UCAAAA0E2FAutUdK+yBdVDobIL77zz\nTp599tkkWTl+7WtfS5KcPXt2W68V2BptpUL1Pzh//nySWaVCZQ9OnjyZhx9+OMksS9n2SGjXNOqd\nAFtjKuO42dn6dneIqR1ckvWVBvWcmmPqvOaJtqKpfpO0lQ31Hu0+8yoTYMnUmGi/5+epLP/UzitV\ngVDHqmCongurd35q5466hhrv1WupjlUVWb9F6nFVudCO/1b7Wdv/JuaN66NCAQAAAOimQoF1fvKT\nnySZRSCff/75JLN9qd9+++28/PLLSZKnn346yayXQkUKgfeHiuZXVrAqFC5cuJBk7R7RH/nIR5LM\nIvxtr4Q2o6jXCmytqYzkZmXhagzXd39VLlV1wdUqFOox7Y4ybZf3eZUKbSXUvHlFBpK97lqz8m2F\nQh2rQuHQoUNJZn1S6lgVCvX8K1eurIzXGr81h9Q4r3mgKhLa41Q1VDv+28qEdneZOqpQuD4qFAAA\nAIBuKhRYp6KEVXXw5S9/OUly8eLFJEtro6pC4Vvf+taa5wDvD220vs1A1rrGivq/++67K12X6zn1\nmHqu3gmwPba7h0KN8bb/QWUfk/Xrrsu8HgpTPRVqPuldQw3vd/Mqk641G99WKFRlQluhUMe2h8Lq\n6oF2B6l2fLe/NS5durTmfGr8t595qmdCe/vq3zKrb2cxKhQAAACAbioUWKf2kq+KhMcffzxJ8swz\nzyRZ2vWhIoivvPLK9l8ge4Lo8Paa+u9deza3e8JXF+e6v9ZKJrOMwVQ3dv9vdwf7cb//tGOr/h/P\ny0y2j+t9v7b/wUY9FNoKhZpT2j4M9fuiPbaVCjW/tBlKGUbY2PVWKNSYndrlYV4PhY2qCapCocbz\nVA+F2uWh7q9Kx3m7vEz1UGjPzRfXR4UCAAAA0E2FApOOHz++5ljOnTu3E5fDHjPVqZetMbXmsjIR\nlWG49dZbkyRHjx5NMstMnDhxYuX/WWUU6rwyBzIBu0Otg+X9b6vHWpsFbMf66n4pVQXRHhftwt4e\nVSLAzmjHcH2nTB3bx22k7WEw1dNgqrLAPLCz/KoAAAAAuqlQAHalrd4/ncVURqF6J1SlQq2drF4K\nR44cWdfxvUytZWR7tRlhPRQAgOulQgEAAADoNsj2AQAAAL1UKAAAAADdBBQAAACAbgIKAAAAQDcB\nBQAAAKCbgAIAAADQTUABAAAA6CagAAAAAHQTUAAAAAC6CSgAAAAA3QQUAAAAgG4CCgAAAEA3AQUA\nAACgm4ACAAAA0E1AAQAAAOgmoAAAAAB0E1AAAAAAugkoAAAAAN0EFAAAAIBuAgoAAABANwEFAAAA\noJuAAgAAANBNQAEAAADoJqAAAAAAdPv/VB4POE45WeQAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQEAAAEICAYAAABf40E1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADZVJREFUeJzt3U2IJHcZx/Hf09MzmZ2d7GaTXVez\nyRrfEPEkKEE8yKIEgnqLBg/qChGCoOhNUPCiIqLgYW8SET34guYgoijoBsnFHAQ9iIIa1jVZYxKy\nHjLTszs75WH6ma5+uv9T1T07M93zfD+w1PRr9UzSv+epf/2ryqqqEoC8Oof9AQAcLkIASI4QAJIj\nBIDkCAEgOUIASI4QQCtmdtHMnt7l8V+Z2Sf2Yb0PmFllZt3b/d7Yxh8Wt0VVVQ8f9mfAdOgEgOQI\ngSPCzO43syfN7EUze9nMLplZx8y+ZGZXzOy/ZvZ9MzvZf7632Z80s6tm9oqZPW5m7zKzP5vZdTO7\nNLoau2Rm/zOzv5rZ+2oPPGVmj/V/vmhmT5vZN/vv+6yZPVx77kkze8LMrpnZc2b2FTNb6D+20H/d\nS2b2T0kf2P+/Xm6EwBHQ/wL9QtIVSQ9IOifpR5Iu9v9dkPRGSauS4hf7QUlvkfSopG9L+qKk90t6\nu6SPmNl7w3P/Iem0pC9LetLM7i58rAcl/a3/3G9IesLMrP/Y9yRtSnqzpHdIekjSY/3HPiXpg/37\n3ynpkXZ/BUytqir+zfk/Se+W9KKkbrj/t5I+Xbv9Vkk3tT0W9ICkStK52uMvS3q0dvtnkj7X//mi\npOclWe3xZyR9rP/zU5Ieqz3377XnrfTX9VpJZyVtSDpWe/yjki73f/6dpMdrjz3Uf2237d+Df5P9\nY2DwaLhf0pWqqjbD/fdquztwV7QdAGdr971Q+3l9zO3V2u3nqv43s/Z+9xY+03/8h6qq1vpNwKqk\nuyUtSro2aAzUkXS19pmvDt5m6PNjHxACR8NVSefNrBuC4HlJr6/dPq/tNvwFSfdNsZ5zZma1IDgv\n6edTfNYNSafHhJYkXdN2qLnzk39MTIIxgaPhGW1/eb5uZsfNbNnM3iPph5I+b2ZvMLNVSV+T9OPC\nl6+N10j6rJktmtmHJb1N0i8neYOqqq5J+o2kb5nZif7g5ZtqYw8/6a/jPjM7JekLU35WtEQIHAFV\nVd2S9CFtD7T9S9K/tT3Q911JP5D0e0nPSupJ+sweVvUHbQ8iviTpq5Ieqarq5Sne5+OSliT9RdIr\nkn4q6XX9x74j6deS/iTpj5Ke3MPnRQs2vIkHIBs6ASA5QgBIjhAAkiMEgORmYp7AhQsXGJ0E9tnl\ny5dt3P10AkByhACQHCEAJDcTYwK1A0mGMJEJ2H90AkByM9EJlJQ6BAC3D50AkBwhACRHCADJEQJA\ncoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJ\nEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRH\nCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwh\nACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQA\nkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJA\ncoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJ\nEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRH\nCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwh\nACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQAkBwhACRHCADJEQJAcoQA\nkBwhACRHCADJdQ/7A2Dvqqra9/c2s31bhzuIdWAUnQCQHJ3AHNtLB1B6bbx/a2tLktTpjK8Xbas3\nVX520QkAydEJJFKv8qWKX3pN6fG2HUJcH53B7KATAJKjE0hgkg7AHy91AF75vZLvtUMo3YeDQycA\nJEcnkEhVVcXK7ff7MnYEsfLHSh+redNeBcwO/gsBydEJzKD9nAFYWldpbKBU0f3+hYWFPa2f8YDD\nRycAJEcncATFTmJctY/b/KXXukkrf2nMIC7HPbc0boH9QQgcIfu5GRF3DXoY+LJpoHCSXYb+XMLg\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["KL divergenvce\n","3.0035873328734803\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"S5bTNMOXkimK","colab_type":"code","outputId":"94022d93-f4a2-4aee-8a7e-ec5d630643ce","executionInfo":{"status":"ok","timestamp":1566414484686,"user_tz":-60,"elapsed":400,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["x_comb_gt /= np.sum(x_comb_gt)\n","print(np.sum(x_comb_gt))\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))\n","print(np.sum(combined))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1.0\n","2.9415657532918003\n","1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"24d19436-1b2b-437b-a7e8-c972d61e65de","executionInfo":{"status":"ok","timestamp":1566507805231,"user_tz":-60,"elapsed":65090,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["kl = np.zeros(len(x_test))\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    preprocessed_input = sorted_x[border[i]:border[i+1]]\n","    # print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=False)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()\n"],"execution_count":26,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (980, 32)\n","output shape (980, 112, 112, 32)\n"," \n","weights shape (980, 32)\n","output shape (980, 56, 56, 32)\n"," \n","weights shape (980, 64)\n","output shape (980, 26, 26, 64)\n"," \n","weights shape (980, 64)\n","output shape (980, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|â–ˆ         | 1/10 [00:06<00:55,  6.13s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 1\n","weights shape (1135, 32)\n","output shape (1135, 112, 112, 32)\n"," \n","weights shape (1135, 32)\n","output shape (1135, 56, 56, 32)\n"," \n","weights shape (1135, 64)\n","output shape (1135, 26, 26, 64)\n"," \n","weights shape (1135, 64)\n","output shape (1135, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|â–ˆâ–ˆ        | 2/10 [00:13<00:51,  6.41s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 2\n","weights shape (1032, 32)\n","output shape (1032, 112, 112, 32)\n"," \n","weights shape (1032, 32)\n","output shape (1032, 56, 56, 32)\n"," \n","weights shape (1032, 64)\n","output shape (1032, 26, 26, 64)\n"," \n","weights shape (1032, 64)\n","output shape (1032, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|â–ˆâ–ˆâ–ˆ       | 3/10 [00:19<00:45,  6.45s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 3\n","weights shape (1010, 32)\n","output shape (1010, 112, 112, 32)\n"," \n","weights shape (1010, 32)\n","output shape (1010, 56, 56, 32)\n"," \n","weights shape (1010, 64)\n","output shape (1010, 26, 26, 64)\n"," \n","weights shape (1010, 64)\n","output shape (1010, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|â–ˆâ–ˆâ–ˆâ–ˆ      | 4/10 [00:26<00:38,  6.44s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 4\n","weights shape (982, 32)\n","output shape (982, 112, 112, 32)\n"," \n","weights shape (982, 32)\n","output shape (982, 56, 56, 32)\n"," \n","weights shape (982, 64)\n","output shape (982, 26, 26, 64)\n"," \n","weights shape (982, 64)\n","output shape (982, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 5/10 [00:32<00:31,  6.30s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 5\n","weights shape (892, 32)\n","output shape (892, 112, 112, 32)\n"," \n","weights shape (892, 32)\n","output shape (892, 56, 56, 32)\n"," \n","weights shape (892, 64)\n","output shape (892, 26, 26, 64)\n"," \n","weights shape (892, 64)\n","output shape (892, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    | 6/10 [00:37<00:24,  6.01s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 6\n","weights shape (958, 32)\n","output shape (958, 112, 112, 32)\n"," \n","weights shape (958, 32)\n","output shape (958, 56, 56, 32)\n"," \n","weights shape (958, 64)\n","output shape (958, 26, 26, 64)\n"," \n","weights shape (958, 64)\n","output shape (958, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   | 7/10 [00:43<00:18,  6.06s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 7\n","weights shape (1028, 32)\n","output shape (1028, 112, 112, 32)\n"," \n","weights shape (1028, 32)\n","output shape (1028, 56, 56, 32)\n"," \n","weights shape (1028, 64)\n","output shape (1028, 26, 26, 64)\n"," \n","weights shape (1028, 64)\n","output shape (1028, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  | 8/10 [00:51<00:13,  6.55s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 8\n","weights shape (974, 32)\n","output shape (974, 112, 112, 32)\n"," \n","weights shape (974, 32)\n","output shape (974, 56, 56, 32)\n"," \n","weights shape (974, 64)\n","output shape (974, 26, 26, 64)\n"," \n","weights shape (974, 64)\n","output shape (974, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 90%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 9/10 [00:57<00:06,  6.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 9\n","weights shape (1009, 32)\n","output shape (1009, 112, 112, 32)\n"," \n","weights shape (1009, 32)\n","output shape (1009, 56, 56, 32)\n"," \n","weights shape (1009, 64)\n","output shape (1009, 26, 26, 64)\n"," \n","weights shape (1009, 64)\n","output shape (1009, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [01:04<00:00,  6.52s/it]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"y5i0i8RvJIti","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"b74a3c5b-b088-4fde-99bf-ff57334b2681","executionInfo":{"status":"ok","timestamp":1566507640433,"user_tz":-60,"elapsed":1211,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":791}},"source":["plt.imshow(sorted_x[border[9]].reshape(112, 112), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[0][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[0][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[0][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[0][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[0], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n8s4OpJxqfKYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nAAAApv0feomaKQnh7xoAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQEAAAD7CAYAAABqkiE2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAACfVJREFUeJzt3dt2E0cQBdCWscFcEi4LsvLAn/D9\n+Z48sOIYDDgPrLKlspqRjAkWZ++XQXfZwKmanp6e1eXl5QByHf3sLwD8XEIAwgkBCCcEIJwQgHBC\nAMIJAQgnBCDc8c/+AmOM8e7dOzOW4Af766+/Vtvu1wlAOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBO\nCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACEEwIQTghAOCEA\n4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4IQDghAOGEAIQT\nAhBOCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACEEwIQTghA\nOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4IQDghAOGE\nAIQTAhBOCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACEEwIQ\nTghAOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4IQDgh\nAOGEAIQTAhBOCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACE\nEwIQTghAOCEA4YQAhBMCEE4IQDghAOGEAIQTAhBOCEA4IQDhhACEEwIQTghAOCEA4YQAhBMCEE4I\nQLjjn/0FuF++fPmy1/OPjtSRQ+dvEMLpBILsU+UvLy+33r9arW79nut0EPeHvwkIpxMIsEu1rsrf\nO4D+2qrgvSPot3f9TjqCn8/fAITTCYTqlb9X/P54VfpZZzCzT4ewbzcxG7dgPzoBCKcTCLPUAdTt\n2vZOoI8JzPbt6/H++m3qsf6aJfs+n+10AhBOJ/ALmh0NuLy8XBwDmN3f3/vBgwc7fZdZB7DeUcyO\nNCxVeB3A3dAJQDidwC/gtrP21vWqetsquzTC38cU9jkioPL/GELggN3Ff/6Z2cBe/09cuwWzx3f5\nT16v6T+Pgb//h90BCKcTOEA/ogOYVezZZ/X7qyOYDRweH2/+U1uv8lXpZx0BP5ZOAMLpBA7IbRf8\nqNetV/vZY3X/58+fxxjX++MfP37c+l3q+VX5a3tycrKxrfv78y8vL29MUNIR/L90AhBOJ3AAdq2I\ns6m726puH72vyl+P1+3eEdS27v/06dPWz6wO4PT0dIxxPSbQjx4cHR1t7VT4/+gEIJxO4B771vTf\nMZan5Har1erqsV7R+3vXZ1el7/v0ta3Hz8/PN96vHy14+PDhxv3r36nu699lZt/Tmfk2vz0IpxM4\nILOpvX1kv1ftba+ZdRO9Q6gK3t+7z+arff7qDOr5/fXb3qePT/Tuo24vzVnQEdyO3xqE0wkcoFkH\n0Ld9RH59dl6fpVfPrcpdo/p9P72/5+yU4tl3KXX04Ojo6OozeldycXGx9X7ulk4AwukE7qGlRT+X\nZtbNOoNtncBsaa/aD69q3DuH6hiqovd9/94x1Lbeb/1nm4119J+3P292IRRjA/vx24JwOoEDttQR\n7HMu/2xJ8eoIalsVvp8jUO/z6NGjjW09Xq+r+QQfPnwYY3w9J6EfkVjazmZGcjs6AQinEzgAs0VA\n++N9f75Upby4uLh6rJ8rMJsJWGcP1u2q8P2cgNnRhbrdjw7U2MCXL1+u/lyfVbd7FzJbYajPXWA/\nOgEIpxM4QL0izo6z92P85+fnV/vkVW1n+9ml3rM6gD4mUNt+tGA2/6A+f/3chF7p+xhA72xKPw+i\nOEqwH78lCKcTuMdm+8Cz+/sc+37U4OzsbJydnW28x2ydgH5OQHUEta+/dJmyPlawbUWh+s6zy6LP\n5gv0uQ37XhCFTToBCKcTOEB9dt9SVa/t2dnZ1Z9rJH5p1aK+HkDt09e+fz96UKoDqLGE2euPj493\n/i59HGJ2rQNjAfvx24JwOoF7bHYFntkaAEvn26+vMVgdQT9K0Pe3q4L3Iw2zNQz6PIEnT56MMa47\ng7q/to8ePbrqBGoWYf+M6hpK7wTMD/g+OgEIpxM4AL3q7rr6cB8tPzk5ubHvXhW+rxE4WwegV+fH\njx+PMa4r/tOnT8cYY/z2228b99f71fPXO4H18wi2ff/Z2oP2/e+G3yKE0wkcoN4R9DGDvs+8fsy+\nV/jZmoG1b9/PCuz7+kvbqvylv8/p6elVJ1DjE31twV33+fedV8FXOgEIpxM4ALtWwn68vI8JPHz4\n8Maswqr4/RyB2qd/8eLFxu3nz59vbF++fDnGGOP333/feN6zZ8/GGDdH9vvRgdPT0xvnM8yO/89m\nFPYjGyr/fnQCEE4ncA/d9VV51ytrVf7S1wWoSl4V/vXr12OMm5W+OoG6fzYW0Of31/5/Pf748eNp\nJ1DPna2T0Nc9dBXj29EJQDidwC+gHyWo2317cXFx9ee+BmB1CG/evBljjPHHH3+MMcb4888/xxg3\nxwbqdu379/UG+tWEqspX57GtE+hHA2ZnEfazCR0V+D5C4IDsOkDWrS/aUf/ptx2qG+O6va8QePv2\n7RhjjFevXo0xrncDKgxq26cX9wlA//7778bnrE8y6ocI+9TmviRacUnzu2F3AMLpBO6RfQ9x9Q5g\nthtQlfTk5OTGKb69Mte036r41RHUtu8G1LZeX4uWvH//fowxxj///LPxXfs04w8fPtzoGnoH0Bce\nXTqhiv3oBCCcTuAXsrQPvVqtrjqBPiBYt2vbxwqqQ6gK3scE6nmlqnsN+vVTjmt7fHx847Nru+tS\n4gYAv49OAMLpBO6RpYq2tJzYkqOjo+nFSvsU4xrNr336v//+e+PxPpbQFwap19cYQb1P3V6/HFnf\n5+/Lot3252U3OgEIpxM4AEuTZnatkKvVarpv3pcCr8pelbuPEfQTker5VeFru0snUN3DrAOYTYbS\nGdwNnQCE0wn8AnY9cWZ9lL13BP203T7zryp3Xx68H5HonUDvCGpbYwbrYwJ90dNZxdcB3C2dAITT\nCdxDvbLvui+8dOnyMW5W/ro9O0bf37uf1tur9vq+/hg3jzJs6wT6TMH+nktHCYwRfB+dAIS7F52A\nxSC2m11UZHbx0P74tso4m3dfnUGfMdiXEq8Zhv28hG42ZrBtLsDs3IfZWYNLHYB/T1/tuiS7TgDC\n3YtOgO1mFX7ped+qhLPq2S/pNTvHoF+MZLbAx75nQn7rNfv8fFzrl6if0QlAuJWRVMimE4BwQgDC\nCQEIJwQgnBCAcEIAwgkBCCcEIJwQgHBCAMIJAQgnBCCcEIBwQgDCCQEIJwQgnBCAcEIAwgkBCCcE\nIJwQgHBCAMIJAQj3H2YnjJnDbt9/AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","outputId":"de383e62-5e78-4c10-fb19-798722b6fb60","executionInfo":{"status":"ok","timestamp":1566507840180,"user_tz":-60,"elapsed":6649,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = np.expand_dims(x_comb_gt, axis=-1)\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nz8ny3odtwKbm503AXX3rP9qMQlwKHOy7zDCzk8DQTEHSrcC7gHMl7QVuBD4L3C7pWuBR4EPN5t8D\nrgT2AC8AH5tCne11pL9PYdiMw/o6vW6VczlHFep3UGY/Qf0shP53LrQ9PTmziroPIeuS908cOnSo\nKPNOzPw861j3MdT9Il2OQgwNChFxTctHlw/YNoDrxq2U/W5pm/iTfyh1MKhvfc4/wPolL/WQZH2j\nVH1T05IlS1qnM9ePcMu65LHzlfRPP/10sZyvrK9v087fKX/HtiHKQR2x0+ZpzmZW8DRnm6m6tRt0\n+ZCtZj28l6l3trrZCuflQj1cmPvNVL/OIFJ/VlC32G0vecnLgYMHDwLw61//uiifeuqpoo6ZUdSX\nD/k7tmUocznN2cx+tzhTsE4dL1OoOxjzejxb5/ohqnUGUHcG1o9+r4cX+zOFthfEZh2y5c9MIPsS\nMkOo+xbqDse2x8sPmrx0sgxJmtnrlDMF61zbkGS2ptmyZyudmUGurzOEetRi2Itm07Fjx15z7LZH\nt9X9GllmZtA2+tA23fl4k5dmzZmCmRWcKVgnBk3jbZunUL+mve3FKXUrn617Zgr1bdD1g1MionXk\no54gVc+RyH6OevJS26Slekp2241QHn0ws845U7DODcsUslXNzCBb7XrqcZ1Z5HY507F+aUz9WLf+\nPoX6Zqts6eup1ZkJtJX1DVBtGcI89CUkZwpmVnCmYJ0a1DLWGUP20Lc9Cr7ONOr7E9peDlu/Xm5Q\nn0LbKER9U1a9vh5lqOclDHuoikcfzGxuOFOwubPYPoa2V7K13bdQv17ueKMPdf9E3fLXmUPdZ7DY\nx67Nw+PXas4UzKzgTME61/ao9mEvWmm7T6Gev5Dye20zIfszhbaZjfVynQnUfQbz9EDWxXKmYGYF\nzUPEkvQk8DzwVNd1aXEurtso5rVu81ovmG7dfj8izhu20VwEBQBJOyNiY9f1GMR1G8281m1e6wXz\nUTdfPphZwUHBzArzFBS2dl2B43DdRjOvdZvXesEc1G1u+hTMbD7MU6ZgZnNgLoKCpCskPSxpj6Qt\nHdbjAkn3SnpI0oOSrm/Wr5J0j6RHmnJlh3VcKuk+SXc3y+sl7WjO3XckLRu2jynVa4WkOyT9TNJu\nSZfNy3mT9Inmv+cDkm6VdFpX503S1yUdkPRA37qB56l5/eKXmzreL+mSWdSx86AgaSnwFeB9wEXA\nNZIu6qg6R4FPRsRFwKXAdU1dtgDbI2IDsL1Z7sr1wO6+5c8BX4yINwPPANd2Uiu4Cfh+RLwVeBu9\nOnZ+3iStBf4K2BgRfwAsBT5Md+ftm8AV1bq28/Q+YEPzbzNw80xqmI+Q7uofcBnwg77lG4Abuq5X\nU5e7gPcCDwNrmnVrgIc7qs+65n+adwN3A6I30WVh0LmcYb3OBn5J00fVt77z8wasBR4DVtGb1n83\n8MddnjfgQuCBYecJ+AfgmkHbTfNf55kCv/2PlvY26zol6ULgYmAHsDp++/bsx4HVHVXrS8CngHwL\n6jnAsxFxtFnu6tytB54EvtFc2nxV0nLm4LxFxD7g88CvgP3AQWAX83HeUtt56uRvYx6CwtyRdCbw\nXeDjEXGo/7PoheyZD9lIej9wICJ2zfrYi7AAXALcHBEX05uyXlwqdHjeVgJX0QtcbwSW89r0fW50\ndZ76zUNQ2Adc0Le8rlnXCUmn0AsI346IO5vVT0ha03y+BjjQQdXeAXxA0v8Bt9G7hLgJWCEp73bt\n6tztBfZGxI5m+Q56QWIeztt7gF9GxJMRcQS4k965nIfzltrOUyd/G/MQFH4MbGh6g5fR6wTa1kVF\n1LvX9mvA7oj4Qt9H24BNzc+b6PU1zFRE3BAR6yLiQnrn6EcR8RHgXuCDHdftceAxSW9pVl0OPMQc\nnDd6lw2XSjqj+e+bdev8vPVpO0/bgI82oxCXAgf7LjOmZ9YdPy0dL1cCPwf+F/jbDuvxTnqp2/3A\nT5p/V9K7dt8OPAL8C7Cq4/P1LuDu5uc3Af8F7AH+CTi1ozr9IbCzOXf/DKycl/MGfAb4GfAA8I/A\nqV2dN+BWen0bR+hlWNe2nSd6Hclfaf4ufkpvBGXqdfSMRjMrzMPlg5nNEQcFMys4KJhZwUHBzAoO\nCmZWcFAws4KDgpkVHBTMrPD/Fa0x6yqE25QAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"sEfuI3GpeRg5","colab_type":"code","outputId":"3317dc75-0d55-431a-abca-51f5083dd2e2","executionInfo":{"status":"ok","timestamp":1566413510802,"user_tz":-60,"elapsed":427,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["results[0][0].shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4, 112, 112)"]},"metadata":{"tags":[]},"execution_count":90}]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"6fd4e7a6-bd87-4ab4-af81-7da3f2d4d246","executionInfo":{"status":"ok","timestamp":1566507863327,"user_tz":-60,"elapsed":3678,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["kls = np.zeros((len(sorted_x_gt)))\n","for i in range(0, 10):\n","  gts = sorted_x_gt[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  temp = []\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    temp.append(kl)\n","    kls[border[i]+j] = kl\n","  print(i, \"mean kl\", np.mean(temp))\n","print(\"KL divergenvce\")\n","print(kls.mean())"],"execution_count":28,"outputs":[{"output_type":"stream","text":["0 mean kl 2.5702878546004992\n","1 mean kl 2.6156248583917088\n","2 mean kl 2.7990571472447905\n","3 mean kl 2.8682962162302945\n","4 mean kl 2.6955944920586505\n","5 mean kl 2.8138255013753244\n","6 mean kl 2.914153949878112\n","7 mean kl 2.5590777397124085\n","8 mean kl 2.7103163200398885\n","9 mean kl 2.8984656968959275\n","KL divergenvce\n","2.7299467948459837\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Sv1I8125ipUR","colab_type":"code","outputId":"784d4126-2dc9-4dc0-fc20-e7441931a24f","executionInfo":{"status":"ok","timestamp":1566414506803,"user_tz":-60,"elapsed":784,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["0 mean kl 2.5702878546004992\n","1 mean kl 2.6156248583917088\n","2 mean kl 2.7990571472447905\n","3 mean kl 2.8682962162302945\n","4 mean kl 2.6955944920586505\n","5 mean kl 2.8138255013753244\n","6 mean kl 2.914153949878112\n","7 mean kl 2.5590777397124085\n","8 mean kl 2.7103163200398885\n","9 mean kl 2.8984656968959275\n","KL divergenvce\n","2.7299467948459837"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nZpb5f5DqnzNKvy51AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["2.724540506068822\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4N8pIhW7jghM","colab_type":"code","outputId":"c01f1e31-a10f-4b14-e221-ff1c6fa9677c","executionInfo":{"status":"ok","timestamp":1566414270620,"user_tz":-60,"elapsed":448,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["np.sum(gt)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{"tags":[]},"execution_count":118}]},{"cell_type":"code","metadata":{"id":"5rsAt0VVhdKr","colab_type":"code","outputId":"a89c4e71-150a-41e2-dcb3-842aea0b9762","executionInfo":{"status":"ok","timestamp":1566403084258,"user_tz":-60,"elapsed":541,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["border"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 980, 2115, 3147, 4157, 5139, 6031, 6989, 8017, 8991, 10000]"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"Lr1e0TyMhm5D","colab_type":"code","outputId":"7e526b96-3627-4ea6-95ff-5b4126ca14cd","executionInfo":{"status":"ok","timestamp":1566385377950,"user_tz":-60,"elapsed":373,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 2])"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"9dhpUEUViJoc","colab_type":"code","outputId":"04b6bda4-a364-45bc-c8f1-8298c3008d40","executionInfo":{"status":"ok","timestamp":1566385062322,"user_tz":-60,"elapsed":490,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["x_test.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 112, 112, 1)"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"L0oKGNFrpV4U","colab_type":"code","outputId":"37665d32-d9a4-4013-e771-3e05da6407a4","executionInfo":{"status":"ok","timestamp":1566385064468,"user_tz":-60,"elapsed":1860,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 112, 112, 1)"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"ookWUk3PRoKF","colab_type":"code","outputId":"544749c5-7bb1-471e-c3ca-abfe103f11fa","executionInfo":{"status":"ok","timestamp":1566385064470,"user_tz":-60,"elapsed":1343,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, ..., 9, 9, 9])"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"ioySD7oZUeYT","colab_type":"code","outputId":"f29fd290-067d-41d3-fb14-842acd0b8447","executionInfo":{"status":"ok","timestamp":1566380720394,"user_tz":-60,"elapsed":393,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"R1OdRz7QaKa1","colab_type":"code","outputId":"4eee7c8a-7ef8-43fa-eba1-7ab094a563c9","executionInfo":{"status":"ok","timestamp":1566385094684,"user_tz":-60,"elapsed":496,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(49, 4, 112, 112)"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"itPglejX07x1","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}