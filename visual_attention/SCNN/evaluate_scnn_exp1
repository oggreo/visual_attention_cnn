{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_scnn_exp1","version":"0.3.2","provenance":[{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"d7891275-54b5-4795-c8d9-c31e883221a9","executionInfo":{"status":"ok","timestamp":1568049411630,"user_tz":-60,"elapsed":3306,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"NRChgpRCCBm4","colab_type":"text"},"source":["Define GradCam "]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","  \n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eSmiDKapCGlN","colab_type":"text"},"source":["Define K-winners layer"]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        self.k = k\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        return input_shape\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"61faa9f2-9845-4e00-84e3-0a49b8b827ea","executionInfo":{"status":"ok","timestamp":1568049452131,"user_tz":-60,"elapsed":28449,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0tDZ1ad7CPQC","colab_type":"text"},"source":["Define model"]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["ratio = [0.4, 0.4, 0.6, 0.8]  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","outputId":"bd47cb41-9f04-4ae4-fd21-3a5bdfef01a7","executionInfo":{"status":"ok","timestamp":1568049535362,"user_tz":-60,"elapsed":1130,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["model = Sequential()\n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=None, name='conv_1'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[0]), 1.5, 32, name=\"sparse_1\"))\n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', activation=None, name='conv_2'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[1]), 1.5, 32, name=\"sparse_2\"))\n","\n","model.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","model.add(KW(round(64*ratio[2]), 1.5, 64, name=\"sparse_3\"))\n","\n","model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_4'))\n","model.add(KW(round(64*ratio[3]) , 1.5, 64, name=\"sparse_4\"))\n","\n","model.add(Flatten())\n","model.add(Dense(10, name='dense_1'))\n","model.add(Activation(\"softmax\", name=\"softmax\"))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4hX-D1VnU_3r","colab_type":"code","outputId":"f2881c14-1709-4199-a014-068447fc8b1e","executionInfo":{"status":"ok","timestamp":1568049538527,"user_tz":-60,"elapsed":366,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":663}},"source":["model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3576: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n","Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv_1 (Conv2D)              (None, 112, 112, 32)      320       \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","sparse_1 (KW)                (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","conv_2 (Conv2D)              (None, 56, 56, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","sparse_2 (KW)                (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","conv_3 (Conv2D)              (None, 26, 26, 64)        18496     \n","_________________________________________________________________\n","sparse_3 (KW)                (None, 26, 26, 64)        0         \n","_________________________________________________________________\n","conv_4 (Conv2D)              (None, 24, 24, 64)        36928     \n","_________________________________________________________________\n","sparse_4 (KW)                (None, 24, 24, 64)        0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 36864)             0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                368650    \n","_________________________________________________________________\n","softmax (Activation)         (None, 10)                0         \n","=================================================================\n","Total params: 433,642\n","Trainable params: 433,642\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JMkaGTZJU_6u","colab_type":"code","outputId":"c7088448-f3d8-495f-de99-e191c9a0a53b","executionInfo":{"status":"ok","timestamp":1568049541902,"user_tz":-60,"elapsed":1104,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model.h5\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XiP1pYnNCNhO","colab_type":"text"},"source":["Load test data"]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"a79576b2-efc2-42fb-e604-cbcbba7453f0","executionInfo":{"status":"ok","timestamp":1568049591085,"user_tz":-60,"elapsed":3156,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RoYCfKiXCTp_","colab_type":"text"},"source":["Prepare test dataset"]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","colab":{}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_y = preprocessed_y_t[sorted_arg]\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WRa7TJUmCmgd","colab_type":"text"},"source":["Check the test data and the loaded model"]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"ff057ff1-21ae-435b-ab5a-4b3adf2d2eb4","executionInfo":{"status":"ok","timestamp":1568049646947,"user_tz":-60,"elapsed":414,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":319}},"source":["p = 8991\n","x = sorted_x[p]\n","x_org = x.copy()\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  sorted_y[p])\n"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n8s4OpJxqfKYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 112, 112, 1)\n","predicted_class 9\n","correct_class 9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"D720pcM2Cwfe","colab_type":"text"},"source":["Visualize the neural activity heatmap and construct the priority map"]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","outputId":"14472e36-f2e2-4035-c352-ddd5bc42ae71","executionInfo":{"status":"ok","timestamp":1568049683583,"user_tz":-60,"elapsed":2376,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=True)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    else:\n","        combined += heatmap\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n8s4OpJxqfKYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABBQAAAEJCAYAAAAkb3R+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAH29JREFUeJzt3V+Mpfd5F/Dvu39sb9b2uo7/xrE3\n3WwSpUUKERfQP0IqFeICcQFUQioSEASXvajgDsQFQghRqUKigkpAJUAKBVEqChcVUoUoSEXtBYIQ\nksaOHNeWs47Xa2/s9drrtV8uZp45M8/M6zO/3Zmdiebzkax3z5lzzpyx/f7m7PN83+c3zfMcAAAA\ngBGnjvoNAAAAAD94FBQAAACAYQoKAAAAwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAAAAxTUAAA\nAACGKShwT03T9PQ0Tb8xTdOr0zTN0zR95qjfE3C0pmn609M0/Y9pmt6apunKNE3/fJqmh476fQFH\nZ5qmn5qm6Wub68Ib0zT9+jRNzxz1+wKOh2mafmXz7xKXj/q9nHQKCtxrHyX5zSR//qjfCHBsXEjy\n95J8KskXkzyT5BeO9B0BR+3/JflT8zw/ko214fkk//Ro3xJwHEzT9JNJPnvU74MNCgonyDRNz07T\n9B+maXp9s9r/S9M0nZqm6W9P0/TSNE3fm6bpX03TdGHz8Z/ZrPz95Wma/mCapqvTNP2tza99apqm\nm9M0Pbrt9b+8+ZizS+9hnufX5nn+J0l+79B/YGCtY7IufHWe59+c5/ndeZ7fTPLPkvzEYf/swN6O\nybrw2jzPr26768MkOpFwRI7DurD5uDNJ/nGSnzvMn5f9U1A4IaZpOp3kPyd5KclnstEB/NUkf2Xz\nn59KcinJg0l+qT39J5N8IclPJ/k70zR9cfOX/O9kZ9LgZ5P8+3mePzisnwM4OMd4XfjjSb4+9tMA\nB+E4rQvTND03TdNbSW4m+ZtJ/uFd/GjAHTpO60KSn0/y2/M8/587/4k4SNM8z0f9HrgHpmn6sSS/\nkeTpeZ5vb7v/t5L82mZqINM0fSHJ/01yLsmnk7yY5Nl5nl/Z/PrvJvnFeZ5/dZqmv5bkZ+d5/hPT\nNE1J/iDJX5zn+bf38X7OJPkgyQ/P8/ydA/xRgX06buvC5mv9yST/Lskfnef5Wwf1swL7c0zXhUeT\n/PUk/22e5/95UD8rsD/HZV2YpunZJP81yR+Z5/n6NE1zks/N8/zCIfzY7JOEwsnxbJKXti8Cmz6V\njWpjeSnJmSRPbrvvyrY/v5uN6mOS/FqSH5um6elsdBQ/SvLfD/JNA4fqWK0L0zT9sSRfTfIziglw\nZI7VupAk8zxfS/Ivk/zHzYYEcG8dl3XhHyX5u/M8Xx97+xwmBYWT4+Ukz+3xi/jVJBe33X4uye0k\nr617wc1rnf9Lkr+QjZjSr84iL/CD5NisC9M0fTkb3Y+/Os/zb+3v7QOH4NisC82ZJE8keXjwecDd\nOy7rwk8n+YVpY0eoKlT8zjRNP7uPn4FDoqBwcvxuku8m+QfTNJ2fpumBaZp+Ism/SfLz0zT98DRN\nDyb5+0n+7R4VyCVfTfKXkvzM5p/XmqbpgST3b968f/M2cO8di3VhmqY/lI3dX35unuf/dCc/CHBg\njsu68OemafrC5tC3x5P8YpL/tZlWAO6tY7EuJPl8ki8l+cOb/yTJn0ny6/v/UThoCgonxDzPH2bj\nhLucjWuUXslGRfBXkvzrJL+djeuc3svY1NTfSPK5JFfmef7f+3zOzSTvbP75m5u3gXvsGK0LfyPJ\n40n+xTRN72z+YygjHIFjtC48k41C49tJvpaNOPSfHfh+wAE5LuvCPM/fm+f5Sv2zeffVeZ79XeII\nGcoIAAAADJNQAAAAAIYpKHDgpmn65W2x5e3//PJRvzfgaFgXgM66AHTWhR88LnkAAAAAhh2LvXxf\neOEFVQ24By5fvjwd9XvYr6985Ss71oUPP/wwSfL+++8nSW7durXj9kcffXQv3x4cW6dObYQPz549\nu+N45syZHV8vX/3qV39g1oULFy74vAD3wPXr139g1oVpmqwLcA/M87znuuCSBwAAAGCYggIAAAAw\nTEEBAAAAGHYsZigAdH0mwu3bt3fcXzMV+m046WrYcs1K6EcAgIPi0wUAAAAwTEIBOJY++OCDHbcr\ngVD317F2e5BQgA2nT5/e8/5p2hjOLKkAABwUnyoAAACAYRIKwLFUMxP67Uok9KRCfzycVOsSCktf\nBwAYJaEAAAAADJNQAI6lpYRCHfsMBQkF2FAzEiqR0O+vXSAAAO6WhAIAAAAwTEIBOJY++uijPW/X\nsXZ1qGN/PJxUlUyo1E7NTLATCgBw0CQUAAAAgGEKCgAAAMAwBQUAAABgmIICAAAAMExBAQAAABim\noAAAAAAMU1AAAAAAhikoAAAAAMMUFAAAAIBhCgoAAADAMAUFAAAAYJiCAgAAADBMQQEAAAAYpqAA\nAAAADFNQAAAAAIYpKAAAAADDFBQAAACAYQoKAAAAwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAA\nAAxTUAAAAACGKSgAAAAAwxQUAAAAgGEKCgAAAMAwBQUAAABgmIICAAAAMExBAQAAABimoAAAAAAM\nU1AAAAAAhikoAAAAAMMUFAAAAIBhCgoAAADAMAUFAAAAYJiCAgAAADBMQQEAAAAYpqAAAAAADFNQ\nAAAAAIYpKAAAAADDFBQAAACAYQoKAAAAwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAAAAxTUAAA\nAACGKSgAAAAAwxQUAAAAgGEKCgAAAMAwBQUAAABgmIICAAAAMExBAQAAABimoAAAAAAMU1AAAAAA\nhikoAAAAAMMUFAAAAIBhCgoAAADAMAUFAAAAYJiCAgAAADBMQQEAAAAYpqAAAAAADFNQAAAAAIYp\nKAAAAADDFBQAAACAYQoKAAAAwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAAAAxTUAAAAACGKSgA\nAAAAwxQUAAAAgGEKCgAAAMAwBQUAAABgmIICAAAAMExBAQAAABimoAAAAAAMU1AAAAAAhikoAAAA\nAMMUFAAAAIBhCgoAAADAMAUFAAAAYJiCAgAAADBMQQEAAAAYpqAAAAAADFNQAAAAAIYpKAAAAADD\nFBQAAACAYQoKAAAAwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAAAAxTUAAAAACGKSgAAAAAwxQU\nAAAAgGEKCgAAAMAwBQUAAABgmIICAAAAMExBAQAAABimoAAAAAAMU1AAAAAAhikoAAAAAMMUFAAA\nAIBhCgoAAADAMAUFAAAAYJiCAgAAADBMQQEAAAAYpqAAAAAADFNQAAAAAIYpKAAAAADDFBQAAACA\nYQoKAAAAwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAAAAxTUAAAAACGKSgAAAAAwxQUAAAAgGEK\nCgAAAMAwBQUAAABgmIICAAAAMExBAQAAABimoAAAAAAMU1AAAAAAhikoAAAAAMMUFAAAAIBhCgoA\nAADAMAUFAAAAYJiCAgAAADBMQQEAAAAYpqAAAAAADFNQAAAAAIYpKAAAAADDFBQAAACAYQoKAAAA\nwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAAAAxTUAAAAACGKSgAAAAAwxQUAAAAgGEKCgAAAMAw\nBQUAAABg2JmjfgMAHF+nTp362GM5ffp0pmna8bW6Pc9zkuSjjz7a8Zy6/8MPP0yS3L59e8/7AYDD\nUb+rR7/e7193ey/1+37d/ft93J1+P+6OhAIAAAAwTEIBgC2nT59Osuos1O2zZ88mSe6///4dt+t4\n5syZ3HfffTvuq9eoZEI/3rp1K0ny3nvv7TjevHlzx/MlFgDgYI0mD0aPS2nF7X9eSiL0ZOPS4/p7\nXZds2Ou9cPckFAAAAIBhEgoArE0mfOITn0iSnDt3bs/jAw88kAceeGDrz8mqO1HJgj4roRIJ3//+\n93cce0einlfvSVIBDsdoZ7J3IJeOe712ncd1vvfbZV0nUacRDsadJg+Wbvfj9vRBTyIsJROWZjHd\nadKgJxusHwdDQgEAAAAYJqEAwK5kQk8oVBLhoYce2nF88MEHkyTnz5/P+fPnt/6cbMxVSJIPPvgg\nySqZULffeeedHd+rOg+VXHj//fd3fF0yAe6NOueqs9hv17ld99ftftz+mJ5QqPO8ZqnU+V7HdZ3L\nsu4aauDj3WkioR/XrRt7JRR6IrEnlvospm7dLIZ1SQRJhYMhoQAAAAAMk1AAOIF6Z6F3FiuZUAmE\nRx55JEny6KOP7jhWUmGvGQpV+e+dx96Z3GvHiCRbu0ZUsqE6CPWelzoWwN1ZWhfqWLu91LHO1bpd\njzt16tSuNEOdtzdu3EiySirVetFnKfSjRAIcjnVJhZ446EmEdcftKYSlhEJPJiwlE9ft3rCUXNjv\n8xkjoQAAAAAMk1BgS69Ebu8wJDsrjP1a6Oo01nN7l6JU5a+er8MI98bSNY+VCugdxjpeuHAhSfLU\nU0/tOD799NNJVvMS5nne1UmsdaHv6lCdyTrW10u9l1pfylKHEjgY/RrpnhaqY6WQlnZ/2f4ZoKee\nquP45ptv7viefZ1YOs9757F3FnUaYaelc2m/uzasSyYsfb7ox3Lq1Km1uzp0+00aLL3u0gwWSYWD\nIaEAAAAADJNQYFcyYWnf+epI3L59O2+//XaS5Pr160mSd999N8mqWlnXXdexXrs6jvX46mACh2tp\nOvu6jmPNSqhkwsWLF3cc63E3btzYlTxYl1Do60B1BHpHs19b2ZMLwJ3p3cDeoey7vSytF5VUqtvb\n56n0dEN1CPvk9zqva9ZKrRv9WHrnsegswoZ1ab6l3RzWHZd2c1h3LNvP0TqPl3aD6c/Zb4KgJx56\nMmHdrhGSCmMkFAAAAIBhEgon0FIlslcQq0tQ3cNKI3zwwQdbncW33norSfL666/veO3qNDz++ONJ\nksceeyzJqstRnUrgcC2d5/3a6OooVqexjj/0Qz+UZJVQeO6555Ikly9f3vG8q1evbq0DPUHQEwo1\n1b2SCvX46gTUOlHXYe+3gwF8vN6R7Pf3zuPStPeud/G2z2ip1EId+2v3tahSTzdv3kyyWjfqdh1r\nXankUj/qLML+7DepsJRMWJdo6K+7l6XZBkuzD9b9LH23iP66dos5WBIKAAAAwDAJhROoT3fv10ZW\n1/C73/1ukuR73/teklUK4datW1udw0oxvPHGG0lWncaanXDp0qUkyY//+I8nWXU7exoCOBzrprYv\nzU7oSYXeZazH1foxTdNWx7A6iN///veTrJJM165dS7JaLyrptNQN7TvNSCbAwVjXkVy69rlbN6n9\nvvvu21ozHnnkkSSrNaPPSukpqZrVVOtI3a7Xrs8fS7vBAHtbSh7daTJhaWZC/9yx3celFZLda0sl\nDvrPsHR73eutSyRILIyRUAAAAACGSSicQP1ayarm14yE6h6+/PLLSVbJhLrueZqmrcpiPbc6BNVB\nqI5kJRmqY1kJBeDeWLpOefsU9mT3PvI9gVDdgUowVdqgXv/KlStbqaZXX301SfLaa68lWa0hdazU\nU60bS+8FOFj7TSas25e+W0oonD17ditxcOHChSSr87vPTKhk48MPP5xktcbU4+o99N0eSn3vpa/D\nSbF0nu53V5c+a2m/uzksPa7fv/199KTC0vyFdbMR+s9Uj6v1YGlmwtKMBgmFMRIKAAAAwDAJhROs\nqnV1feILL7yQZDU7oRIL1aH89Kc/nWRjX/rqJNQ1jHW7nludyZrOXNdKV1KhXwsFHK7ecaj0UHUH\nezqgbi8lFCrJVPdfuXIlV65cSbJaB+p2n8NSx3pudS6rM1nf06wVOBzrEgpLX++qq7efGQp1ntfn\nhVpjejKh1pjt81mS7JrRUt9rXScSTrqlXVqWdn/q802WkgvrZiZ83PqytNbU3yv6e6j79zsjpdaD\ndemq/npmsNwZCQUAAABgmITCCVTVt6r21XWKzz//fJJV97C6Bo8//niS5OLFi0k2Egp17XN1KXvn\noO8zX/f3/eaBw7Vud4el2QnrZij0bsJrr722lUzox0ooVHLp6tWrO95jrUn1vR566KEd3wM4XL2D\n2Xd/qWPf9aU+J/RdYbYf6/yu2Uq1htTaUUnGfqyZTJVwrPtv3bq141ifP3QWYad1cwaWEgp997ee\nSOhJhqWEQk8hbL9/aV5L34Guzvt67tKMlP73ilof1iUU6rNNn6lQj/f3lf3xaQ0AAAAYJqFwAlV1\nr6r+1TV88cUXk6yqepcuXUqSfOELX0iSXL58OclGte5b3/pWktXchW984xtJVtPdqwNR3YuqMFYl\nUCcB7o3eiVjqQPTEQu881syFen6/rvm9997bOu+rE/nmm28mWc1jqeRSHXvKoXceekLBtdFwOKoL\nV+dcne811+CRRx5JstqpqVJE9fV+e/uODHVe90RjP+/rs0clGWsdqTlPPfFYj6/PFb3TCGzoCaQ7\nTSjU/T2hsJRU+LhdIZae02co1LH+HtE/J/Tzva9ltU70BMLS8/z95M5IKAAAAADDJBTYUhXLPmOh\nugOVZLh582a++c1vJkm+9rWvJUm+/vWvJ1l1ImuaM3C8LE15rk5EJRKq01jn8tI11NU9OHfu3NZr\nV0egdxSqA7B0Hea6LoeEAhys3qXrMxQqefDJT34ySfLEE08kWSUVenKhbte5f+3ata1kQs1nqoRS\nn33QkwaVUOgJpz5LoV5HQgE+3t0mFOp2n3OwtNvDUkLh7NmzW3+u11yav9Bfq5/vpScPesJxaUea\nfnvdzAX2JqEAAAAADJNQOIGq+lcdiKeeeipJ8tnPfjZJ8sorryRJvv3tbydJXn755SSrTsXNmzfz\n0ksvJdk9Q6Fe+8tf/nKSVZezrsdU+YOjsdSZqA5DrQeVQKhkQnUel6a4b+9o1p/79PZ+zeP2LsX2\n41Jnonca7P4Ah6PPUKhZKo899liS5FOf+lSSVWJh6Vjpgvfff38r3Vg7StXtsnRtcyUSareHmqFQ\n60rNWqjOYj8CG/pn7v3OVFhKE/YEw1ISYSkBcebMmV2/95d+ry8lFPr53hNKdX9/7/X8/veRfmSM\nT2UAAADAMAmFE6iqfDXN/fHHH0+SfP7zn0+y6kzUHvK1G0R1B955552tP9d8hZrmXimG6m7Wa1f3\nU0IBjtZSJ2JdQqHv+lC3qwtw7ty5rdeszmHvJPYZCksTo5e6HJIJcDCWJpyXOjf7TJVKIDz66KNJ\nds9OqMdVt/DBBx/c+qxRa0x1NXvCoG5XB7F2c6h1pJJPfXaCmQmwt6Xu+1IyYenrSwmFfuyP77+7\nt89c6PMX6jld/zzQ140+e6XvJlfrRP8Z6nX8veRg+HQGAAAADJNQOIF6pbA6DT/yIz+SZHWN5NWr\nV5OsugRVvbt69epWF6I6Bq+++mqSVULhueeeS5I888wzSXZfbw3cG/16wqrKLx2rmr+0N3zdv9fz\n+jWMfa3p12fXse8YUXqnwbXRcHf6nIJ+TtXt6gbWOdqTS3W7z0fqk9LPnz+/lVSszwv1nJqNULMS\n+rG/56WOJLA/65IJSzMUlmYh9F0f+uM+biZDTwwszUraa4eIZPduD/2zS08o9NkJ/WiGwt2RUAAA\nAACGSSicQFXtr6peVfsqdVDXO9bt6kBW1e7hhx/emuBcnYdKNVTa4eLFi0mSJ598Msnu6aqueYR7\noycT6nrkfi1knff9usbqKta8lEoT1LHmp7z11ltbj62Kf39svWa/zrJ/70pFlLrdEwvA3emJhdL3\niO+zFOp2n/Le56ScP39+a+5Cnfe1Hrz++utJVmnIWqMqudA/q/SOY91vSjvsbb8zE9Z163vasB9r\nHTiIhMLSjhE9mdBTkv3zRa0PS99n6d+BdeTOSCgAAAAAwyQUTqCq7tVODUvVuqo4Vvewqns3btzY\n+nN1Gi5fvpwkeeqpp5Ikn/nMZ5KsJkAvXesEHK7q8tU5VwmFUud97zSWmqFSE9r7xPa63vnNN9/c\neu16jVof+syEft116ddIV+ehkg99RgNwZ/o5VOdeTxj03V9qN4ela6f3mqFQnyn6DjF9anslE/p7\n7EmFflzaBUaHkZOq/7+/LqnQj31WQk8i1O/w+jzQPz+sSyicPn168bF1Xvf30D8XLCUJ+hq0NJtB\nEuFgKSicQHWyVYx4KdJUHyTq6/WXhevXr2/FnOsEf/rpp5Mkly5d2nG7hjT27eOAe6M+jPetG/tA\ns/5Lt75e28YuFQWq4PDWW29trSnb487J6i8QtR7U/fU9q7i5fWvaZPe64ZIpOBpLH7qXBiaWc+fO\nbf1lo19WWWvLtWvXkqzWjT5EbWk4ay841NFfEDjp1m0L28+VfolTnaP9d3f/Hd7P6XVbQm///ksD\nYutzRDUSekOhFxbqc0I/1meTpe1n++eKvs74nDHGJQ8AAADAMAkFdlUHe+WyqnuvvPJKkuT3f//3\n8/zzzydZdRjqkodnn302SbaGMFXVUocRjkbvHPbb1VGo6n2d09WpKL1rUB2Iuv3ee+/tihrWa1Ta\nqS6BqC5HqfWhvnfvQCx1EIA7s24YW53XNYC5toauc7g6l3W7OpZ13D4ArQ9Dq/O67q/zub5nJZRq\nPajH1+OW4tuSCfDxltI8dS72Sxl6EqEueerHPqS1XxJVt7f/bu9bUvfPAaWeU49fGjRdf1fpCcd+\nrHWmf3+fL+6OhAIAAAAwTEKBXZ2Kfs11dShefPHFJMl3vvOdrS3kqvNYwxhr+8iqci5d4wjcW70j\nsVSNr3WgOhZ9SON+LD1nKS3ROxQ9meCaRjgY/ff90mC06vbVvKRKKNTza4voOta52geynjp1ale3\nsj92KaHQZ6j0bSKXhqtJKsCGdb8z++/7PkOtzuNKKPTz/rHHHtvx9aVZS3WsVMDNmzd3zTjoyYRa\nJ2pdKH24e71mPb+OPZHQj307ajMU7o6EAgAAADBMQoFduztUVa66BK+99lqSVULhypUrW9XLZ555\nJslqm8gnn3wyyarSV9tA2SYSjlZPIvSkQk8wLG0jVV/f61rM3jHsO0f0HSZ6YqEf+8wVHQO4O+vO\n77pd3btKKNTzqvtXacSeNqhrqasjed999219tqjrsuv8rq5ondfVOazPDX0d6DNa7OoA+7NuR5Q+\nQ6E+49eslAsXLiRZbQX/xBNP7DjWLIU6x/v20n1nl7fffnvrPK9jrSF13td6UAmGsrStdL12/d1l\naVZC3d7vLjLsj4QCAAAAMExCgV370FbVrl9DeeXKlSQbe8VXMuFzn/tckuTixYtJVlXKXhlU6YPj\noScVls7NpWTCx+nP6XpCodaapdkJkk1wOPrv/b4TQ11/XDOU6va1a9eS7N4lpq61rg5mJRWmadp1\nXXad132Xh/oe1WEsfY0yKwEOx9KMlT5joe/gVAmEWgf6sb5erzfP866EYt/lob5nT0XW8/oMhTr2\n2Qn9c0b/fLG00x1jJBQAAACAYRIKbOlVwKrmVVKhdnY4c+ZMvvjFLyZJvvSlLyXZvbtDTyao+DGq\nX3+/NJW8qtjcmd7t69dS93/PffeH7ddc94p/rQP9sb1DsNQZuJMdJljuOvdzB9ZZmoDe94C/ceNG\nktXnhFpPbty4sZVyrG5mXTP9yiuvJEneeOONHa9R68JSEkEyAQ7GUte/zydYOtb5X8f+O6b/Ltpr\nd6mlnaX6ed4TjutmLy2tXWYlHA4JBQAAAGCY1h67VJWwrn365Cc/mSS5dOlSko1rp370R380yWp3\nh7o+ql/zrPLHnVpKHixVmXWt7sz2aezJ8vT3Pv25jnWO33///VvXTfd95PtU5T4zof83rOs0+7wH\n9mfpetfeAYKur6tL+h7xPaFQ5/apU6d27f7SEwqvv/56ktW6UR3Ffj232QlwsNYlFJbmEvRkwlJC\noScbt6cSeyqyJxn7eb7fXaGWvr6UTOh/T/H3ljsjoQAAAAAMk1Bgl+o8Vrexdm549tlnk2x0vZ57\n7rkkq67l9evXk6yms1Z1E+5UTygsTfqt22Yp3Jneve5d7Lrd96WuY3UTPvGJT2zNW1m6rrqO1eWo\ndaL+G9b3rM66TuSdqX9v9d+2/n3Wsc8ngf2qc7W6gf1c758Fbt++vavrWQmFl19+OUly9erVHa9R\nj1+aowPcnd6d73ON+gyFSiqsSyj0zxE9JdfnLCWr87oe25MK/T33pEJPJvSfZV1SYYmkwhirMwAA\nADBMS49dFcpeJbxw4UKSVUfy9OnTWzMT+qTnOsLdWkoc1P+fvXpc1WfG9C720s4AlUaqdaCSS/W8\nW7du7brushIJ9VrV3ejXa/ZrpnXS787S9av+vbJkv924/nmhzulKJNQ5X959992tr9WxUgxXrlxJ\nskoo9BkKpc9OqPcgwQRj+rnTu/V1Xtfv8J5M6CnEpRkK2z8XbD/utcvD0q5E/Xxft1vDaDJBAuFg\n+VQBAAAADJNQYNe+0nW7KpF7qUpiPbaqj3BQehe1/z/XO+jcmaWJyr0r2LvcNVOhkgtnz57d1SGo\n/1bVkazX6B2H/j110O/O0l7gS/+tYZ2lSej9uuX+OWJ7QqESCHWs+6u72a+vXprCDtwb63ZCWJpH\nsG4nheTufw+tWxfs3nBv+dQGAAAADJNQYFenwbXoAAAArCOhAAAAAAybXFMCAAAAjJJQAAAAAIYp\nKAAAAADDFBQAAACAYQoKAAAAwDAFBQAAAGCYggIAAAAwTEEBAAAAGKagAAAAAAxTUAAAAACGKSgA\nAAAAwxQUAAAAgGEKCgAAAMAwBQUAAABgmIICAAAAMExBAQAAABimoAAAAAAMU1AAAAAAhikoAAAA\nAMMUFAAAAIBhCgoAAADAMAUFAAAAYJiCAgAAADBMQQEAAAAY9v8BRV8LWznPW9MAAAAASUVORK5C\nYII=\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nRK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["KL divergenvce\n","2.8164864665846263\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FUuoJeZqqcWv","colab_type":"text"},"source":["Evaluate the model on the whole test data"]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"c3be221d-1647-4f28-85a6-1435cd342cac","executionInfo":{"status":"ok","timestamp":1568049841403,"user_tz":-60,"elapsed":122213,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":884}},"source":["kl = np.zeros(len(x_test))\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    preprocessed_input = sorted_x[border[i]:border[i+1]]\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=True)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (980, 32)\n","weights shape (980, 32)\n","weights shape (980, 64)\n","weights shape (980, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|█         | 1/10 [00:19<02:53, 19.23s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 1\n","weights shape (1135, 32)\n","weights shape (1135, 32)\n","weights shape (1135, 64)\n","weights shape (1135, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|██        | 2/10 [00:32<02:18, 17.36s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 2\n","weights shape (1032, 32)\n","weights shape (1032, 32)\n","weights shape (1032, 64)\n","weights shape (1032, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|███       | 3/10 [00:43<01:49, 15.57s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 3\n","weights shape (1010, 32)\n","weights shape (1010, 32)\n","weights shape (1010, 64)\n","weights shape (1010, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|████      | 4/10 [00:54<01:25, 14.20s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 4\n","weights shape (982, 32)\n","weights shape (982, 32)\n","weights shape (982, 64)\n","weights shape (982, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|█████     | 5/10 [01:05<01:05, 13.15s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 5\n","weights shape (892, 32)\n","weights shape (892, 32)\n","weights shape (892, 64)\n","weights shape (892, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|██████    | 6/10 [01:15<00:48, 12.16s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 6\n","weights shape (958, 32)\n","weights shape (958, 32)\n","weights shape (958, 64)\n","weights shape (958, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|███████   | 7/10 [01:26<00:36, 12.05s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 7\n","weights shape (1028, 32)\n","weights shape (1028, 32)\n","weights shape (1028, 64)\n","weights shape (1028, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|████████  | 8/10 [01:39<00:24, 12.15s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 8\n","weights shape (974, 32)\n","weights shape (974, 32)\n","weights shape (974, 64)\n","weights shape (974, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r 90%|█████████ | 9/10 [01:50<00:11, 11.83s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 9\n","weights shape (1009, 32)\n","weights shape (1009, 32)\n","weights shape (1009, 64)\n","weights shape (1009, 64)\n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|██████████| 10/10 [02:01<00:00, 11.68s/it]\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"I6_q3xKFD7-n","colab_type":"text"},"source":["create ground truths"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","outputId":"461c1cc7-4cc5-4ed9-fe75-6cad6be52e28","executionInfo":{"status":"ok","timestamp":1568049973677,"user_tz":-60,"elapsed":6585,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = np.expand_dims(x_comb_gt, axis=-1)\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQUAAAD8CAYAAAB+fLH0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAE/9JREFUeJzt3W/sXmV9x/H3p/1R/hShLX+a2rJR\nY6MhSxykcRB9YEQzZEZ4YJzExcaw9Anb0Jlo2R4Qn2liVMwMW+M/XAzIkIyGGJVVlm0P1tkOh0BF\nOh3SplAQaJE/paXfPbjPF+/r4j69f73/nbv4eSXN9TvnPvc51+/A73t9z3Vd5xxFBGZmaUnXFTCz\n+eKgYGYFBwUzKzgomFnBQcHMCg4KZlZwUDCzwlSCgqQrJD0saY+kLdM4hplNhyY9eUnSUuDnwHuB\nvcCPgWsi4qGJHsjMpmJhCvt8O7AnIn4BIOk24CqgNShI8rRKs+l7KiLOG7bRNC4f1gKP9S3vbdYV\nJG2WtFPSzinUwcxe69HFbDSNTGFRImIrsBWcKZjNk2lkCvuAC/qW1zXrzOwkMI2g8GNgg6T1kpYB\nHwa2TeE4ZjYFE798iIijkv4C+AGwFPh6RDw46eOY2XRMfEhypEq4T8FsFnZFxMZhG3lGo5kVHBTM\nrOCgYGYFBwUzKzgomFnBQcHMCg4KZlZwUDCzgoOCmRUcFMys4KBgZgUHBTMrOCiYWcFBwcwKDgpm\nVnBQMLOCg4KZFRwUzKzgoGBmBQcFMys4KJhZwUHBzAoOCmZWcFAws4KDgpkVHBTMrOCgYGYFBwUz\nKzgomFlh5KAg6QJJ90p6SNKDkq5v1q+SdI+kR5py5eSqa2bTNk6mcBT4ZERcBFwKXCfpImALsD0i\nNgDbm2UzO0mMHBQiYn9E/Hfz83PAbmAtcBVwS7PZLcDV41bSzGZnIn0Kki4ELgZ2AKsjYn/z0ePA\n6kkcw8xmY2HcHUg6E/gu8PGIOCTp1c8iIiRFy/c2A5vHPb6ZTdZYmYKkU+gFhG9HxJ3N6ickrWk+\nXwMcGPTdiNgaERsjYuM4dTCzyRpn9EHA14DdEfGFvo+2AZuanzcBd41ePTObNUUMzO6Hf1F6J/Dv\nwE+BY83qv6HXr3A78HvAo8CHIuLpIfsarRJmdiJ2LSYzHzkoTJKDgtlMLCooeEajmRUcFMys4KBg\nZgUHBTMrOCiYWcFBwcwKDgpmVnBQMLOCg4KZFRwUzKzgoGBmBQcFMys4KJhZwUHBzAoOCmZWcFAw\ns4KDgpkVHBTMrOCgYGYFBwUzKzgomFnBQcHMCg4KZlZwUDCzgoOCmRUcFMys4KBgZgUHBTMrOCiY\nWcFBwcwKYwcFSUsl3Sfp7mZ5vaQdkvZI+o6kZeNX08xmZRKZwvXA7r7lzwFfjIg3A88A107gGGY2\nI2MFBUnrgD8BvtosC3g3cEezyS3A1eMcw8xma9xM4UvAp4BjzfI5wLMRcbRZ3gusHfMYZjZDIwcF\nSe8HDkTErhG/v1nSTkk7R62DmU3ewhjffQfwAUlXAqcBZwE3ASskLTTZwjpg36AvR8RWYCuApBij\nHmY2QSNnChFxQ0Ssi4gLgQ8DP4qIjwD3Ah9sNtsE3DV2Lc1sZqYxT+HTwF9L2kOvj+FrUziGmU2J\nIrrP3H35YDYTuyJi47CNPKPRzAoOCmZWcFAws4KDgpkVHBTMrOCgYGYFBwUzKzgomFnBQcHMCg4K\nZlZwUDCzgoOCmRUcFMys4KBgZgUHBTMrOCiYWcFBwcwKDgpmVnBQMLOCg4KZFRwUzKzgoGBmBQcF\nMys4KJhZwUHBzAoOCmZWcFAws4KDgpkVHBTMrOCgYGaFsYKCpBWS7pD0M0m7JV0maZWkeyQ90pQr\nJ1VZM5u+cTOFm4DvR8RbgbcBu4EtwPaI2ABsb5bN7CShiBjti9LZwE+AN0XfTiQ9DLwrIvZLWgP8\na0S8Zci+RquEmZ2IXRGxcdhG42QK64EngW9Iuk/SVyUtB1ZHxP5mm8eB1WMcw8xmbJygsABcAtwc\nERcDz1NdKjQZxMAsQNJmSTsl7RyjDmY2YeMEhb3A3ojY0SzfQS9IPNFcNtCUBwZ9OSK2RsTGxaQz\nZjY7IweFiHgceExS9hdcDjwEbAM2Nes2AXeNVUMzm6mFMb//l8C3JS0DfgF8jF6guV3StcCjwIfG\nPIaZzdDIow8TrYRHH8xmYeqjD2b2OuSgYGYFBwUzKzgomFnBQcHMCg4KZlZwUDCzgoOCmRUcFMys\n4KBgZgUHBTMrOCiYWcFBwcwKDgpmVnBQMLOCg4KZFRwUzKzgoGBmBQcFMys4KJhZwUHBzAoOCmZW\ncFAws4KDgpkVHBTMrDDua+PM5p6kie1rHt6oNm3OFMys4EzBXnfqzKAtUzheBtGWEeR32j5/PWQS\nzhTMrOBMwU56bZlBXQ7bvl/d4rctD8sMTsbMYaxMQdInJD0o6QFJt0o6TdJ6STsk7ZH0HUnLJlVZ\nM5s+jRrJJK0F/gO4KCJelHQ78D3gSuDOiLhN0t8D/xMRNw/Z18kXTq0zi80MlixZctz1bfuD12YC\n45b1fjuyKyI2Dtto3D6FBeB0SQvAGcB+4N3AHc3ntwBXj3kMM5uhkfsUImKfpM8DvwJeBH4I7AKe\njYijzWZ7gbVj19KM9oygzgDqcunSpcf9vH//bS39sWPHTqic84zhuEbOFCStBK4C1gNvBJYDV5zA\n9zdL2ilp56h1MLPJG2f04T3ALyPiSQBJdwLvAFZIWmiyhXXAvkFfjoitwNbmu/MbNq1zwzKDzATq\ncmFhoSjbtjten0K2/K+88kpRHj16dOD6uqwzh1xuO948GKdP4VfApZLOUO+sXg48BNwLfLDZZhNw\n13hVNLNZGnn0AUDSZ4A/BY4C9wF/Tq8P4TZgVbPuzyLi8JD9zE+YtLnRliG0tfinnHIKAMuWLRu4\nnGWdQfSPUtQtemYEdXnkyJGBZdv2dcax2NGKCVvU6MNYk5ci4kbgxmr1L4C3j7NfM+uOZzTa3Fls\nhpCZQJannnoqAKeddhoAp59+erGcZZ059I9G1H0AdSZw+PDhonzppZeKMrd7+eWXizIzhlSPVtS6\n7GNwULC50TYpqe5QrC8L8o8/yzPOOAOAM888syiXL19ebJdBpP8yIv8YM83PP+oMAi+++GJRvvDC\nCwPL/DzrnN/P36ktSOTxh914NU2+IcrMCs4UbO60ZQjZotcZQmYAmRGsWLECgLPPPhuAs846qygz\nk8gyM4+lS5e+2jJnS15nCJkJ/OY3vwHgueeeK8pDhw4VdXz++eeL32WxD3xpu6yYBWcKZlZwpmCd\nGzZduc4QssMwM4TMAFauXAnAqlWrBpaZQbzhDW8AXtsR2T/tue5YrDOEzAgOHjwIwLPPPlvsK9cv\nNkOohyT7t591v4IzBTMrOFOwubHYvoRsjes+hMwIzj///KI899xzi8/rvoXc3/H6FDJTyL6DzAye\neeaZYl85olHfhFVru9Fq0GSmWY9EOFMws4IzBeuUpKE3OtWTk7IvIfsGMlM477zzAFi9enVRZsZQ\nZwqZafRPf67nKWSmkKMI2aeQx866ZLaRda0zhDojqG+oarsFu3/q9aw4UzCzgjMF69ykRh3OOecc\n4LcZQ923kNvl93L0Ifff36eQLXXOaMxj1rMi65us6uv/+lbrzDxyv/U06vocRIQzBTPrljMF60R/\nP0LbjU/Z+uZ1ej3qcKLzE3L7bO3rex8GzQ2ob7OuH9hS9x1kZlDPc6hvnKrL3G/d19B/fuq6TYsz\nBTMrOFOwzg0bdcgMIecC1H0KeY9DZgT1zMW2OQT1nIRBcpusW9Yp+xTaMoO8VyJHLep7JPJ3yjrl\n9+o+hS7ugXCmYGYFZwrWqf5r5hO9KzIzgcwY6rkDuX227tnqZ89/PdLQ39PfNiKS2jKH+hkObc9y\nqOc11H0V/f0IntFoZp1ypmCdGDT6MOwJS219C21zCPL7Ka/766cq1Q9d7a9Lna0MGqkYtF39NKi6\nD6HOENpecbfY5y9MkjMFMys4U7CZGtTyDetTaHsga/0EpfrBrLm/+gUt9XMWszxy5Mir/QtZhzx2\n3eLnMWptcyzqsu0FNSf6hKZpcKZgZgVnCtap490lWbe2dd9CW1lf92eGkLMH67kDuXz48OFXM4Xc\nR2YIdX9EvV09atH2wpq2V9YNK2fJmYKZFZwpWOeGvTC27tnPMq/323r0U7bq2dpnxlA/d/Gll156\nddvcV/89CIPqVh+jnkvQZd/AqJwpmFnBmYJ14nh3SQ4bjaj7Goa9ar7uB6ifcdD/TIO6pa8zhrYn\nJA0r0zy9cr6NMwUzKzhTsLnT9k7JtvsR2nr0h2Uag9ZnS15/1jZa0PZU5npuRFtZP6Fpxq+mH2ho\npiDp65IOSHqgb90qSfdIeqQpVzbrJenLkvZIul/SJdOsvJlN3mIyhW8Cfwd8q2/dFmB7RHxW0pZm\n+dPA+4ANzb8/Am5uSrOJa+vprzOH3K4etciZkNlK9z+jsZ6nkN/JfdTZTD3CUb+KPp+XUN9nUWcI\nbaMYszQ0U4iIfwOerlZfBdzS/HwLcHXf+m9Fz38CKyStmVRlzWz6Ru1TWB0R+5ufHwdWNz+vBR7r\n225vs24/FUmbgc0jHt9eJ/qfYdDWWraNGtTL9ffqZx5kK593U+b2ud3LL7/8mj6F+nkJ9d2SbRlC\nzoXI+ypyeVjG0PamqFkau6MxIkLSCdc8IrYCWwFG+b6ZTceoQeEJSWsiYn9zeXCgWb8PuKBvu3XN\nOrPCoBawbh3r5x/WrXH9DoUss/WtM4bsF0jZL5Ctf/9dkvX9F/VzD1LbOyfzfoos64why7Z7KvrP\nz8ny3odtwKbm503AXX3rP9qMQlwKHOy7zDCzk8DQTEHSrcC7gHMl7QVuBD4L3C7pWuBR4EPN5t8D\nrgT2AC8AH5tCne11pL9PYdiMw/o6vW6VczlHFep3UGY/Qf0shP53LrQ9PTmziroPIeuS908cOnSo\nKPNOzPw861j3MdT9Il2OQgwNChFxTctHlw/YNoDrxq2U/W5pm/iTfyh1MKhvfc4/wPolL/WQZH2j\nVH1T05IlS1qnM9ePcMu65LHzlfRPP/10sZyvrK9v087fKX/HtiHKQR2x0+ZpzmZW8DRnm6m6tRt0\n+ZCtZj28l6l3trrZCuflQj1cmPvNVL/OIFJ/VlC32G0vecnLgYMHDwLw61//uiifeuqpoo6ZUdSX\nD/k7tmUocznN2cx+tzhTsE4dL1OoOxjzejxb5/ohqnUGUHcG1o9+r4cX+zOFthfEZh2y5c9MIPsS\nMkOo+xbqDse2x8sPmrx0sgxJmtnrlDMF61zbkGS2ptmyZyudmUGurzOEetRi2Itm07Fjx15z7LZH\nt9X9GllmZtA2+tA23fl4k5dmzZmCmRWcKVgnBk3jbZunUL+mve3FKXUrn617Zgr1bdD1g1MionXk\no54gVc+RyH6OevJS26Slekp2241QHn0ws845U7DODcsUslXNzCBb7XrqcZ1Z5HY507F+aUz9WLf+\nPoX6Zqts6eup1ZkJtJX1DVBtGcI89CUkZwpmVnCmYJ0a1DLWGUP20Lc9Cr7ONOr7E9peDlu/Xm5Q\nn0LbKER9U1a9vh5lqOclDHuoikcfzGxuOFOwubPYPoa2V7K13bdQv17ueKMPdf9E3fLXmUPdZ7DY\nx67Nw+PXas4UzKzgTME61/ao9mEvWmm7T6Gev5Dye20zIfszhbaZjfVynQnUfQbz9EDWxXKmYGYF\nzUPEkvQk8DzwVNd1aXEurtso5rVu81ovmG7dfj8izhu20VwEBQBJOyNiY9f1GMR1G8281m1e6wXz\nUTdfPphZwUHBzArzFBS2dl2B43DdRjOvdZvXesEc1G1u+hTMbD7MU6ZgZnNgLoKCpCskPSxpj6Qt\nHdbjAkn3SnpI0oOSrm/Wr5J0j6RHmnJlh3VcKuk+SXc3y+sl7WjO3XckLRu2jynVa4WkOyT9TNJu\nSZfNy3mT9Inmv+cDkm6VdFpX503S1yUdkPRA37qB56l5/eKXmzreL+mSWdSx86AgaSnwFeB9wEXA\nNZIu6qg6R4FPRsRFwKXAdU1dtgDbI2IDsL1Z7sr1wO6+5c8BX4yINwPPANd2Uiu4Cfh+RLwVeBu9\nOnZ+3iStBf4K2BgRfwAsBT5Md+ftm8AV1bq28/Q+YEPzbzNw80xqmI+Q7uofcBnwg77lG4Abuq5X\nU5e7gPcCDwNrmnVrgIc7qs+65n+adwN3A6I30WVh0LmcYb3OBn5J00fVt77z8wasBR4DVtGb1n83\n8MddnjfgQuCBYecJ+AfgmkHbTfNf55kCv/2PlvY26zol6ULgYmAHsDp++/bsx4HVHVXrS8CngHwL\n6jnAsxFxtFnu6tytB54EvtFc2nxV0nLm4LxFxD7g88CvgP3AQWAX83HeUtt56uRvYx6CwtyRdCbw\nXeDjEXGo/7PoheyZD9lIej9wICJ2zfrYi7AAXALcHBEX05uyXlwqdHjeVgJX0QtcbwSW89r0fW50\ndZ76zUNQ2Adc0Le8rlnXCUmn0AsI346IO5vVT0ha03y+BjjQQdXeAXxA0v8Bt9G7hLgJWCEp73bt\n6tztBfZGxI5m+Q56QWIeztt7gF9GxJMRcQS4k965nIfzltrOUyd/G/MQFH4MbGh6g5fR6wTa1kVF\n1LvX9mvA7oj4Qt9H24BNzc+b6PU1zFRE3BAR6yLiQnrn6EcR8RHgXuCDHdftceAxSW9pVl0OPMQc\nnDd6lw2XSjqj+e+bdev8vPVpO0/bgI82oxCXAgf7LjOmZ9YdPy0dL1cCPwf+F/jbDuvxTnqp2/3A\nT5p/V9K7dt8OPAL8C7Cq4/P1LuDu5uc3Af8F7AH+CTi1ozr9IbCzOXf/DKycl/MGfAb4GfAA8I/A\nqV2dN+BWen0bR+hlWNe2nSd6Hclfaf4ufkpvBGXqdfSMRjMrzMPlg5nNEQcFMys4KJhZwUHBzAoO\nCmZWcFAws4KDgpkVHBTMrPD/Fa0x6yqE25QAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"eb0ade43-4994-4825-bb77-4e63fd4f977e","executionInfo":{"status":"ok","timestamp":1568049989151,"user_tz":-60,"elapsed":3612,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["kls = np.zeros((len(sorted_x_gt)))\n","for i in range(0, 10):\n","  gts = sorted_x_gt[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  temp = []\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    temp.append(kl)\n","    kls[border[i]+j] = kl\n","  print(i, \" class mean: kl\", np.mean(temp))\n","print(\"KL divergenvce\")\n","print(kls.mean())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0  class mean: kl 2.6166919623130136\n","1  class mean: kl 2.9407036103251154\n","2  class mean: kl 2.7529772563066333\n","3  class mean: kl 2.6661128413079958\n","4  class mean: kl 2.6787965819898445\n","5  class mean: kl 2.6677276241781294\n","6  class mean: kl 2.688181574995097\n","7  class mean: kl 2.7684204477448118\n","8  class mean: kl 2.544551381948646\n","9  class mean: kl 2.761767884730566\n","KL divergenvce\n","2.713232551413429\n"],"name":"stdout"}]}]}