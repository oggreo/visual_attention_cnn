{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_scnn_exp2_parameters_of_scnn","version":"0.3.2","provenance":[{"file_id":"1wTkqln-Mdo_VsWQeYtrdM2q1NbgXNUB1","timestamp":1566557728494},{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566418130179},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"dm2wSqJvpjGf"},"source":["# TPUs in Colab\n","\n","This notebook provides an introduction to computing on a [TPU](https://cloud.google.com/tpu/) in Colab. In this notebook you will connect to a TPU, run some basic TensorFlow operations on the TPU, and print out the speed of the TPU as measured in teraflops."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_pQCOmISAQBu"},"source":["## Enabling and testing the TPU\n","\n","First, you'll need to enable TPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select TPU from the Hardware Accelerator drop-down\n","\n","Next, we'll check that we can connect to the TPU:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"71iSWtsXe36x","outputId":"f447f46d-45ad-425b-9ff7-9efa614f2b1b","executionInfo":{"status":"ok","timestamp":1566560468106,"user_tz":-60,"elapsed":4795,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import os\n","import pprint\n","import tensorflow as tf\n","\n","if 'COLAB_TPU_ADDR' not in os.environ:\n","  print('ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!')\n","else:\n","  tpu_address = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","  print ('TPU address is', tpu_address)\n","\n","  with tf.Session(tpu_address) as session:\n","    devices = session.list_devices()\n","    \n","  print('TPU devices:')\n","  pprint.pprint(devices)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"c5d9ea50-d045-4ede-cfa1-2a1b80b9b9a5","executionInfo":{"status":"ok","timestamp":1566563886110,"user_tz":-60,"elapsed":5135,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    # utility function to normalize a tensor by its L2 norm\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    # img = image.load_img(img_path, target_size=(224, 224))\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        # print(\"K.one_hot\", K.eval(K.one_hot([category_index], nb_classes)))\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    # model = Sequential()\n","    # model.add(input_model)\n","    # nb_classes = 1000\n","    # print(\"category_index\", category_index)\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # if not \"lambda\" in input_model.layers[-1].name:\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # input_model.pop_layer()\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # target_layer = lambda x: target_category_loss(x, category_index, nb_classes)\n","        # target_layer = lambda x: tf.math.multiply(x[0], one_hot)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # print(\"name of the last layer\", input_model.layers[-1].name)\n","    # print(\"input_model.layers[-1].output\", input_model.layers[-1].output)\n","    loss = K.sum(input_model.layers[-1].output)\n","    # print(\"loss\", loss)\n","    # conv_output =  [l for l in model.layers[0].layers if l.name is layer_name][0].output\n","    # print([l.name for l in input_model.layers])\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \"\"\"\n","    dense_output = input_model.layers[-2].output\n","    final_output = input_model.layers[-1].output\n","    fin_out_manual = tf.math.multiply(input_model.layers[-2].output, one_hot)\n","    \"\"\"\n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","    \n","    # print(\"number of all zero map\", count)\n","    # print(\"dense output\", dense_output)\n","    # print(\"final output\", final_output)\n","    # print(\"fin out manual\", fin_out_manual)\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    # print(\"one_hot * dense_output\", one_hot_num * dense_output)\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    # cam = cv2.resize(cam, (224, 224))\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    #Return to BGR [0..255] from the preprocessed image\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        # print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        # (img_num, 112, 112, 32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    # this is slow af\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        print(\"output shape\", output.shape)\n","        # print(\"cam shape\", cam.shape)\n","        print(\" \")\n","        # (img_num, 112, 112, 32)\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        # self.output_dim = output_dim\n","        self.k = k\n","        # @TODO randome intialize\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        # p, h, w, c = tf.shape(x)\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        # x (p, h, w, c)\n","        print(\"x\", x)\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        print(\"global_average\", global_average)\n","        # x_sort_arg = self.top_k(global_average, k=K.int_shape(global_average)[-1]) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        print(\"x_sort_arg\", x_sort_arg)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        print(\"boosted_x\", boosted_x)\n","        # boosted_x_arg = np.argsort(boosted_x)\n","        # boosted_x_arg = self.top_k(boosted_x, k=K.int_shape(boosted_x)[-1]) # (p, c)\n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        # print(\"boosted_x_arg\", boosted_x_arg)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        print(\"x\", x)\n","        print(\"spx\", spx)\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        print(sparse_mtx)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        self.duty = duty\n","        print(\"duty\", duty)\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        # x_shape = tf.shape(x, out_type=tf.int64)\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS # 2\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        # assert isinstance(input_shape, list)\n","        return input_shape\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"9bc0a7dd-6ae6-40db-b32b-17d42a89c480","executionInfo":{"status":"ok","timestamp":1566560469002,"user_tz":-60,"elapsed":5576,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 4/pAEP2FlsxHMIP0_H7Q1xreW48rdKrZpU1vAMW0v2Svz12lmNfX-7dI8"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"931a5799-b0f6-4dc4-ed04-3d4c5b0bb514","executionInfo":{"status":"ok","timestamp":1566563944167,"user_tz":-60,"elapsed":42336,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["#\"\"\"\n","trainfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/train_dataset.npz\")\n","\n","x_train = trainfile[\"arr_0\"]\n","print(x_train.shape)\n","y_train = trainfile[\"arr_1\"]\n","print(y_train.shape)\n","# \"\"\"\n","testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(60000, 112, 112, 1)\n","(60000, 10)\n","(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["ratio = [0.4, 0.4, 0.6, 0.8]  # exp1\n","ratio = [0.2, 0.2, 0.3, 0.4]  # exp2\n","ratio = [0.2, 0.2, 0.6, 0.8]  # exp3\n","ratio = [0.1, 0.1, 0.6, 0.8]  # exp4\n","\n","ratio = [0.2, 0.4, 0.6, 0.8]  # exp5\n","ratio = [0.1, 0.4, 0.6, 0.8]  # exp6\n","\n","ratio = [0.6, 0.4, 0.6, 0.8]  # exp7\n","\n","ratio = [0.8, 0.4, 0.6, 0.8]  # exp8\n","\n","ratio = [0.5, 0.4, 0.6, 0.8]  # exp9"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","outputId":"9475040f-f03a-4cb4-9bb2-c4be1e872fed","executionInfo":{"status":"ok","timestamp":1566564049341,"user_tz":-60,"elapsed":1345,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","\n","# model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=\"relu\", name='conv_1'))\n","model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=None, name='conv_1'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[0]), 1.5, 32, name=\"sparse_1\"))\n","# model.add(Activation(\"relu\", name=\"relu_1\"))\n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', activation=None, name='conv_2'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=\"relu\", name='conv_2'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[1]), 1.5, 32, name=\"sparse_2\"))\n","# model.add(Activation(\"relu\", name=\"relu_2\"))\n","\n","model.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","# model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_3'))\n","model.add(KW(round(64*ratio[2]), 1.5, 64, name=\"sparse_3\"))\n","# model.add(Activation(\"relu\", name=\"relu_3\"))\n","\n","# model.add(Conv2D(64, kernel_size=3, activation=\"relu\", name='conv_4'))\n","model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_4'))\n","model.add(KW(round(64*ratio[3]) , 1.5, 64, name=\"sparse_4\"))\n","\n","model.add(Flatten())\n","model.add(Dense(10, name='dense_1'))\n","model.add(Activation(\"softmax\", name=\"softmax\"))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0823 12:40:48.144361 140430147393408 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","W0823 12:40:48.219666 140430147393408 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0823 12:40:48.239411 140430147393408 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","W0823 12:40:48.274140 140430147393408 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["x Tensor(\"max_pooling2d_1/MaxPool:0\", shape=(?, 56, 56, 32), dtype=float32)\n","global_average Tensor(\"sparse_1/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_1/TopKV2:1\", shape=(?, 16), dtype=int32)\n","x_shape Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack:0\", shape=(?, 16, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_1/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_1/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_1/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack_1:0\", shape=(?, 16, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_1/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_1/MaxPool:0\", shape=(?, 56, 56, 32), dtype=float32)\n","spx Tensor(\"sparse_1/BroadcastTo:0\", shape=(?, 56, 56, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_2/MaxPool:0\", shape=(?, 28, 28, 32), dtype=float32)\n","global_average Tensor(\"sparse_2/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_2/TopKV2:1\", shape=(?, 13), dtype=int32)\n","x_shape Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_2/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_2/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_2/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_2/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_2/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack_1:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_2/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_2/MaxPool:0\", shape=(?, 28, 28, 32), dtype=float32)\n","spx Tensor(\"sparse_2/BroadcastTo:0\", shape=(?, 28, 28, 32), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 26, 26, 64), dtype=float32)\n","global_average Tensor(\"sparse_3/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_3/TopKV2:1\", shape=(?, 38), dtype=int32)\n","x_shape Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack:0\", shape=(?, 38, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_3/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_3/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_3/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_3/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_3/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack_1:0\", shape=(?, 38, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_3/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 26, 26, 64), dtype=float32)\n","spx Tensor(\"sparse_3/BroadcastTo:0\", shape=(?, 26, 26, 64), dtype=float32)\n","x Tensor(\"conv_4/BiasAdd:0\", shape=(?, 24, 24, 64), dtype=float32)\n","global_average Tensor(\"sparse_4/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_4/TopKV2:1\", shape=(?, 51), dtype=int32)\n","x_shape Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_4/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_4/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_4/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_4/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_4/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack_1:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_4/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_4/BiasAdd:0\", shape=(?, 24, 24, 64), dtype=float32)\n","spx Tensor(\"sparse_4/BroadcastTo:0\", shape=(?, 24, 24, 64), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4hX-D1VnU_3r","colab_type":"code","outputId":"723764b0-4ede-43be-b9b5-b0f5702954a9","executionInfo":{"status":"ok","timestamp":1566564058958,"user_tz":-60,"elapsed":939,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":666}},"source":["model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model.summary()"],"execution_count":8,"outputs":[{"output_type":"stream","text":["W0823 12:40:58.171377 140430147393408 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","W0823 12:40:58.200076 140430147393408 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv_1 (Conv2D)              (None, 112, 112, 32)      320       \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","sparse_1 (KW)                (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","conv_2 (Conv2D)              (None, 56, 56, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","sparse_2 (KW)                (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","conv_3 (Conv2D)              (None, 26, 26, 64)        18496     \n","_________________________________________________________________\n","sparse_3 (KW)                (None, 26, 26, 64)        0         \n","_________________________________________________________________\n","conv_4 (Conv2D)              (None, 24, 24, 64)        36928     \n","_________________________________________________________________\n","sparse_4 (KW)                (None, 24, 24, 64)        0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 36864)             0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                368650    \n","_________________________________________________________________\n","softmax (Activation)         (None, 10)                0         \n","=================================================================\n","Total params: 433,642\n","Trainable params: 433,642\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b3DZfJWhIUhr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":258},"outputId":"68cf8c68-91b5-4ff1-b7eb-7e3a082a2d8d","executionInfo":{"status":"ok","timestamp":1566564190031,"user_tz":-60,"elapsed":129035,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=3, batch_size=32)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["W0823 12:41:01.263384 140430147393408 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","W0823 12:41:01.357295 140430147393408 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:986: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Train on 60000 samples, validate on 10000 samples\n","Epoch 1/3\n","60000/60000 [==============================] - 47s 791us/step - loss: 0.8110 - acc: 0.7125 - val_loss: 0.2962 - val_acc: 0.9034\n","Epoch 2/3\n","60000/60000 [==============================] - 39s 656us/step - loss: 0.2695 - acc: 0.9165 - val_loss: 0.1784 - val_acc: 0.9436\n","Epoch 3/3\n","60000/60000 [==============================] - 41s 678us/step - loss: 0.1590 - acc: 0.9515 - val_loss: 0.1471 - val_acc: 0.9545\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb81496b1d0>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"gm929llrIVvI","colab_type":"code","colab":{}},"source":["model.save_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_ratio9.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMkaGTZJU_6u","colab_type":"code","colab":{}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_ratio9.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"243086d1-3cd0-4907-b79f-83b7cb8f8d41","executionInfo":{"status":"ok","timestamp":1566564200584,"user_tz":-60,"elapsed":1091,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":387}},"source":["p = 9000\n","x = x_test[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  np.argmax(y_test[p]))\n","print(predicted_class.dtype)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 112, 112, 1)\n","[[8.8945199e-06 1.7118887e-07 1.9947670e-03 2.4927724e-05 1.4984346e-06\n","  1.1983526e-07 3.5037443e-13 9.9789965e-01 6.1422538e-09 6.9932874e-05]]\n","predicted_class 7\n","correct_class 7\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","colab":{}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=True)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"S5bTNMOXkimK","colab_type":"code","colab":{}},"source":["x_comb_gt /= np.sum(x_comb_gt)\n","print(np.sum(x_comb_gt))\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))\n","print(np.sum(combined))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fu1DQa2Q1bSC","colab_type":"text"},"source":["Create dataset"]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","colab":{}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","preprocessed_x_t.shape\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border\n","\n","numbers = {}\n","for i in range(0, 10):\n","  numbers[i] = sorted_x[border[i]:border[i+1]]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZkomth02qyK","colab_type":"text"},"source":["overlap 3"]},{"cell_type":"code","metadata":{"id":"sJ-hM6LA2G_U","colab_type":"code","colab":{}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jH55DKBG9cSR","colab_type":"code","colab":{}},"source":["del x_train\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap3.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap4.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap5.npz\"\n","# np.save(outfile, comb_x, comb_y, gt_x)\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap10.npz\"\n","\n","testfile = np.load(outfile)\n","sorted_x = testfile[\"arr_0\"]\n","sorted_y = testfile[\"arr_1\"]\n","gt_x = testfile[\"arr_2\"]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nUCnPEku_Rlw","colab_type":"code","outputId":"df10e9fd-275c-4477-9ce4-788271caab21","executionInfo":{"status":"ok","timestamp":1566564228368,"user_tz":-60,"elapsed":1397,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\"\"\"\n","sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","\"\"\"\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1033, 2052, 3069, 4084, 5050, 5982, 7001, 7997, 8982, 10000]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"5e1a3a82-602d-43a2-f92e-7912f9dd5bd7","executionInfo":{"status":"ok","timestamp":1566564307960,"user_tz":-60,"elapsed":77506,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["kl = np.zeros(10000)\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    preprocessed_input = np.expand_dims(sorted_x[border[i]:border[i+1]], axis=-1)\n","    # print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=True)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()"],"execution_count":14,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (1033, 32)\n","output shape (1033, 56, 56, 32)\n"," \n","weights shape (1033, 32)\n","output shape (1033, 28, 28, 32)\n"," \n","weights shape (1033, 64)\n","output shape (1033, 26, 26, 64)\n"," \n","weights shape (1033, 64)\n","output shape (1033, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|â–ˆ         | 1/10 [00:14<02:09, 14.39s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 1\n","weights shape (1019, 32)\n","output shape (1019, 56, 56, 32)\n"," \n","weights shape (1019, 32)\n","output shape (1019, 28, 28, 32)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 26, 26, 64)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|â–ˆâ–ˆ        | 2/10 [00:21<01:37, 12.16s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 2\n","weights shape (1017, 32)\n","output shape (1017, 56, 56, 32)\n"," \n","weights shape (1017, 32)\n","output shape (1017, 28, 28, 32)\n"," \n","weights shape (1017, 64)\n","output shape (1017, 26, 26, 64)\n"," \n","weights shape (1017, 64)\n","output shape (1017, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|â–ˆâ–ˆâ–ˆ       | 3/10 [00:28<01:14, 10.61s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 3\n","weights shape (1015, 32)\n","output shape (1015, 56, 56, 32)\n"," \n","weights shape (1015, 32)\n","output shape (1015, 28, 28, 32)\n"," \n","weights shape (1015, 64)\n","output shape (1015, 26, 26, 64)\n"," \n","weights shape (1015, 64)\n","output shape (1015, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|â–ˆâ–ˆâ–ˆâ–ˆ      | 4/10 [00:35<00:57,  9.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 4\n","weights shape (966, 32)\n","output shape (966, 56, 56, 32)\n"," \n","weights shape (966, 32)\n","output shape (966, 28, 28, 32)\n"," \n","weights shape (966, 64)\n","output shape (966, 26, 26, 64)\n"," \n","weights shape (966, 64)\n","output shape (966, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 5/10 [00:42<00:43,  8.75s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 5\n","weights shape (932, 32)\n","output shape (932, 56, 56, 32)\n"," \n","weights shape (932, 32)\n","output shape (932, 28, 28, 32)\n"," \n","weights shape (932, 64)\n","output shape (932, 26, 26, 64)\n"," \n","weights shape (932, 64)\n","output shape (932, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    | 6/10 [00:49<00:32,  8.18s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 6\n","weights shape (1019, 32)\n","output shape (1019, 56, 56, 32)\n"," \n","weights shape (1019, 32)\n","output shape (1019, 28, 28, 32)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 26, 26, 64)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   | 7/10 [00:54<00:22,  7.41s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 7\n","weights shape (996, 32)\n","output shape (996, 56, 56, 32)\n"," \n","weights shape (996, 32)\n","output shape (996, 28, 28, 32)\n"," \n","weights shape (996, 64)\n","output shape (996, 26, 26, 64)\n"," \n","weights shape (996, 64)\n","output shape (996, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  | 8/10 [01:02<00:14,  7.40s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 8\n","weights shape (985, 32)\n","output shape (985, 56, 56, 32)\n"," \n","weights shape (985, 32)\n","output shape (985, 28, 28, 32)\n"," \n","weights shape (985, 64)\n","output shape (985, 26, 26, 64)\n"," \n","weights shape (985, 64)\n","output shape (985, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 90%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 9/10 [01:09<00:07,  7.31s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 9\n","weights shape (1018, 32)\n","output shape (1018, 56, 56, 32)\n"," \n","weights shape (1018, 32)\n","output shape (1018, 28, 28, 32)\n"," \n","weights shape (1018, 64)\n","output shape (1018, 26, 26, 64)\n"," \n","weights shape (1018, 64)\n","output shape (1018, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [01:16<00:00,  7.37s/it]\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"f09fd6ea-af2f-47f1-abe9-018d8920bc13","executionInfo":{"status":"ok","timestamp":1566564314356,"user_tz":-60,"elapsed":1910,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":791}},"source":["plt.imshow(sorted_x[border[9]].reshape(112, 112), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[0][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[0][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[0][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[0][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[0], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nrqR9KlMSEPGckoCkPTtWLNJKwUhz/Hlx+PBhAHbv3g1A2bJlAVfb4O677wagb9++gCt/bisPrXBt\nKlISEPGckoCkPSsv1qBBg5DHLQHY+v/8sGPpbGej7Wg0f/zxB+AqDtl+Bit+qiQgIilLSUDSXqRD\nYzt06AC4z/ESTElAxHNKApKxsrOzY3atkiVLAq5mQSQtW7YM+T78CLVUpCQg4jklAZF/NWrUiMqV\nKwMwevTokOesboAdQ2bWrl0LQLt27QC3g3HNmjVA5ANUUomSgIjnlARE/lWpUiW6desGwPjx4wFX\nZdhWI4afYXDZZZcBMGTIkJDHX3vtNSA9ZiaUBEQ8pyQgGcs+x0d7aOjMmTMZOHBgyHtWrlwJQO3a\ntaO6htWqzO0g3FSiJCDiOSUByVhdunQB3C5Du8sfO3Ys8PU7d+7MOYvQ7ui5nWRs9Qp79uwJuFkF\n212YDpQERDynGoOS9mzu3ir/RtpLsHTpUsDdva1KUM2aNXNeY3UCbL1AJCNHjgRg0KBBAGzduvW0\n2p5IqjEoIoGUBCRjWCJ4/vnnAbjlllvyfc3vv/8egKFDhwIwa9YsAPbv35/vayeakoCIBFISkIxT\nqFAhwJ1D0KpVK8CdQmzPG6tANHHixJyTg2z336FDhwA4ePBgnFsdf5GSgDoBEU/o44CIBFInIOI5\ndQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIi\nnlMnIOI5dQIinkuJykIikjxKAiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKe\nUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg\n4jl1AiKe+z8LVeiRyQWhcwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","outputId":"4d3944ea-03b0-4e07-c7b0-f975569428d9","executionInfo":{"status":"ok","timestamp":1566560955803,"user_tz":-60,"elapsed":6879,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = x_comb_gt\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n8AAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"jz893l0N_rYu","colab_type":"code","colab":{}},"source":["plt.imshow(gt_x[0], cmap='gray')\n","plt.show()\n","np.sum(gt_x[0])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sEfuI3GpeRg5","colab_type":"code","colab":{}},"source":["results[0][0].shape\n","pmap = np.sum(pmaps[0][1:])\n","pmap /= np.sum(pmap)\n","np.sum(pmap)\n","print(np.where(kls == np.inf))\n","print(results[2][279][1:].shape)\n","test = results[2][279][1:]\n","test = np.sum(test, axis=0)\n","test /= np.sum(test)\n","print(test.shape)\n","plt.imshow(test, cmap='gray')\n","plt.show()\n","test.max()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"0737e5ef-3323-4391-d742-8e4e129935fc","executionInfo":{"status":"ok","timestamp":1566564329792,"user_tz":-60,"elapsed":4129,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["kls = np.zeros((10000))\n","temp = []\n","for i in range(0, 10):\n","  gts = gt_x[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    kls[border[i]+j] = kl\n","    temp.append(kl)\n","  print(i, \"mean kl\", np.mean(temp))\n","print(kls.mean())"],"execution_count":16,"outputs":[{"output_type":"stream","text":["0 mean kl 2.5680342576202184\n","1 mean kl 2.909500316896012\n","2 mean kl 2.818598413399716\n","3 mean kl 2.8447214663226044\n","4 mean kl 2.8516289927678704\n","5 mean kl 2.9034391950962597\n","6 mean kl 2.8880943160276282\n","7 mean kl 2.900752060024396\n","8 mean kl 2.846135787700065\n","9 mean kl 2.85113712658574\n","2.8508520128730814\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1zC1XX0IAZ-x","colab_type":"text"},"source":["overlap 3: kl divergence\n"]},{"cell_type":"markdown","metadata":{"id":"r8kGK3ibAImz","colab_type":"text"},"source":["\n"]},{"cell_type":"code","metadata":{"id":"ioySD7oZUeYT","colab_type":"code","colab":{}},"source":["ratio_1\n","overlap 5: kl_divergence\n","0 mean kl 2.6163089808814353\n","1 mean kl 2.8753965817893063\n","2 mean kl 2.866036166178241\n","3 mean kl 2.839589049469307\n","4 mean kl 2.8002224193948586\n","5 mean kl 2.7976602635052896\n","6 mean kl 2.776942131565275\n","7 mean kl 2.7878222827655015\n","8 mean kl 2.7505092012763033\n","9 mean kl 2.74410191069035\n","2.737241655913624\n","\n","overlap 4:\n","0 mean kl 2.6100659478117705\n","1 mean kl 2.8564435487711513\n","2 mean kl 2.8491184604782265\n","3 mean kl 2.817959019489922\n","4 mean kl 2.7815341166016436\n","5 mean kl 2.777701293830135\n","6 mean kl 2.757888095920567\n","7 mean kl 2.7704798382440265\n","8 mean kl 2.7349647613795596\n","9 mean kl 2.7299936093780865\n","2.7283556132124596\n","\n","overlap 3\n","0 mean kl 2.6085916882382834\n","1 mean kl 2.8292348078654737\n","2 mean kl 2.820811807183378\n","3 mean kl 2.791181309139243\n","4 mean kl 2.762313691383919\n","5 mean kl 2.7547291164301706\n","6 mean kl 2.7405205780466804\n","7 mean kl 2.750608592249947\n","8 mean kl 2.721995328715782\n","9 mean kl 2.7192830214153765\n","2.717923379904669\n","\n","overlap 10\n","0 mean kl 2.7753871251337663\n","1 mean kl 3.0302378841369033\n","2 mean kl 2.9991861274385294\n","3 mean kl 2.9434782696579727\n","4 mean kl 2.920269374847127\n","5 mean kl 2.909823645930598\n","6 mean kl 2.89084027398056\n","7 mean kl 2.902485352306911\n","8 mean kl 2.855393801654071\n","9 mean kl 2.8440827687959764\n","2.8432295439653377"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XnIbgxKtRfIZ","colab_type":"code","colab":{}},"source":["ratio2 \n","overlap 10\n","0 mean kl 2.78751347970808\n","1 mean kl 3.0770529865454987\n","2 mean kl 3.049556663938309\n","3 mean kl 3.0019593188098597\n","4 mean kl 3.0338597806365777\n","5 mean kl 2.964702376967148\n","6 mean kl 2.948014540856044\n","7 mean kl 2.973138355750508\n","8 mean kl 2.938854330519554\n","9 mean kl 2.955926342189674\n","2.9423290810156018"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R1OdRz7QaKa1","colab_type":"code","colab":{}},"source":["ratio3\n","0 mean kl 2.5617848816902273\n","1 mean kl 2.9615626864881635\n","2 mean kl 2.879493789567673\n","3 mean kl 2.8252716277631866\n","4 mean kl 2.9035969343326524\n","5 mean kl 2.872025146531248\n","6 mean kl 2.8751694721629666\n","7 mean kl 2.908918915133712\n","8 mean kl 2.8766034414893342\n","9 mean kl 2.8966481953131815\n","2.8187283588592575"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"itPglejX07x1","colab_type":"code","colab":{}},"source":["ratio4\n","0 mean kl 2.92640563839942\n","1 mean kl 3.057036631113963\n","2 mean kl 3.0523901373753484\n","3 mean kl 3.055620712414837\n","4 mean kl 3.047826981225571\n","5 mean kl 3.028641382657027\n","6 mean kl 3.035205260144986\n","7 mean kl 3.02426302800163\n","8 mean kl 3.0306466077710734\n","9 mean kl 3.0302878726411806\n","3.023318210534106"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RSXc6HX8WjTy","colab_type":"code","colab":{}},"source":["ratio 5\n","0 mean kl 2.6102924420325104\n","1 mean kl 3.056996957150096\n","2 mean kl 2.993175665924335\n","3 mean kl 2.933419261364506\n","4 mean kl 2.9700195668672977\n","5 mean kl 2.9511598986357215\n","6 mean kl 2.9355646228847476\n","7 mean kl 2.959898989088979\n","8 mean kl 2.9204692729041324\n","9 mean kl 2.9291596814920604\n","2.9291596814920604"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KcGYPoeEZimZ","colab_type":"code","colab":{}},"source":["ratio 6 \n","0 mean kl 2.6871636202241023\n","1 mean kl 3.0877852419167957\n","2 mean kl 2.995067160916525\n","3 mean kl 2.9400063153028806\n","4 mean kl 2.9454528502453514\n","5 mean kl 2.923680459711544\n","6 mean kl 2.9050300056313687\n","7 mean kl 2.923790665282685\n","8 mean kl 2.8810601626583248\n","9 mean kl 2.880443626259657\n","2.880443626259657"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"STN7IId5bRSx","colab_type":"code","colab":{}},"source":["ratio 7\n","0 mean kl 2.560195787736453\n","1 mean kl 2.8156223253343104\n","2 mean kl 2.738813908040841\n","3 mean kl 2.75447621848629\n","4 mean kl 2.747612327836614\n","5 mean kl 2.777388223145542\n","6 mean kl 2.7809560683082064\n","7 mean kl 2.80386887747819\n","8 mean kl 2.759662688746271\n","9 mean kl 2.7521729954598158\n","2.5248435060348347"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L4CfJqd2eR0u","colab_type":"code","colab":{}},"source":["ratio 8\n","0 mean kl 2.656541431748879\n","1 mean kl 2.8407070131187933\n","2 mean kl 2.8102019654082584\n","3 mean kl 2.7997584110905165\n","4 mean kl 2.8655736959865603\n","5 mean kl 2.892894408786466\n","6 mean kl 2.8886316985559644\n","7 mean kl 2.9027008629355824\n","8 mean kl 2.865921417443035\n","9 mean kl 2.8800192946230725\n","2.8143548547056665"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5ft5eu8BgwLS","colab_type":"code","colab":{}},"source":["ratio 9\n","0 mean kl 2.5680342576202184\n","1 mean kl 2.909500316896012\n","2 mean kl 2.818598413399716\n","3 mean kl 2.8447214663226044\n","4 mean kl 2.8516289927678704\n","5 mean kl 2.9034391950962597\n","6 mean kl 2.8880943160276282\n","7 mean kl 2.900752060024396\n","8 mean kl 2.846135787700065\n","9 mean kl 2.85113712658574\n","2.8508520128730814"],"execution_count":0,"outputs":[]}]}