{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_scnn_exp2","version":"0.3.2","provenance":[{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566418130179},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","colab":{}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f4Sb5WXCF6WR","colab_type":"text"},"source":["Define GradCam"]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","  \n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7JkCJmseF_bQ","colab_type":"text"},"source":["Define KW"]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        self.k = k\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        return input_shape\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"68b7fa9f-42fd-41e9-d846-a18508ad2e87","executionInfo":{"status":"ok","timestamp":1568068601189,"user_tz":-60,"elapsed":575,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 4/pAEP2FlsxHMIP0_H7Q1xreW48rdKrZpU1vAMW0v2Svz12lmNfX-7dI8"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oslDg8enGT58","colab_type":"text"},"source":["Define model"]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["ratio = [0.4, 0.4, 0.6, 0.8]  # exp1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","colab":{}},"source":["model = Sequential()\n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=None, name='conv_1'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[0]), 1.5, 32, name=\"sparse_1\"))\n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', activation=None, name='conv_2'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[1]), 1.5, 32, name=\"sparse_2\"))\n","\n","model.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","model.add(KW(round(64*ratio[2]), 1.5, 64, name=\"sparse_3\"))\n","\n","model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_4'))\n","model.add(KW(round(64*ratio[3]) , 1.5, 64, name=\"sparse_4\"))\n","\n","model.add(Flatten())\n","model.add(Dense(10, name='dense_1'))\n","model.add(Activation(\"softmax\", name=\"softmax\"))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4hX-D1VnU_3r","colab_type":"code","outputId":"bce57bdc-f476-4e11-c4b8-c3345e13dcdf","executionInfo":{"status":"ok","timestamp":1568068606836,"user_tz":-60,"elapsed":449,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":595}},"source":["model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model.summary()"],"execution_count":27,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv_1 (Conv2D)              (None, 112, 112, 32)      320       \n","_________________________________________________________________\n","max_pooling2d_3 (MaxPooling2 (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","sparse_1 (KW)                (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","conv_2 (Conv2D)              (None, 56, 56, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_4 (MaxPooling2 (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","sparse_2 (KW)                (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","conv_3 (Conv2D)              (None, 26, 26, 64)        18496     \n","_________________________________________________________________\n","sparse_3 (KW)                (None, 26, 26, 64)        0         \n","_________________________________________________________________\n","conv_4 (Conv2D)              (None, 24, 24, 64)        36928     \n","_________________________________________________________________\n","sparse_4 (KW)                (None, 24, 24, 64)        0         \n","_________________________________________________________________\n","flatten_2 (Flatten)          (None, 36864)             0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                368650    \n","_________________________________________________________________\n","softmax (Activation)         (None, 10)                0         \n","=================================================================\n","Total params: 433,642\n","Trainable params: 433,642\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JMkaGTZJU_6u","colab_type":"code","colab":{}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F3_FAYJCbNUI","colab_type":"text"},"source":["Load the overlapping dataset"]},{"cell_type":"code","metadata":{"id":"jH55DKBG9cSR","colab_type":"code","colab":{}},"source":["outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap3.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap4.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap5.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap10.npz\"\n","\n","testfile = np.load(outfile)\n","sorted_x = testfile[\"arr_0\"]\n","sorted_y = testfile[\"arr_1\"]\n","gt_x = testfile[\"arr_2\"]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nUCnPEku_Rlw","colab_type":"code","outputId":"fc7af82a-950a-44eb-f125-22181e9ea337","executionInfo":{"status":"ok","timestamp":1568068645229,"user_tz":-60,"elapsed":520,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1005, 2018, 2967, 4021, 4994, 5988, 6984, 8003, 8970, 10000]"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"0596992c-6865-4e27-ce88-91bf75acc2da","executionInfo":{"status":"ok","timestamp":1568068659448,"user_tz":-60,"elapsed":13736,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["kl = np.zeros(10000)\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    preprocessed_input = np.expand_dims(sorted_x[border[i]:border[i+1]], axis=-1)\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=True)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()"],"execution_count":31,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/1 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|██████████| 1/1 [00:13<00:00, 13.20s/it]\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"e2edb3b1-5215-46cf-b0dd-08314473546b","executionInfo":{"status":"ok","timestamp":1568068682322,"user_tz":-60,"elapsed":1825,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":791}},"source":["plt.imshow(sorted_x[border[0]+2].reshape(112, 112), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[2][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[2][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[2][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[2][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[2][1:], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":32,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\ngg==\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","outputId":"1400199f-38c8-45dd-96b7-c4a9997d651f","executionInfo":{"status":"ok","timestamp":1568068691952,"user_tz":-60,"elapsed":7135,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = x_comb_gt\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":33,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"695b62a4-fbfe-43d7-98b0-6e0451656ea6","executionInfo":{"status":"error","timestamp":1568068698310,"user_tz":-60,"elapsed":971,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":249}},"source":["kls = np.zeros((10000))\n","temp = []\n","for i in range(0, 10):\n","  gts = gt_x[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    kls[border[i]+j] = kl\n","    temp.append(kl)\n","  print(i, \"mean kl\", np.mean(temp))\n","print(kls.mean())"],"execution_count":34,"outputs":[{"output_type":"stream","text":["0 mean kl 2.6085916882382834\n"],"name":"stdout"},{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-087b6d70af8e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mgts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgt_x\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mborder\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mborder\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0mpmaps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0;32massert\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgts\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpmaps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 1"]}]},{"cell_type":"markdown","metadata":{"id":"97f1CugXLuLo","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"lQjnFF6zLx-_","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5y3u20GGLxtc","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LtCQsGwDGtKE","colab_type":"text"},"source":["Check the test data and the loaded model"]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"34515dca-112f-48d3-db86-3ab5e4bf8523","executionInfo":{"status":"ok","timestamp":1568050663501,"user_tz":-60,"elapsed":4006,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"552ae7c6-8134-48da-91fa-98b7a3b444ee","executionInfo":{"status":"ok","timestamp":1568050670052,"user_tz":-60,"elapsed":969,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":336}},"source":["p = 9000\n","x = x_test[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  np.argmax(y_test[p]))\n","print(predicted_class.dtype)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["predicted_class 7\n","correct_class 7\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","outputId":"8a898790-0b31-4e9b-f754-cec28d89b660","executionInfo":{"status":"ok","timestamp":1568050677934,"user_tz":-60,"elapsed":2961,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=True)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDAT\nCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMK\nAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoA\nAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAA\nAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAA\nwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADA\nMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAw\nEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDAT\nCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMK\nAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoAAADAMBMKAAAAwDATCgAAAMAwEwoA\nAADAMBMKAAAAwDATCgAAAMCw04f9BgAAAE6K1tpSjy/aX/T4ouciIqZp2rGtj9/rPieHhAIAAAAw\nTEIBAABgj40mEer21KlTd31+3vGWeU3E7mTC+vr60OO9ZEM9PsefCQUAAIA9suytC70JhLrtTTCk\nU6dOdScSepMSOVGQ29u3b0fE7omE3ra+Lo/rVoiTxy0PAAAAwDAJBQAAgA9pUTJh0S0M+fza2tpd\n93vHmX1t73fnNhMJmTDIn7tz586O5/P1+XgeN/fz+UW3QHB8SSgAAAAAwyQUAA5IryLRu3eytbbr\nnsR7baIErIZF91Knu1Uge2PIouZoy44j9ed6+3BS9P6//2GXf1yUUDh9+vTc/Xk9FZbtw1B7KLz/\n/vsRsZ1IqO81X1fl/yaZVKifzXhxckgoAAAAAMMkFAD22aKqQVYc7rvvvoiIOHPmzNZ+vVexbrOi\n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\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQEAAAEICAYAAABf40E1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEFZJREFUeJzt3U2IJGcdx/Hff3Z2s5vdZDObJb5k\njfENEU+CQcSDiCKIeouKBzVChCAoehMUvKiIKHjITRTRgy9oDiKKghokFxMQ9CAKvhCjxpiXNZvd\nZDYzs+Vh+j9b8+t+pqpnd9yZ/n8/sNR0dXV3zST9f3711FNPRdd1AlDX0rXeAQDXFkUAKI4iABRH\nEQCKowgAxVEEgOIoAhglIu6KiAd2eP6nEfGhPfjc2yOii4jlq/3e2MQfFldF13XvuNb7gN0hCQDF\nUQQWRES8JCLui4jHI+LJiLg3IpYi4jMR8XBE/CcivhURJyfbZ8z+cEQ8EhFnI+KeiLgjIn4fEf+N\niHunPybujYinI+KPEfHW3hP3R8Tdk5/viogHIuLLk/f9W0S8o7ftyYj4ekQ8GhH/jIjPRcShyXOH\nJq97IiL+Kumde//Xq40isAAmX6AfS3pY0u2SbpX0XUl3Tf69RdLLJZ2Q5F/sN0h6laT3SfqqpE9L\nepuk10p6b0S82bb9i6TTkj4r6b6IONXYrTdI+tNk2y9J+npExOS5b0pal/RKSa+T9HZJd0+e+4ik\nd03Wv17SneP+Cti1ruv4d8D/SXqjpMclLdv6X0j6aO/xqyWtabMv6HZJnaRbe88/Kel9vcc/lPSJ\nyc93SfqXpOg9/6CkD0x+vl/S3b1t/9zb7vrJZ71Q0gskXZR0rPf8+yX9avLzLyXd03vu7ZPXLo/9\ne/Bvvn90DC6Gl0h6uOu6dVv/Ym2mg/SwNgvAC3rrHuv9/NyMxyd6j//ZTb6Zvfd7cWOf/p0/dF33\n7CQEnJB0StJhSY9eDgZakvRIb58fufw22/Yfe4AisBgekXRbRCxbIfiXpJf2Ht+mzRj+mKQzu/ic\nWyMieoXgNkk/2sW+XpR0ekbRkqRHtVnU0m3z7ybmQZ/AYnhQm1+eL0bE8Yg4GhFvkvQdSZ+MiJdF\nxAlJX5D0vcaXb4xbJH08Ig5HxHskvUbST+Z5g67rHpX0c0lfiYgbJ52Xr+j1PXx/8hlnImJF0qd2\n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\nVAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["KL divergenvce\n","2.7506396968328213\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fu1DQa2Q1bSC","colab_type":"text"},"source":["Create dataset"]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","colab":{}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","preprocessed_x_t.shape\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border\n","\n","numbers = {}\n","for i in range(0, 10):\n","  numbers[i] = sorted_x[border[i]:border[i+1]]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZkomth02qyK","colab_type":"text"},"source":["overlap 3"]},{"cell_type":"code","metadata":{"id":"sJ-hM6LA2G_U","colab_type":"code","outputId":"c41fb85e-8aa1-4c77-82fb-3b19acc5b405","executionInfo":{"status":"ok","timestamp":1566484907373,"user_tz":-60,"elapsed":26037,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])\n","# np.save(outfile, comb_x, comb_y, gt_x)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nFQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1zC1XX0IAZ-x","colab_type":"text"},"source":["overlap 3: kl divergence\n"]}]}