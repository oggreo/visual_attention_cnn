{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_scnn_ex3","version":"0.3.2","provenance":[{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566508573166},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_pQCOmISAQBu"},"source":["## Enabling and testing the TPU\n","\n","First, you'll need to enable TPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select TPU from the Hardware Accelerator drop-down\n","\n","Next, we'll check that we can connect to the TPU:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"71iSWtsXe36x","outputId":"3c85a9c4-edcd-453f-e7de-a58177c8d079","executionInfo":{"status":"ok","timestamp":1566397792978,"user_tz":-60,"elapsed":2300,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["import os\n","import pprint\n","import tensorflow as tf\n","\n","if 'COLAB_TPU_ADDR' not in os.environ:\n","  print('ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!')\n","else:\n","  tpu_address = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","  print ('TPU address is', tpu_address)\n","\n","  with tf.Session(tpu_address) as session:\n","    devices = session.list_devices()\n","    \n","  print('TPU devices:')\n","  pprint.pprint(devices)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["TPU address is grpc://10.3.194.2:8470\n","TPU devices:\n","[_DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:CPU:0, CPU, -1, 14275768699390323595),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, 11842799723038262477),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:0, TPU, 17179869184, 14066512014885360315),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:1, TPU, 17179869184, 6668098089860739421),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:2, TPU, 17179869184, 17055154321271073709),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:3, TPU, 17179869184, 8934386564163808174),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:4, TPU, 17179869184, 17633551460902956940),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:5, TPU, 17179869184, 14362616761753630140),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:6, TPU, 17179869184, 3414496790114693319),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU:7, TPU, 17179869184, 16912109968151388991),\n"," _DeviceAttributes(/job:tpu_worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 8589934592, 6672732717108132275)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"5a8fdf81-e4c1-465a-c9e7-3d8a3d9d9557","executionInfo":{"status":"ok","timestamp":1566729170376,"user_tz":-60,"elapsed":2106,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    # utility function to normalize a tensor by its L2 norm\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    # img = image.load_img(img_path, target_size=(224, 224))\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        # print(\"K.one_hot\", K.eval(K.one_hot([category_index], nb_classes)))\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    # model = Sequential()\n","    # model.add(input_model)\n","    # nb_classes = 1000\n","    # print(\"category_index\", category_index)\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # if not \"lambda\" in input_model.layers[-1].name:\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # input_model.pop_layer()\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # target_layer = lambda x: target_category_loss(x, category_index, nb_classes)\n","        # target_layer = lambda x: tf.math.multiply(x[0], one_hot)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # print(\"name of the last layer\", input_model.layers[-1].name)\n","    # print(\"input_model.layers[-1].output\", input_model.layers[-1].output)\n","    loss = K.sum(input_model.layers[-1].output)\n","    # print(\"loss\", loss)\n","    # conv_output =  [l for l in model.layers[0].layers if l.name is layer_name][0].output\n","    # print([l.name for l in input_model.layers])\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \"\"\"\n","    dense_output = input_model.layers[-2].output\n","    final_output = input_model.layers[-1].output\n","    fin_out_manual = tf.math.multiply(input_model.layers[-2].output, one_hot)\n","    \"\"\"\n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","    \n","    # print(\"number of all zero map\", count)\n","    # print(\"dense output\", dense_output)\n","    # print(\"final output\", final_output)\n","    # print(\"fin out manual\", fin_out_manual)\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    # print(\"one_hot * dense_output\", one_hot_num * dense_output)\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    # cam = cv2.resize(cam, (224, 224))\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    #Return to BGR [0..255] from the preprocessed image\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        # print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        # (img_num, 112, 112, 32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    # this is slow af\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        print(\"output shape\", output.shape)\n","        # print(\"cam shape\", cam.shape)\n","        print(\" \")\n","        # (img_num, 112, 112, 32)\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        # self.output_dim = output_dim\n","        self.k = k\n","        # @TODO randome intialize\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        # p, h, w, c = tf.shape(x)\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        # x (p, h, w, c)\n","        print(\"x\", x)\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        print(\"global_average\", global_average)\n","        # x_sort_arg = self.top_k(global_average, k=K.int_shape(global_average)[-1]) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        print(\"x_sort_arg\", x_sort_arg)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        print(\"boosted_x\", boosted_x)\n","        # boosted_x_arg = np.argsort(boosted_x)\n","        # boosted_x_arg = self.top_k(boosted_x, k=K.int_shape(boosted_x)[-1]) # (p, c)\n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        # print(\"boosted_x_arg\", boosted_x_arg)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        print(\"x\", x)\n","        print(\"spx\", spx)\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        print(sparse_mtx)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        self.duty = duty\n","        print(\"duty\", duty)\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        # x_shape = tf.shape(x, out_type=tf.int64)\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS # 2\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        # assert isinstance(input_shape, list)\n","        return input_shape\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"83f81a73-6473-4caa-c0e6-79b20dcf97b5","executionInfo":{"status":"ok","timestamp":1566729190588,"user_tz":-60,"elapsed":920,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CMXffFiTMiTR","colab_type":"text"},"source":["Make dataset"]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"cb3da097-c878-438c-acb4-8d1f87a9f4d7","executionInfo":{"status":"ok","timestamp":1566729222550,"user_tz":-60,"elapsed":3669,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","# trainfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj./train_dataset.npz\")\n","\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wCBqyjYZOgaV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"5ee45e01-69e3-4144-cd21-0747bb5ad294","executionInfo":{"status":"ok","timestamp":1566510300481,"user_tz":-60,"elapsed":1336,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["num_classes = 10\n","import tensorflow as tf\n","mnist = tf.keras.datasets.mnist\n","(x_train, y_train),(x_test, y_test) = mnist.load_data()\n","x_train, x_test = x_train / 255.0, x_test / 255.0\n","y_train = keras.utils.to_categorical(y_train, num_classes)\n","y_test = keras.utils.to_categorical(y_test, num_classes)\n","x_train = x_train.astype('float32')\n","x_test = x_test.astype('float32')"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IuwtFARbNTP7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":286},"outputId":"1609954f-7b55-425f-c721-92f461ba93c8","executionInfo":{"status":"ok","timestamp":1566510304985,"user_tz":-60,"elapsed":386,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["import cv2\n","test = x_test[0]\n","print(test.shape)\n","re = cv2.resize(test, (64, 64))\n","re.shape\n","plt.imshow(re, cmap='gray')\n","plt.show()"],"execution_count":11,"outputs":[{"output_type":"stream","text":["(28, 28)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"z1SplcxfMju1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":521},"outputId":"fd8bc3f7-96a3-45b4-f0d5-4c7c74254d9a","executionInfo":{"status":"ok","timestamp":1566510307222,"user_tz":-60,"elapsed":663,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["import cv2\n","from random import randint\n","def preprocess_image(image, create_gt_salmap=False):\n","\n","    new_size = randint(28, 112)\n","    image = cv2.resize(image, (new_size, new_size))\n","    h, w = image.shape\n","    canvas = np.zeros((112, 112))\n","    canvas2 = np.zeros((112, 112))\n","    lt_y, lt_x = randint(0, 112-h), randint(0, 112-w)\n","    canvas[lt_y:lt_y+h, lt_x: lt_x+w] = image\n","    if create_gt_salmap:\n","        canvas2 = scipy.ndimage.gaussian_filter(canvas, sigma=4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0)\n","        # canvas2[lt_y:lt_y+h, lt_x: lt_x+w] = gaussianed_image\n","        return canvas, canvas2\n","    return canvas\n","\n","image, sal_map = preprocess_image(x_train[0].reshape(28, 28), True)\n","plt.imshow(image, cmap=\"gray\")\n","plt.show()\n","plt.imshow(sal_map, cmap=\"gray\")\n","plt.show()"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nRK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"-SUb5nYuPzlZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":190},"outputId":"63899a18-6bde-40cc-e82c-38d21c8d4564","executionInfo":{"status":"ok","timestamp":1566510400120,"user_tz":-60,"elapsed":14120,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["x_train_new = np.zeros(((x_train.shape[0], 112, 112, 1)))\n","for i in tqdm(range(x_train.shape[0])):\n","    new_x = preprocess_image(x_train[i])\n","    x_train_new[i] = np.expand_dims(new_x, axis=3)\n","# plt.imshow(x_train_new[0], cmap=\"gray\")\n","# plt.show()\n","print(x_train_new[0].shape)\n","\n","x_test_new = np.zeros(((x_test.shape[0], 112, 112, 1)))\n","x_test_gt = np.zeros(((x_test.shape[0], 112, 112, 1)))\n","for i in tqdm(range(x_test.shape[0])):\n","    new_x, sal_map = preprocess_image(x_test[i], True)\n","    x_test_new[i] = np.expand_dims(new_x, axis=3)\n","    x_test_gt[i] = np.expand_dims(sal_map, axis=3)\n","\n","x_train = x_train_new\n","x_test = x_test_new"],"execution_count":13,"outputs":[{"output_type":"stream","text":["  0%|          | 0/60000 [00:00<?, ?it/s]/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: DeprecationWarning: Both axis > a.ndim and axis < -a.ndim - 1 are deprecated and will raise an AxisError in the future.\n","  after removing the cwd from sys.path.\n","100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 60000/60000 [00:03<00:00, 17575.16it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"stream","text":["  0%|          | 0/10000 [00:00<?, ?it/s]/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: DeprecationWarning: Both axis > a.ndim and axis < -a.ndim - 1 are deprecated and will raise an AxisError in the future.\n","  del sys.path[0]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: DeprecationWarning: Both axis > a.ndim and axis < -a.ndim - 1 are deprecated and will raise an AxisError in the future.\n","  \n","100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10000/10000 [00:06<00:00, 1652.05it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"p68yjFCDP7sE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":286},"outputId":"6bf4f4cf-fc4b-491f-ef21-988c3f424e34","executionInfo":{"status":"ok","timestamp":1566510409253,"user_tz":-60,"elapsed":370,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["p = 60\n","plt.imshow(x_test[p].reshape(112, 112))\n","plt.show()\n","np.argmax(y_test[p])"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nf06rAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["7"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"7mROjGgUQkVi","colab_type":"code","colab":{}},"source":["\"\"\"\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/scale.npz\"\n","# np.savez(outfile, x_train, y_train, x_test, y_test, x_test_gt)\n","scaleFile = np.load(outfile)\n","\n","x_train = scaleFile[\"arr_0\"]\n","y_train = scaleFile[\"arr_1\"]\n","x_test = scaleFile[\"arr_2\"]\n","y_test = scaleFile[\"arr_3\"]\n","x_test_gt = scaleFile[\"arr_4\"]\n","\"\"\"\n","\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/scale_test.npz\"\n","scaleFile = np.load(outfile)\n","x_test = scaleFile[\"arr_0\"]\n","y_test = scaleFile[\"arr_1\"]\n","x_test_gt = scaleFile[\"arr_2\"]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zul5e2TPcFKe","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["ratio = [0.4, 0.4, 0.6, 0.8]  # exp1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","outputId":"2d2da168-9c50-4341-b2ad-e48a7f38e5a8","executionInfo":{"status":"ok","timestamp":1566729277634,"user_tz":-60,"elapsed":1381,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","\n","# model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=\"relu\", name='conv_1'))\n","model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=None, name='conv_1'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[0]), 1.5, 32, name=\"sparse_1\"))\n","# model.add(Activation(\"relu\", name=\"relu_1\"))\n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', activation=None, name='conv_2'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=\"relu\", name='conv_2'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[1]), 1.5, 32, name=\"sparse_2\"))\n","# model.add(Activation(\"relu\", name=\"relu_2\"))\n","\n","model.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","# model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_3'))\n","model.add(KW(round(64*ratio[2]), 1.5, 64, name=\"sparse_3\"))\n","# model.add(Activation(\"relu\", name=\"relu_3\"))\n","\n","# model.add(Conv2D(64, kernel_size=3, activation=\"relu\", name='conv_4'))\n","model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_4'))\n","model.add(KW(round(64*ratio[3]) , 1.5, 64, name=\"sparse_4\"))\n","\n","model.add(Flatten())\n","model.add(Dense(10, name='dense_1'))\n","model.add(Activation(\"softmax\", name=\"softmax\"))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0825 10:34:36.324821 140573411825536 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","W0825 10:34:36.339956 140573411825536 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0825 10:34:36.342514 140573411825536 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","W0825 10:34:36.355146 140573411825536 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["x Tensor(\"max_pooling2d_1/MaxPool:0\", shape=(?, 56, 56, 32), dtype=float32)\n","global_average Tensor(\"sparse_1/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_1/TopKV2:1\", shape=(?, 13), dtype=int32)\n","x_shape Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_1/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_1/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_1/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack_1:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_1/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_1/MaxPool:0\", shape=(?, 56, 56, 32), dtype=float32)\n","spx Tensor(\"sparse_1/BroadcastTo:0\", shape=(?, 56, 56, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_2/MaxPool:0\", shape=(?, 28, 28, 32), dtype=float32)\n","global_average Tensor(\"sparse_2/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_2/TopKV2:1\", shape=(?, 13), dtype=int32)\n","x_shape Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_2/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_2/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_2/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_2/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_2/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack_1:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_2/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_2/MaxPool:0\", shape=(?, 28, 28, 32), dtype=float32)\n","spx Tensor(\"sparse_2/BroadcastTo:0\", shape=(?, 28, 28, 32), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 26, 26, 64), dtype=float32)\n","global_average Tensor(\"sparse_3/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_3/TopKV2:1\", shape=(?, 38), dtype=int32)\n","x_shape Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack:0\", shape=(?, 38, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_3/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_3/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_3/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_3/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_3/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack_1:0\", shape=(?, 38, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_3/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 26, 26, 64), dtype=float32)\n","spx Tensor(\"sparse_3/BroadcastTo:0\", shape=(?, 26, 26, 64), dtype=float32)\n","x Tensor(\"conv_4/BiasAdd:0\", shape=(?, 24, 24, 64), dtype=float32)\n","global_average Tensor(\"sparse_4/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_4/TopKV2:1\", shape=(?, 51), dtype=int32)\n","x_shape Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_4/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_4/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_4/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_4/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_4/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack_1:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_4/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_4/BiasAdd:0\", shape=(?, 24, 24, 64), dtype=float32)\n","spx Tensor(\"sparse_4/BroadcastTo:0\", shape=(?, 24, 24, 64), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4hX-D1VnU_3r","colab_type":"code","outputId":"8afa2371-0ecc-48c3-ca4c-b55a7cb04f60","executionInfo":{"status":"ok","timestamp":1566729282188,"user_tz":-60,"elapsed":1204,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":666}},"source":["model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model.summary()"],"execution_count":12,"outputs":[{"output_type":"stream","text":["W0825 10:34:41.074975 140573411825536 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","W0825 10:34:41.094543 140573411825536 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv_1 (Conv2D)              (None, 112, 112, 32)      320       \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","sparse_1 (KW)                (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","conv_2 (Conv2D)              (None, 56, 56, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","sparse_2 (KW)                (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","conv_3 (Conv2D)              (None, 26, 26, 64)        18496     \n","_________________________________________________________________\n","sparse_3 (KW)                (None, 26, 26, 64)        0         \n","_________________________________________________________________\n","conv_4 (Conv2D)              (None, 24, 24, 64)        36928     \n","_________________________________________________________________\n","sparse_4 (KW)                (None, 24, 24, 64)        0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 36864)             0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                368650    \n","_________________________________________________________________\n","softmax (Activation)         (None, 10)                0         \n","=================================================================\n","Total params: 433,642\n","Trainable params: 433,642\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yu8-7P_LXR-G","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":258},"outputId":"a132498e-2b14-4995-d4b8-df34db04183d","executionInfo":{"status":"ok","timestamp":1566511681922,"user_tz":-60,"elapsed":122999,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=3, batch_size=32)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["W0822 22:05:59.262569 139848952637312 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","W0822 22:05:59.355829 139848952637312 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:986: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Train on 60000 samples, validate on 10000 samples\n","Epoch 1/3\n","60000/60000 [==============================] - 46s 770us/step - loss: 0.9760 - acc: 0.6728 - val_loss: 0.5578 - val_acc: 0.8191\n","Epoch 2/3\n","60000/60000 [==============================] - 38s 631us/step - loss: 0.4396 - acc: 0.8598 - val_loss: 0.2873 - val_acc: 0.9076\n","Epoch 3/3\n","60000/60000 [==============================] - 38s 632us/step - loss: 0.3126 - acc: 0.9015 - val_loss: 0.2632 - val_acc: 0.9196\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f30f3b9a630>"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"N_6lJHXaX6e0","colab_type":"code","colab":{}},"source":["from keras.models import load_model\n","# model.save_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_for_scale.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMkaGTZJU_6u","colab_type":"code","outputId":"d0b20ef0-3fc3-49d9-a8a9-468603f3ccbe","executionInfo":{"status":"ok","timestamp":1566729288109,"user_tz":-60,"elapsed":1956,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_for_scale.h5\")"],"execution_count":13,"outputs":[{"output_type":"stream","text":["W0825 10:34:46.905709 140573411825536 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","outputId":"03d424a5-3689-4a6c-b096-e2d8fa49b7fc","executionInfo":{"status":"ok","timestamp":1566729296476,"user_tz":-60,"elapsed":1293,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","preprocessed_x_t.shape\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 980, 2115, 3147, 4157, 5139, 6031, 6989, 8017, 8991, 10000]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"76f32689-7bc6-4762-9a32-f6c54cafdbac","executionInfo":{"status":"ok","timestamp":1566729301444,"user_tz":-60,"elapsed":2904,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":387}},"source":["p = 8996\n","x = sorted_x[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  sorted_y[p])\n","print(predicted_class.dtype)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nKu5/ha83nXs6YxsAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 112, 112, 1)\n","[[1.0199265e-02 9.9293109e-05 1.6319025e-02 1.3587796e-02 1.0650363e-01\n","  1.1251801e-01 2.5694152e-02 1.2856409e-02 3.4713399e-01 3.5508841e-01]]\n","predicted_class 9\n","correct_class 9\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","outputId":"22a4d728-7508-4214-f32b-266bca8f6f56","executionInfo":{"status":"ok","timestamp":1566729314588,"user_tz":-60,"elapsed":2837,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=True)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    else:\n","        combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nKu5/ha83nXs6YxsAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["1\n","2\n","3\n","4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nTkSuQmCC\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQEAAAEICAYAAABf40E1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAFn9JREFUeJztnU2opdlVht99btXtqq5qgyEYTSdt\n/EPEkaAEcSCiBII6iwYHagstBEHRHgkKTlREWnCQmUREB/6gGYgoCmqQTMxA0IEoqKFtkzYmIdpd\nXd3VdauOg3vXvfu+91tnf+fUre77nfU8UHz3+9/ndJ+93r3W2mu39XotAKjL6u1uAAC8vdAJABSH\nTgCgOHQCAMWhEwAoDp0AQHHoBGAWrbVnW2uf2nD+L1prP/4Y3vv+1tq6tXbtsp8Nx/DFwqWwXq8/\n9Ha3AXYDJQBQHDqBPaG19r7W2idaa19orX2ptfax1tqqtfaLrbUXW2v/01r73dbaO06uD5n9E621\nl1prX26tfbS19h2ttX9qrf1va+1jF1/TPtZa+7/W2r+01r63O/HJ1tpzJ38/21r7VGvthZPnfqa1\n9qHu2ne01j7eWnu5tfbZ1tovt9YOTs4dnNz3xdbaf0j6/sf/7dWGTmAPOPkB/ZmkFyW9X9LTkv5A\n0rMn/75H0tdLui3Jf9gfkPRNkj4i6Tcl/YKk75P0rZJ+uLX23Xbtv0t6l6RfkvSJ1to7k2Z9QNK/\nnlz765I+3lprJ+d+R9KRpG+U9G2SPijpuZNzPynpB06Of7ukD8/7FmBn1us1/xb+T9J3SvqCpGt2\n/K8l/VS3/82S7uvYF/R+SWtJT3fnvyTpI93+n0j62ZO/n5X0OUmtO/9pST968vcnJT3XXftv3XVP\nnrzrqyW9W9I9STe78z8i6W9P/v4bSR/tzn3w5N5rc78P/m33D8fgfvA+SS+u1+sjO/4eHauD4EUd\ndwDv7o59vvv79Yn9293+Z9cnv8zuee9J2vTf8cd6vb57IgJuS3qnpOuSXj4TBlpJeqlr80tnjznX\nfngM0AnsBy9Jeqa1ds06gs9J+tpu/xkdy/DPS3rvDu95urXWuo7gGUl/ukNb70l610SnJUkv67hT\nC57ZvpmwDfgE9oNP6/jH82uttVuttRutte+S9PuSfq619nWttduSflXSHyY/vjl8laSfaa1db639\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["KL divergenvce\n","1.9232424352416362\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"S5bTNMOXkimK","colab_type":"code","outputId":"94022d93-f4a2-4aee-8a7e-ec5d630643ce","executionInfo":{"status":"ok","timestamp":1566414484686,"user_tz":-60,"elapsed":400,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["\n","x_comb_gt /= np.sum(x_comb_gt)\n","print(np.sum(x_comb_gt))\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))\n","print(np.sum(combined))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1.0\n","2.9415657532918003\n","1.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FUuoJeZqqcWv","colab_type":"text"},"source":["Evaluate"]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"68c63984-4a93-461f-ab32-86bdb6028e89","executionInfo":{"status":"ok","timestamp":1566514372647,"user_tz":-60,"elapsed":78663,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["kl = np.zeros(len(x_test))\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    preprocessed_input = sorted_x[border[i]:border[i+1]]\n","    # print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=True)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (980, 32)\n","output shape (980, 56, 56, 32)\n"," \n","weights shape (980, 32)\n","output shape (980, 28, 28, 32)\n"," \n","weights shape (980, 64)\n","output shape (980, 26, 26, 64)\n"," \n","weights shape (980, 64)\n","output shape (980, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|â–ˆ         | 1/10 [00:15<02:18, 15.36s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 1\n","weights shape (1135, 32)\n","output shape (1135, 56, 56, 32)\n"," \n","weights shape (1135, 32)\n","output shape (1135, 28, 28, 32)\n"," \n","weights shape (1135, 64)\n","output shape (1135, 26, 26, 64)\n"," \n","weights shape (1135, 64)\n","output shape (1135, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|â–ˆâ–ˆ        | 2/10 [00:23<01:45, 13.20s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 2\n","weights shape (1032, 32)\n","output shape (1032, 56, 56, 32)\n"," \n","weights shape (1032, 32)\n","output shape (1032, 28, 28, 32)\n"," \n","weights shape (1032, 64)\n","output shape (1032, 26, 26, 64)\n"," \n","weights shape (1032, 64)\n","output shape (1032, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|â–ˆâ–ˆâ–ˆ       | 3/10 [00:30<01:18, 11.25s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 3\n","weights shape (1010, 32)\n","output shape (1010, 56, 56, 32)\n"," \n","weights shape (1010, 32)\n","output shape (1010, 28, 28, 32)\n"," \n","weights shape (1010, 64)\n","output shape (1010, 26, 26, 64)\n"," \n","weights shape (1010, 64)\n","output shape (1010, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|â–ˆâ–ˆâ–ˆâ–ˆ      | 4/10 [00:36<00:59,  9.90s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 4\n","weights shape (982, 32)\n","output shape (982, 56, 56, 32)\n"," \n","weights shape (982, 32)\n","output shape (982, 28, 28, 32)\n"," \n","weights shape (982, 64)\n","output shape (982, 26, 26, 64)\n"," \n","weights shape (982, 64)\n","output shape (982, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 5/10 [00:43<00:44,  8.99s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 5\n","weights shape (892, 32)\n","output shape (892, 56, 56, 32)\n"," \n","weights shape (892, 32)\n","output shape (892, 28, 28, 32)\n"," \n","weights shape (892, 64)\n","output shape (892, 26, 26, 64)\n"," \n","weights shape (892, 64)\n","output shape (892, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    | 6/10 [00:49<00:32,  8.11s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 6\n","weights shape (958, 32)\n","output shape (958, 56, 56, 32)\n"," \n","weights shape (958, 32)\n","output shape (958, 28, 28, 32)\n"," \n","weights shape (958, 64)\n","output shape (958, 26, 26, 64)\n"," \n","weights shape (958, 64)\n","output shape (958, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   | 7/10 [00:56<00:22,  7.66s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 7\n","weights shape (1028, 32)\n","output shape (1028, 56, 56, 32)\n"," \n","weights shape (1028, 32)\n","output shape (1028, 28, 28, 32)\n"," \n","weights shape (1028, 64)\n","output shape (1028, 26, 26, 64)\n"," \n","weights shape (1028, 64)\n","output shape (1028, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  | 8/10 [01:04<00:15,  7.86s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 8\n","weights shape (974, 32)\n","output shape (974, 56, 56, 32)\n"," \n","weights shape (974, 32)\n","output shape (974, 28, 28, 32)\n"," \n","weights shape (974, 64)\n","output shape (974, 26, 26, 64)\n"," \n","weights shape (974, 64)\n","output shape (974, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 90%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 9/10 [01:11<00:07,  7.49s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 9\n","weights shape (1009, 32)\n","output shape (1009, 56, 56, 32)\n"," \n","weights shape (1009, 32)\n","output shape (1009, 28, 28, 32)\n"," \n","weights shape (1009, 64)\n","output shape (1009, 26, 26, 64)\n"," \n","weights shape (1009, 64)\n","output shape (1009, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [01:18<00:00,  7.28s/it]\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"feecda48-8c40-43ae-a1cd-2f4c68f76223","executionInfo":{"status":"ok","timestamp":1566514391436,"user_tz":-60,"elapsed":1389,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":791}},"source":["plt.imshow(sorted_x[border[9]].reshape(112, 112), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[0][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[0][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[0][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[0][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[0], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nUL558+Zxr5MkE7K7SxJM2f3llVdeqapVCqp3ec7tDz74oKpW40OqoX0Hiv/7v/87cX9eRy8FmNPP\nkVEPhaSEcux9UnKuXr9+fdhDoScQ+lrmfnv0WUdV0KXdJYwH7JvZXgm5v5+j/bu6J5x7Vb9fL1y6\ndGkjmTDqpdCfOzqPR72URj0TuqXdZGbs49jirzUAAABgmoQCG+uTUmH4zne+U1VVP/rRj6qq6he/\n+EVVfd1D4eWXX66qVU+Et956q6qq/vSnP1XVas1zEguZ4UvVIjOBeZ2+fjuzn30GcnTUWwEeTK/y\n9crk6Pb6Wuokj5JQSLIgx/y8r7MeJRTy+ByTgMgx92d3iPRS6PtNA3P6jgh9z/i+y0NPKuT2tWvX\nFndVWEoojPTrAIlG2G4pmdDPtZ4SGPUZyHdvPxd7Wmhb/5TRri59PBglkUZ/J4xeP2NY1x+X111K\nSG37/Ua7XuwDoy8AAAAwTUKBjRnFpAi+9a1vVdWqz8EPf/jDE7erVvvD//GPf6yqqv/5n/+pqqq/\n//3vVbWa6ctrpS9D7/aeimNPMPT1mqmKqETA+eoz6b0zct/toe8Gc/PmzY111HlM1kam10GvGGSc\n6McknNJL4V//+ldVjfeHXkoyASeN1k7nu7ZfF+TczM/74/L8nPNV4/XU/XbvodT11+lrpnvSqT9+\n9Hy4qEbffT3d25PKox0Xou/M1P+O6OfWtpRS76HQeyF0PTWVx4+uB5aSCf1x+Z1GfSPWjd5r9m+T\ni7Tbwzf/NwAAAAAeOQkFNmYWkwbIuueeLrh69erx/u9JKGQ3hw8//LCqVuuqUtV48cUXq2qVcsiO\nET/4wQ+qatWvoc8k9rXTvfKplwKcj16h6Ld36e6+nlaoWo0pGQ+SOEjSoHeMzuNyO49LsiG3+9rJ\n/jvs+rvCvhp1Su/rlPv1QcaDUUf1L774oqpW5/LBwcHGTjH9ez63+/39M/bdn1IdzXump1Nur6ck\n1rlOgK/1cyvncc7VUV+TnmzIcamnyvqODaPzuvdpynE0Zi31h8hnz9g12rGipyj680+zrUfEvpFQ\nAAAAAKZJKDCcJeyzguszlX19VRIEt27dOvHaSTm8/vrrVVX1xhtvVNVq54gkE3q394uwngi+iXoy\noVcVs2a690u4efPmcSIp9+W5qRwmYdAriDmmqpnbeV52b8ixr5kcrcnWQwFOWjo3es+EXnHMMefi\n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\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","outputId":"aa186d10-3736-4e7b-a4bc-c818b84ab795","executionInfo":{"status":"ok","timestamp":1566514409602,"user_tz":-60,"elapsed":6562,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = np.expand_dims(x_comb_gt, axis=-1)\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nghCi4v8D34uS61wL4gYAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"sEfuI3GpeRg5","colab_type":"code","outputId":"a33fcd33-5f79-4434-e5c9-735dc99385b6","executionInfo":{"status":"ok","timestamp":1566483360071,"user_tz":-60,"elapsed":326,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["results[0][0][1:].shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3, 112, 112)"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"a207f109-fea2-43df-9c02-5bb45f09768c","executionInfo":{"status":"ok","timestamp":1566514455450,"user_tz":-60,"elapsed":4506,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["kls = np.zeros((len(sorted_x_gt)))\n","for i in range(0, 10):\n","  gts = sorted_x_gt[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  temp = []\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    temp.append(kl)\n","    kls[border[i]+j] = kl\n","  print(i, \"mean kl\", np.mean(temp))\n","print(\"KL divergenvce\")\n","print(kls.mean())"],"execution_count":18,"outputs":[{"output_type":"stream","text":["0 mean kl 1.7805381239116487\n","1 mean kl 2.4137132037215907\n","2 mean kl 2.021136535713283\n","3 mean kl 1.8755490898060678\n","4 mean kl 2.1304088548411366\n","5 mean kl 1.9980652553628981\n","6 mean kl 1.9994551378281697\n","7 mean kl 2.169661847111724\n","8 mean kl 1.6796783112225924\n","9 mean kl 1.9542385112696259\n","KL divergenvce\n","2.009025505712373\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8v1V1S90sSrQ","colab_type":"text"},"source":["KL divergenvce\n","2.713232551413429"]},{"cell_type":"code","metadata":{"id":"Sv1I8125ipUR","colab_type":"code","outputId":"784d4126-2dc9-4dc0-fc20-e7441931a24f","executionInfo":{"status":"ok","timestamp":1566414506803,"user_tz":-60,"elapsed":784,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["0 mean kl 1.7805381239116487\n","1 mean kl 2.4137132037215907\n","2 mean kl 2.021136535713283\n","3 mean kl 1.8755490898060678\n","4 mean kl 2.1304088548411366\n","5 mean kl 1.9980652553628981\n","6 mean kl 1.9994551378281697\n","7 mean kl 2.169661847111724\n","8 mean kl 1.6796783112225924\n","9 mean kl 1.9542385112696259\n","KL divergenvce\n","2.009025505712373"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nZpb5f5DqnzNKvy51AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["2.724540506068822\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4N8pIhW7jghM","colab_type":"code","outputId":"c01f1e31-a10f-4b14-e221-ff1c6fa9677c","executionInfo":{"status":"ok","timestamp":1566414270620,"user_tz":-60,"elapsed":448,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["np.sum(gt)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{"tags":[]},"execution_count":118}]},{"cell_type":"code","metadata":{"id":"5rsAt0VVhdKr","colab_type":"code","outputId":"a89c4e71-150a-41e2-dcb3-842aea0b9762","executionInfo":{"status":"ok","timestamp":1566403084258,"user_tz":-60,"elapsed":541,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["border"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 980, 2115, 3147, 4157, 5139, 6031, 6989, 8017, 8991, 10000]"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"Lr1e0TyMhm5D","colab_type":"code","outputId":"7e526b96-3627-4ea6-95ff-5b4126ca14cd","executionInfo":{"status":"ok","timestamp":1566385377950,"user_tz":-60,"elapsed":373,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 2])"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"9dhpUEUViJoc","colab_type":"code","outputId":"04b6bda4-a364-45bc-c8f1-8298c3008d40","executionInfo":{"status":"ok","timestamp":1566385062322,"user_tz":-60,"elapsed":490,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["x_test.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 112, 112, 1)"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"L0oKGNFrpV4U","colab_type":"code","outputId":"37665d32-d9a4-4013-e771-3e05da6407a4","executionInfo":{"status":"ok","timestamp":1566385064468,"user_tz":-60,"elapsed":1860,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 112, 112, 1)"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"ookWUk3PRoKF","colab_type":"code","outputId":"544749c5-7bb1-471e-c3ca-abfe103f11fa","executionInfo":{"status":"ok","timestamp":1566385064470,"user_tz":-60,"elapsed":1343,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, ..., 9, 9, 9])"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"ioySD7oZUeYT","colab_type":"code","outputId":"f29fd290-067d-41d3-fb14-842acd0b8447","executionInfo":{"status":"ok","timestamp":1566380720394,"user_tz":-60,"elapsed":393,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"R1OdRz7QaKa1","colab_type":"code","outputId":"4eee7c8a-7ef8-43fa-eba1-7ab094a563c9","executionInfo":{"status":"ok","timestamp":1566385094684,"user_tz":-60,"elapsed":496,"user":{"displayName":"reo911gt3","photoUrl":"https://lh5.googleusercontent.com/-t8hhtOhYVKw/AAAAAAAAAAI/AAAAAAAA2vg/rTXvJkYRa_Y/s64/photo.jpg","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(49, 4, 112, 112)"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"itPglejX07x1","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}