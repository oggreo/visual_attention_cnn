{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_scnn_cifar10","version":"0.3.2","provenance":[{"file_id":"1Bi0Gp-wU2iCK6TCvkwPBrvju_C-Tq1pD","timestamp":1567115821896},{"file_id":"1wTkqln-Mdo_VsWQeYtrdM2q1NbgXNUB1","timestamp":1566557728494},{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566418130179},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"dm2wSqJvpjGf"},"source":["# TPUs in Colab\n","\n","This notebook provides an introduction to computing on a [TPU](https://cloud.google.com/tpu/) in Colab. In this notebook you will connect to a TPU, run some basic TensorFlow operations on the TPU, and print out the speed of the TPU as measured in teraflops."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_pQCOmISAQBu"},"source":["## Enabling and testing the TPU\n","\n","First, you'll need to enable TPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select TPU from the Hardware Accelerator drop-down\n","\n","Next, we'll check that we can connect to the TPU:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"71iSWtsXe36x","outputId":"f447f46d-45ad-425b-9ff7-9efa614f2b1b","executionInfo":{"status":"ok","timestamp":1566560468106,"user_tz":-60,"elapsed":4795,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import os\n","import pprint\n","import tensorflow as tf\n","\n","if 'COLAB_TPU_ADDR' not in os.environ:\n","  print('ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!')\n","else:\n","  tpu_address = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","  print ('TPU address is', tpu_address)\n","\n","  with tf.Session(tpu_address) as session:\n","    devices = session.list_devices()\n","    \n","  print('TPU devices:')\n","  pprint.pprint(devices)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"58d93cee-9827-47f1-a7c1-537b0947a8d8","executionInfo":{"status":"ok","timestamp":1567452016628,"user_tz":-60,"elapsed":2732,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, GlobalAveragePooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    # utility function to normalize a tensor by its L2 norm\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    # img = image.load_img(img_path, target_size=(224, 224))\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        # print(\"K.one_hot\", K.eval(K.one_hot([category_index], nb_classes)))\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    # model = Sequential()\n","    # model.add(input_model)\n","    # nb_classes = 1000\n","    # print(\"category_index\", category_index)\n","    nb_classes = 4\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # if not \"lambda\" in input_model.layers[-1].name:\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # input_model.pop_layer()\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # target_layer = lambda x: target_category_loss(x, category_index, nb_classes)\n","        # target_layer = lambda x: tf.math.multiply(x[0], one_hot)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # print(\"name of the last layer\", input_model.layers[-1].name)\n","    # print(\"input_model.layers[-1].output\", input_model.layers[-1].output)\n","    loss = K.sum(input_model.layers[-1].output)\n","    # print(\"loss\", loss)\n","    # conv_output =  [l for l in model.layers[0].layers if l.name is layer_name][0].output\n","    # print([l.name for l in input_model.layers])\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \"\"\"\n","    dense_output = input_model.layers[-2].output\n","    final_output = input_model.layers[-1].output\n","    fin_out_manual = tf.math.multiply(input_model.layers[-2].output, one_hot)\n","    \"\"\"\n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","    \n","    # print(\"number of all zero map\", count)\n","    # print(\"dense output\", dense_output)\n","    # print(\"final output\", final_output)\n","    # print(\"fin out manual\", fin_out_manual)\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    # print(\"one_hot * dense_output\", one_hot_num * dense_output)\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    # cam = cv2.resize(cam, (224, 224))\n","    # cam = cv2.resize(cam, (32, 32))\n","    cam = cv2.resize(cam, (64, 64))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    #Return to BGR [0..255] from the preprocessed image\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        # print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        # (img_num, 112, 112, 32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","        cam = cv2.resize(cam, (32, 32))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 4\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    # this is slow af\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 64,  64))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        print(\"output shape\", output.shape)\n","        # print(\"cam shape\", cam.shape)\n","        print(\" \")\n","        # (img_num, 112, 112, 32)\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","          # cam = cv2.resize(cam, (112, 112))\n","          cam = cv2.resize(cam, (64, 64))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        # self.output_dim = output_dim\n","        self.k = k\n","        # @TODO randome intialize\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        # p, h, w, c = tf.shape(x)\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        # x (p, h, w, c)\n","        print(\"x\", x)\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        print(\"global_average\", global_average)\n","        # x_sort_arg = self.top_k(global_average, k=K.int_shape(global_average)[-1]) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        print(\"x_sort_arg\", x_sort_arg)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        print(\"boosted_x\", boosted_x)\n","        # boosted_x_arg = np.argsort(boosted_x)\n","        # boosted_x_arg = self.top_k(boosted_x, k=K.int_shape(boosted_x)[-1]) # (p, c)\n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        # print(\"boosted_x_arg\", boosted_x_arg)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        print(\"x\", x)\n","        print(\"spx\", spx)\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        print(sparse_mtx)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        self.duty = duty\n","        print(\"duty\", duty)\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        # x_shape = tf.shape(x, out_type=tf.int64)\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS # 2\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        # assert isinstance(input_shape, list)\n","        return input_shape\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"b99ed22f-8f9f-4ac1-feb1-f307b84c8cf1","executionInfo":{"status":"ok","timestamp":1567452048473,"user_tz":-60,"elapsed":26181,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 4/pAEP2FlsxHMIP0_H7Q1xreW48rdKrZpU1vAMW0v2Svz12lmNfX-7dI8"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"e90ce8d2-a631-496e-af03-2674e74989b8","executionInfo":{"status":"ok","timestamp":1567452068555,"user_tz":-60,"elapsed":10164,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["num_classes = 10\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n","y_train = keras.utils.to_categorical(y_train, num_classes)\n","y_test = keras.utils.to_categorical(y_test, num_classes)\n","x_train = x_train.astype('float32')\n","x_test = x_test.astype('float32')\n","x_train /= 255\n","x_test /= 255"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 6s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"f4zmaKnHONOK","colab_type":"code","outputId":"05cb08c2-6f2a-4f2f-995c-f19ca37bad2f","executionInfo":{"status":"ok","timestamp":1567452070452,"user_tz":-60,"elapsed":2082,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["len(y_test)\n","argmaxed_y_tr = np.ones(len(y_train)).astype(np.int16)\n","for i, y in enumerate(y_train):\n","  argmaxed_y_tr[i] = np.argmax(y).astype(np.int16)\n","sorted_arg_tr = argmaxed_y_tr.argsort()\n","sorted_x_tr = x_train[sorted_arg_tr].copy()\n","sorted_y_tr = argmaxed_y_tr[sorted_arg_tr].copy()\n","\n","border = []\n","c = 0\n","for i, y in enumerate(sorted_y_tr):\n","  if y == c:\n","    border.append(i)\n","    c += 1\n","border.append(len(y_train))\n","print(border)\n","\n","sorted_y_tr_cp = y_train[sorted_arg_tr].copy()\n","\n","\n","x_train_4 = sorted_x_tr[:20000]\n","y_train_4_cp = sorted_y_tr_cp[:20000]\n","y_train_4 = np.ones((len(y_train_4_cp), 4))\n","for i, y in enumerate(y_train_4_cp):\n","  ans = np.zeros(4)\n","  ans[np.argmax(y)] = 1\n","  y_train_4[i] = ans\n","print(y_train_4.shape)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[0, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000]\n","(20000, 4)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JvGEbuhtZ6XJ","colab_type":"code","outputId":"e46112d5-b823-4942-e56e-ff305a19ec30","executionInfo":{"status":"ok","timestamp":1567435675499,"user_tz":-60,"elapsed":1065,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":286}},"source":["p = 19006\n","plt.imshow(x_train_4[p])\n","plt.show()\n","y_train_4[p]"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nD50RS8hkkiWEAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["array([0., 0., 0., 1.])"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"4VGzU03YPmRE","colab_type":"code","outputId":"907a528c-3422-4cbc-c151-7328f7cf55af","executionInfo":{"status":"ok","timestamp":1567452078451,"user_tz":-60,"elapsed":998,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["len(y_test)\n","argmaxed_y = np.ones(len(y_test)).astype(np.int16)\n","for i, y in enumerate(y_test):\n","  argmaxed_y[i] = np.argmax(y).astype(np.int16)\n","sorted_arg = argmaxed_y.argsort()\n","sorted_x = x_test[sorted_arg].copy()\n","sorted_y = argmaxed_y[sorted_arg].copy()\n","sorted_y_org = y_test[sorted_arg].copy()\n","\n","border = []\n","c = 0\n","for i, y in enumerate(sorted_y):\n","  if y == c:\n","    border.append(i)\n","    c += 1\n","border.append(len(y_test))\n","print(border)\n","\n","y_test_4_cp = sorted_y_org[:4000]\n","x_test_4 = sorted_x[:4000]\n","y_test_4 = np.ones((len(y_test_4_cp), 4))\n","for i, y in enumerate(y_test_4_cp):\n","  ans = np.zeros(4)\n","  ans[np.argmax(y)] = 1\n","  y_test_4[i] = ans\n","print(y_test_4.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["[0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]\n","(4000, 4)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BTxEOXALQZ8Y","colab_type":"code","colab":{}},"source":["import random\n","SEED = 448\n","\n","random.seed(SEED)\n","random.shuffle(x_train_4)\n","random.seed(SEED)\n","random.shuffle(y_train_4)\n","random.seed(SEED)\n","random.shuffle(x_test_4)\n","random.seed(SEED)\n","random.shuffle(y_test_4)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["# ratio = [0.4, 0.4, 0.6, 0.8]  # exp1\n","# ratio = [0.2, 0.2, 0.3, 0.4]  # exp2\n","# ratio = [0.2, 0.2, 0.6, 0.8]  # exp3\n","# ratio = [0.1, 0.1, 0.6, 0.8]  # exp4\n","\n","# ratio = [0.2, 0.4, 0.6, 0.8]  # exp5\n","# ratio = [0.1, 0.4, 0.6, 0.8]  # exp6\n","\n","ratio = [0.6, 0.6, 0.8, 0.8]  # exp7\n","\n","# ratio = [0.8, 0.4, 0.6, 0.8]  # exp8\n","\n","# ratio = [0.5, 0.4, 0.6, 0.8]  # exp9\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","outputId":"988aba70-72cc-4df1-b55c-4db3f950255f","executionInfo":{"status":"ok","timestamp":1567435687695,"user_tz":-60,"elapsed":1455,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=\"relu\", name='conv_1')) \n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(32, 32, 3), activation=\"relu\", name='conv_1'))\n","# model.add(Conv2D(32, kernel_size=3, strides=1, padding='same', input_shape=(32, 32, 3), activation=\"relu\", name='conv_1'))\n","# model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[0]), 1.5, 32, name=\"sparse_1\"))\n","# model.add(Activation(\"relu\", name=\"relu_1\"))\n","\n","model.add(Conv2D(32, kernel_size=3,  activation=\"relu\", name='conv_2'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=\"relu\", name='conv_2'))\n","model.add(KW(round(32*ratio[1]), 1.5, 32, name=\"sparse_2\"))\n","# model.add(Activation(\"relu\", name=\"relu_2\"))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(Conv2D(64, kernel_size=3,  padding='same', activation=\"relu\", name='conv_3'))\n","# model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_3'))\n","model.add(KW(round(64*ratio[2]), 1.5, 64, name=\"sparse_3\"))\n","# model.add(Activation(\"relu\", name=\"relu_3\"))\n","# model.add(Conv2D(64, kernel_size=3, activation=\"relu\", name='conv_4'))\n","\n","model.add(Conv2D(64,  kernel_size=3, activation=\"relu\", name='conv_4'))\n","model.add(KW(round(64*ratio[3]) , 1.5, 64, name=\"sparse_4\"))\n","# model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(GlobalAveragePooling2D())\n","# model.add(Dense(512, name='dense_1'))\n","model.add(Dense(4, name='dense_2'))\n","# model.add(Conv2D(10, (6, 6), name='dense_1'))\n","# model.add(Flatten())\n","\n","model.add(Activation(\"softmax\", name=\"softmax\"))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0902 14:48:06.549172 140665960609664 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","W0902 14:48:06.582740 140665960609664 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0902 14:48:06.588037 140665960609664 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","W0902 14:48:06.787280 140665960609664 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["x Tensor(\"conv_1/Relu:0\", shape=(?, 32, 32, 32), dtype=float32)\n","global_average Tensor(\"sparse_1/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_1/TopKV2:1\", shape=(?, 19), dtype=int32)\n","x_shape Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_1/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_1/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_1/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack_1:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_1/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"conv_1/Relu:0\", shape=(?, 32, 32, 32), dtype=float32)\n","spx Tensor(\"sparse_1/BroadcastTo:0\", shape=(?, 32, 32, 32), dtype=float32)\n","x Tensor(\"conv_2/Relu:0\", shape=(?, 30, 30, 32), dtype=float32)\n","global_average Tensor(\"sparse_2/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_2/TopKV2:1\", shape=(?, 19), dtype=int32)\n","x_shape Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_2/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_2/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_2/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_2/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_2/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack_1:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_2/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"conv_2/Relu:0\", shape=(?, 30, 30, 32), dtype=float32)\n","spx Tensor(\"sparse_2/BroadcastTo:0\", shape=(?, 30, 30, 32), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 15, 15, 64), dtype=float32)\n","global_average Tensor(\"sparse_3/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_3/TopKV2:1\", shape=(?, 51), dtype=int32)\n","x_shape Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_3/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_3/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_3/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_3/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_3/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack_1:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_3/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 15, 15, 64), dtype=float32)\n","spx Tensor(\"sparse_3/BroadcastTo:0\", shape=(?, 15, 15, 64), dtype=float32)\n","x Tensor(\"conv_4/Relu:0\", shape=(?, 13, 13, 64), dtype=float32)\n","global_average Tensor(\"sparse_4/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_4/TopKV2:1\", shape=(?, 51), dtype=int32)\n","x_shape Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_4/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_4/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_4/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_4/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_4/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack_1:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_4/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_4/Relu:0\", shape=(?, 13, 13, 64), dtype=float32)\n","spx Tensor(\"sparse_4/BroadcastTo:0\", shape=(?, 13, 13, 64), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4hX-D1VnU_3r","colab_type":"code","outputId":"8a12fcc5-a698-4315-b81d-ee0530dfadff","executionInfo":{"status":"ok","timestamp":1567435770016,"user_tz":-60,"elapsed":942,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":649}},"source":["opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)\n","model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n","model.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=['accuracy'])\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["W0902 14:49:29.251115 140665960609664 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","W0902 14:49:29.258195 140665960609664 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3576: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv_1 (Conv2D)              (None, 32, 32, 32)        896       \n","_________________________________________________________________\n","sparse_1 (KW)                (None, 32, 32, 32)        0         \n","_________________________________________________________________\n","conv_2 (Conv2D)              (None, 30, 30, 32)        9248      \n","_________________________________________________________________\n","sparse_2 (KW)                (None, 30, 30, 32)        0         \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 15, 15, 32)        0         \n","_________________________________________________________________\n","conv_3 (Conv2D)              (None, 15, 15, 64)        18496     \n","_________________________________________________________________\n","sparse_3 (KW)                (None, 15, 15, 64)        0         \n","_________________________________________________________________\n","conv_4 (Conv2D)              (None, 13, 13, 64)        36928     \n","_________________________________________________________________\n","sparse_4 (KW)                (None, 13, 13, 64)        0         \n","_________________________________________________________________\n","global_average_pooling2d_1 ( (None, 64)                0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 4)                 260       \n","_________________________________________________________________\n","softmax (Activation)         (None, 4)                 0         \n","=================================================================\n","Total params: 65,828\n","Trainable params: 65,828\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b3DZfJWhIUhr","colab_type":"code","outputId":"3cda3545-3c86-45c5-955e-7566ba968ae9","executionInfo":{"status":"ok","timestamp":1567437042627,"user_tz":-60,"elapsed":1271377,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from keras.callbacks import ModelCheckpoint\n","\n","checkpoint = ModelCheckpoint('SCNN_cifar10_best_4cls.hdf5', monitor='val_acc', verbose=1, save_best_only=True, mode='auto')\n","model.fit(x_train_4, y_train_4, validation_data=(x_test_4, y_test_4), epochs=200, batch_size=32, callbacks=[checkpoint])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["W0902 14:49:31.516515 140665960609664 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","W0902 14:49:31.610416 140665960609664 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Train on 20000 samples, validate on 4000 samples\n","Epoch 1/200\n","20000/20000 [==============================] - 14s 723us/step - loss: 0.8170 - acc: 0.6619 - val_loss: 0.6557 - val_acc: 0.7365\n","\n","Epoch 00001: val_acc improved from -inf to 0.73650, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 2/200\n","20000/20000 [==============================] - 8s 385us/step - loss: 0.6407 - acc: 0.7473 - val_loss: 0.6126 - val_acc: 0.7690\n","\n","Epoch 00002: val_acc improved from 0.73650 to 0.76900, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 3/200\n","20000/20000 [==============================] - 7s 354us/step - loss: 0.5956 - acc: 0.7690 - val_loss: 0.5852 - val_acc: 0.7688\n","\n","Epoch 00003: val_acc did not improve from 0.76900\n","Epoch 4/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.5422 - acc: 0.7925 - val_loss: 0.4968 - val_acc: 0.8210\n","\n","Epoch 00004: val_acc improved from 0.76900 to 0.82100, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 5/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.5087 - acc: 0.8086 - val_loss: 0.4892 - val_acc: 0.8145\n","\n","Epoch 00005: val_acc did not improve from 0.82100\n","Epoch 6/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.4811 - acc: 0.8194 - val_loss: 0.4503 - val_acc: 0.8365\n","\n","Epoch 00006: val_acc improved from 0.82100 to 0.83650, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 7/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.4761 - acc: 0.8226 - val_loss: 0.4790 - val_acc: 0.8293\n","\n","Epoch 00007: val_acc did not improve from 0.83650\n","Epoch 8/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.4584 - acc: 0.8296 - val_loss: 0.4475 - val_acc: 0.8243\n","\n","Epoch 00008: val_acc did not improve from 0.83650\n","Epoch 9/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.4434 - acc: 0.8351 - val_loss: 0.4306 - val_acc: 0.8347\n","\n","Epoch 00009: val_acc did not improve from 0.83650\n","Epoch 10/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.4281 - acc: 0.8410 - val_loss: 0.4118 - val_acc: 0.8482\n","\n","Epoch 00010: val_acc improved from 0.83650 to 0.84825, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 11/200\n","20000/20000 [==============================] - 7s 328us/step - loss: 0.4043 - acc: 0.8498 - val_loss: 0.4054 - val_acc: 0.8578\n","\n","Epoch 00011: val_acc improved from 0.84825 to 0.85775, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 12/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.3900 - acc: 0.8544 - val_loss: 0.4126 - val_acc: 0.8478\n","\n","Epoch 00012: val_acc did not improve from 0.85775\n","Epoch 13/200\n","20000/20000 [==============================] - 7s 325us/step - loss: 0.4097 - acc: 0.8496 - val_loss: 0.4304 - val_acc: 0.8435\n","\n","Epoch 00013: val_acc did not improve from 0.85775\n","Epoch 14/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.3963 - acc: 0.8537 - val_loss: 0.4031 - val_acc: 0.8485\n","\n","Epoch 00014: val_acc did not improve from 0.85775\n","Epoch 15/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.3689 - acc: 0.8628 - val_loss: 0.4014 - val_acc: 0.8478\n","\n","Epoch 00015: val_acc did not improve from 0.85775\n","Epoch 16/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.3509 - acc: 0.8721 - val_loss: 0.4188 - val_acc: 0.8458\n","\n","Epoch 00016: val_acc did not improve from 0.85775\n","Epoch 17/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.3423 - acc: 0.8751 - val_loss: 0.3645 - val_acc: 0.8632\n","\n","Epoch 00017: val_acc improved from 0.85775 to 0.86325, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 18/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.3340 - acc: 0.8793 - val_loss: 0.3749 - val_acc: 0.8662\n","\n","Epoch 00018: val_acc improved from 0.86325 to 0.86625, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 19/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.3247 - acc: 0.8797 - val_loss: 0.3523 - val_acc: 0.8640\n","\n","Epoch 00019: val_acc did not improve from 0.86625\n","Epoch 20/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.3126 - acc: 0.8845 - val_loss: 0.3643 - val_acc: 0.8660\n","\n","Epoch 00020: val_acc did not improve from 0.86625\n","Epoch 21/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.3026 - acc: 0.8897 - val_loss: 0.3540 - val_acc: 0.8718\n","\n","Epoch 00021: val_acc improved from 0.86625 to 0.87175, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 22/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.2969 - acc: 0.8928 - val_loss: 0.3347 - val_acc: 0.8822\n","\n","Epoch 00022: val_acc improved from 0.87175 to 0.88225, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 23/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.2915 - acc: 0.8916 - val_loss: 0.3497 - val_acc: 0.8730\n","\n","Epoch 00023: val_acc did not improve from 0.88225\n","Epoch 24/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.2936 - acc: 0.8920 - val_loss: 0.3172 - val_acc: 0.8885\n","\n","Epoch 00024: val_acc improved from 0.88225 to 0.88850, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 25/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.2797 - acc: 0.8985 - val_loss: 0.3288 - val_acc: 0.8852\n","\n","Epoch 00025: val_acc did not improve from 0.88850\n","Epoch 26/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.2736 - acc: 0.9006 - val_loss: 0.3330 - val_acc: 0.8775\n","\n","Epoch 00026: val_acc did not improve from 0.88850\n","Epoch 27/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.2653 - acc: 0.9047 - val_loss: 0.3236 - val_acc: 0.8808\n","\n","Epoch 00027: val_acc did not improve from 0.88850\n","Epoch 28/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.2558 - acc: 0.9076 - val_loss: 0.3315 - val_acc: 0.8850\n","\n","Epoch 00028: val_acc did not improve from 0.88850\n","Epoch 29/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.2477 - acc: 0.9128 - val_loss: 0.3157 - val_acc: 0.8785\n","\n","Epoch 00029: val_acc did not improve from 0.88850\n","Epoch 30/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.2384 - acc: 0.9157 - val_loss: 0.3210 - val_acc: 0.8848\n","\n","Epoch 00030: val_acc did not improve from 0.88850\n","Epoch 31/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.2374 - acc: 0.9134 - val_loss: 0.3213 - val_acc: 0.8890\n","\n","Epoch 00031: val_acc improved from 0.88850 to 0.88900, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 32/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.2283 - acc: 0.9190 - val_loss: 0.3282 - val_acc: 0.8790\n","\n","Epoch 00032: val_acc did not improve from 0.88900\n","Epoch 33/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.2271 - acc: 0.9199 - val_loss: 0.3383 - val_acc: 0.8845\n","\n","Epoch 00033: val_acc did not improve from 0.88900\n","Epoch 34/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.2145 - acc: 0.9244 - val_loss: 0.3014 - val_acc: 0.8942\n","\n","Epoch 00034: val_acc improved from 0.88900 to 0.89425, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 35/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.2155 - acc: 0.9224 - val_loss: 0.3111 - val_acc: 0.8808\n","\n","Epoch 00035: val_acc did not improve from 0.89425\n","Epoch 36/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.2079 - acc: 0.9274 - val_loss: 0.3035 - val_acc: 0.8900\n","\n","Epoch 00036: val_acc did not improve from 0.89425\n","Epoch 37/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.2067 - acc: 0.9272 - val_loss: 0.3273 - val_acc: 0.8932\n","\n","Epoch 00037: val_acc did not improve from 0.89425\n","Epoch 38/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.1990 - acc: 0.9310 - val_loss: 0.3341 - val_acc: 0.8860\n","\n","Epoch 00038: val_acc did not improve from 0.89425\n","Epoch 39/200\n","20000/20000 [==============================] - 6s 322us/step - loss: 0.2003 - acc: 0.9287 - val_loss: 0.3332 - val_acc: 0.8732\n","\n","Epoch 00039: val_acc did not improve from 0.89425\n","Epoch 40/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.2017 - acc: 0.9292 - val_loss: 0.3042 - val_acc: 0.8930\n","\n","Epoch 00040: val_acc did not improve from 0.89425\n","Epoch 41/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.1901 - acc: 0.9342 - val_loss: 0.3095 - val_acc: 0.8915\n","\n","Epoch 00041: val_acc did not improve from 0.89425\n","Epoch 42/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.1906 - acc: 0.9328 - val_loss: 0.3096 - val_acc: 0.8958\n","\n","Epoch 00042: val_acc improved from 0.89425 to 0.89575, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 43/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.1829 - acc: 0.9351 - val_loss: 0.3145 - val_acc: 0.8970\n","\n","Epoch 00043: val_acc improved from 0.89575 to 0.89700, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 44/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.1830 - acc: 0.9371 - val_loss: 0.3061 - val_acc: 0.8885\n","\n","Epoch 00044: val_acc did not improve from 0.89700\n","Epoch 45/200\n","20000/20000 [==============================] - 7s 336us/step - loss: 0.1748 - acc: 0.9392 - val_loss: 0.3135 - val_acc: 0.8948\n","\n","Epoch 00045: val_acc did not improve from 0.89700\n","Epoch 46/200\n","20000/20000 [==============================] - 7s 355us/step - loss: 0.1696 - acc: 0.9393 - val_loss: 0.3367 - val_acc: 0.8810\n","\n","Epoch 00046: val_acc did not improve from 0.89700\n","Epoch 47/200\n","20000/20000 [==============================] - 6s 324us/step - loss: 0.1677 - acc: 0.9433 - val_loss: 0.3013 - val_acc: 0.9005\n","\n","Epoch 00047: val_acc improved from 0.89700 to 0.90050, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 48/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.1567 - acc: 0.9457 - val_loss: 0.3658 - val_acc: 0.8775\n","\n","Epoch 00048: val_acc did not improve from 0.90050\n","Epoch 49/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.1576 - acc: 0.9458 - val_loss: 0.3449 - val_acc: 0.8752\n","\n","Epoch 00049: val_acc did not improve from 0.90050\n","Epoch 50/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.1459 - acc: 0.9518 - val_loss: 0.3077 - val_acc: 0.8902\n","\n","Epoch 00050: val_acc did not improve from 0.90050\n","Epoch 51/200\n","20000/20000 [==============================] - 6s 322us/step - loss: 0.1538 - acc: 0.9466 - val_loss: 0.3648 - val_acc: 0.8725\n","\n","Epoch 00051: val_acc did not improve from 0.90050\n","Epoch 52/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.1408 - acc: 0.9527 - val_loss: 0.3022 - val_acc: 0.8928\n","\n","Epoch 00052: val_acc did not improve from 0.90050\n","Epoch 53/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.1419 - acc: 0.9516 - val_loss: 0.3771 - val_acc: 0.8822\n","\n","Epoch 00053: val_acc did not improve from 0.90050\n","Epoch 54/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.1528 - acc: 0.9465 - val_loss: 0.3326 - val_acc: 0.8955\n","\n","Epoch 00054: val_acc did not improve from 0.90050\n","Epoch 55/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.1385 - acc: 0.9528 - val_loss: 0.3320 - val_acc: 0.8978\n","\n","Epoch 00055: val_acc did not improve from 0.90050\n","Epoch 56/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.1329 - acc: 0.9550 - val_loss: 0.3199 - val_acc: 0.8930\n","\n","Epoch 00056: val_acc did not improve from 0.90050\n","Epoch 57/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.1345 - acc: 0.9546 - val_loss: 0.3438 - val_acc: 0.8870\n","\n","Epoch 00057: val_acc did not improve from 0.90050\n","Epoch 58/200\n","20000/20000 [==============================] - 6s 323us/step - loss: 0.1337 - acc: 0.9555 - val_loss: 0.3693 - val_acc: 0.8790\n","\n","Epoch 00058: val_acc did not improve from 0.90050\n","Epoch 59/200\n","20000/20000 [==============================] - 7s 327us/step - loss: 0.1275 - acc: 0.9556 - val_loss: 0.3721 - val_acc: 0.8725\n","\n","Epoch 00059: val_acc did not improve from 0.90050\n","Epoch 60/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.1310 - acc: 0.9543 - val_loss: 0.3520 - val_acc: 0.8860\n","\n","Epoch 00060: val_acc did not improve from 0.90050\n","Epoch 61/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.1244 - acc: 0.9569 - val_loss: 0.3696 - val_acc: 0.8878\n","\n","Epoch 00061: val_acc did not improve from 0.90050\n","Epoch 62/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.1154 - acc: 0.9610 - val_loss: 0.3599 - val_acc: 0.8918\n","\n","Epoch 00062: val_acc did not improve from 0.90050\n","Epoch 63/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.1127 - acc: 0.9610 - val_loss: 0.4043 - val_acc: 0.8935\n","\n","Epoch 00063: val_acc did not improve from 0.90050\n","Epoch 64/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.1155 - acc: 0.9591 - val_loss: 0.3467 - val_acc: 0.8862\n","\n","Epoch 00064: val_acc did not improve from 0.90050\n","Epoch 65/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.1079 - acc: 0.9633 - val_loss: 0.3541 - val_acc: 0.8938\n","\n","Epoch 00065: val_acc did not improve from 0.90050\n","Epoch 66/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.1117 - acc: 0.9618 - val_loss: 0.3571 - val_acc: 0.8940\n","\n","Epoch 00066: val_acc did not improve from 0.90050\n","Epoch 67/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.1026 - acc: 0.9638 - val_loss: 0.3378 - val_acc: 0.8872\n","\n","Epoch 00067: val_acc did not improve from 0.90050\n","Epoch 68/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.1018 - acc: 0.9653 - val_loss: 0.3617 - val_acc: 0.8930\n","\n","Epoch 00068: val_acc did not improve from 0.90050\n","Epoch 69/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0986 - acc: 0.9671 - val_loss: 0.3210 - val_acc: 0.8995\n","\n","Epoch 00069: val_acc did not improve from 0.90050\n","Epoch 70/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0925 - acc: 0.9680 - val_loss: 0.4234 - val_acc: 0.8622\n","\n","Epoch 00070: val_acc did not improve from 0.90050\n","Epoch 71/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0922 - acc: 0.9672 - val_loss: 0.3594 - val_acc: 0.8865\n","\n","Epoch 00071: val_acc did not improve from 0.90050\n","Epoch 72/200\n","20000/20000 [==============================] - 6s 307us/step - loss: 0.0916 - acc: 0.9682 - val_loss: 0.3503 - val_acc: 0.8878\n","\n","Epoch 00072: val_acc did not improve from 0.90050\n","Epoch 73/200\n","20000/20000 [==============================] - 6s 308us/step - loss: 0.0827 - acc: 0.9715 - val_loss: 0.4111 - val_acc: 0.8910\n","\n","Epoch 00073: val_acc did not improve from 0.90050\n","Epoch 74/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0866 - acc: 0.9701 - val_loss: 0.3615 - val_acc: 0.8972\n","\n","Epoch 00074: val_acc did not improve from 0.90050\n","Epoch 75/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0871 - acc: 0.9709 - val_loss: 0.3918 - val_acc: 0.8928\n","\n","Epoch 00075: val_acc did not improve from 0.90050\n","Epoch 76/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0815 - acc: 0.9720 - val_loss: 0.4577 - val_acc: 0.8772\n","\n","Epoch 00076: val_acc did not improve from 0.90050\n","Epoch 77/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.0785 - acc: 0.9727 - val_loss: 0.3950 - val_acc: 0.8792\n","\n","Epoch 00077: val_acc did not improve from 0.90050\n","Epoch 78/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0752 - acc: 0.9751 - val_loss: 0.4182 - val_acc: 0.8810\n","\n","Epoch 00078: val_acc did not improve from 0.90050\n","Epoch 79/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0721 - acc: 0.9763 - val_loss: 0.4041 - val_acc: 0.8828\n","\n","Epoch 00079: val_acc did not improve from 0.90050\n","Epoch 80/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0763 - acc: 0.9743 - val_loss: 0.3845 - val_acc: 0.8882\n","\n","Epoch 00080: val_acc did not improve from 0.90050\n","Epoch 81/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0752 - acc: 0.9733 - val_loss: 0.3866 - val_acc: 0.8875\n","\n","Epoch 00081: val_acc did not improve from 0.90050\n","Epoch 82/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0745 - acc: 0.9746 - val_loss: 0.3830 - val_acc: 0.8928\n","\n","Epoch 00082: val_acc did not improve from 0.90050\n","Epoch 83/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0688 - acc: 0.9760 - val_loss: 0.3833 - val_acc: 0.8955\n","\n","Epoch 00083: val_acc did not improve from 0.90050\n","Epoch 84/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0693 - acc: 0.9763 - val_loss: 0.4308 - val_acc: 0.8842\n","\n","Epoch 00084: val_acc did not improve from 0.90050\n","Epoch 85/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0690 - acc: 0.9755 - val_loss: 0.3925 - val_acc: 0.9010\n","\n","Epoch 00085: val_acc improved from 0.90050 to 0.90100, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 86/200\n","20000/20000 [==============================] - 6s 320us/step - loss: 0.0693 - acc: 0.9765 - val_loss: 0.4089 - val_acc: 0.8928\n","\n","Epoch 00086: val_acc did not improve from 0.90100\n","Epoch 87/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.0701 - acc: 0.9762 - val_loss: 0.4499 - val_acc: 0.8960\n","\n","Epoch 00087: val_acc did not improve from 0.90100\n","Epoch 88/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0606 - acc: 0.9797 - val_loss: 0.5060 - val_acc: 0.8838\n","\n","Epoch 00088: val_acc did not improve from 0.90100\n","Epoch 89/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.0568 - acc: 0.9800 - val_loss: 0.4172 - val_acc: 0.8900\n","\n","Epoch 00089: val_acc did not improve from 0.90100\n","Epoch 90/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.0594 - acc: 0.9802 - val_loss: 0.4584 - val_acc: 0.8952\n","\n","Epoch 00090: val_acc did not improve from 0.90100\n","Epoch 91/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0509 - acc: 0.9834 - val_loss: 0.5421 - val_acc: 0.8572\n","\n","Epoch 00091: val_acc did not improve from 0.90100\n","Epoch 92/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0569 - acc: 0.9807 - val_loss: 0.4483 - val_acc: 0.8930\n","\n","Epoch 00092: val_acc did not improve from 0.90100\n","Epoch 93/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.0548 - acc: 0.9810 - val_loss: 0.4696 - val_acc: 0.8848\n","\n","Epoch 00093: val_acc did not improve from 0.90100\n","Epoch 94/200\n","20000/20000 [==============================] - 7s 327us/step - loss: 0.0585 - acc: 0.9800 - val_loss: 0.4523 - val_acc: 0.8895\n","\n","Epoch 00094: val_acc did not improve from 0.90100\n","Epoch 95/200\n","20000/20000 [==============================] - 7s 358us/step - loss: 0.0525 - acc: 0.9809 - val_loss: 0.5274 - val_acc: 0.8685\n","\n","Epoch 00095: val_acc did not improve from 0.90100\n","Epoch 96/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.0507 - acc: 0.9831 - val_loss: 0.4310 - val_acc: 0.8932\n","\n","Epoch 00096: val_acc did not improve from 0.90100\n","Epoch 97/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0454 - acc: 0.9849 - val_loss: 0.4693 - val_acc: 0.8890\n","\n","Epoch 00097: val_acc did not improve from 0.90100\n","Epoch 98/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0423 - acc: 0.9859 - val_loss: 0.5170 - val_acc: 0.8872\n","\n","Epoch 00098: val_acc did not improve from 0.90100\n","Epoch 99/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.0470 - acc: 0.9830 - val_loss: 0.4866 - val_acc: 0.8915\n","\n","Epoch 00099: val_acc did not improve from 0.90100\n","Epoch 100/200\n","20000/20000 [==============================] - 6s 319us/step - loss: 0.0473 - acc: 0.9838 - val_loss: 0.4841 - val_acc: 0.8880\n","\n","Epoch 00100: val_acc did not improve from 0.90100\n","Epoch 101/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0433 - acc: 0.9855 - val_loss: 0.5137 - val_acc: 0.8822\n","\n","Epoch 00101: val_acc did not improve from 0.90100\n","Epoch 102/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.0502 - acc: 0.9830 - val_loss: 0.4789 - val_acc: 0.8980\n","\n","Epoch 00102: val_acc did not improve from 0.90100\n","Epoch 103/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0479 - acc: 0.9840 - val_loss: 0.4864 - val_acc: 0.8955\n","\n","Epoch 00103: val_acc did not improve from 0.90100\n","Epoch 104/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0383 - acc: 0.9873 - val_loss: 0.4733 - val_acc: 0.8905\n","\n","Epoch 00104: val_acc did not improve from 0.90100\n","Epoch 105/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0408 - acc: 0.9861 - val_loss: 0.5313 - val_acc: 0.8822\n","\n","Epoch 00105: val_acc did not improve from 0.90100\n","Epoch 106/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0434 - acc: 0.9850 - val_loss: 0.5873 - val_acc: 0.8785\n","\n","Epoch 00106: val_acc did not improve from 0.90100\n","Epoch 107/200\n","20000/20000 [==============================] - 6s 324us/step - loss: 0.0430 - acc: 0.9847 - val_loss: 0.5076 - val_acc: 0.8928\n","\n","Epoch 00107: val_acc did not improve from 0.90100\n","Epoch 108/200\n","20000/20000 [==============================] - 6s 320us/step - loss: 0.0386 - acc: 0.9870 - val_loss: 0.4843 - val_acc: 0.8950\n","\n","Epoch 00108: val_acc did not improve from 0.90100\n","Epoch 109/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0444 - acc: 0.9841 - val_loss: 0.4933 - val_acc: 0.8822\n","\n","Epoch 00109: val_acc did not improve from 0.90100\n","Epoch 110/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0367 - acc: 0.9873 - val_loss: 0.5020 - val_acc: 0.8900\n","\n","Epoch 00110: val_acc did not improve from 0.90100\n","Epoch 111/200\n","20000/20000 [==============================] - 6s 308us/step - loss: 0.0416 - acc: 0.9855 - val_loss: 0.5141 - val_acc: 0.8870\n","\n","Epoch 00111: val_acc did not improve from 0.90100\n","Epoch 112/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0430 - acc: 0.9849 - val_loss: 0.4844 - val_acc: 0.8950\n","\n","Epoch 00112: val_acc did not improve from 0.90100\n","Epoch 113/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0363 - acc: 0.9881 - val_loss: 0.4928 - val_acc: 0.8888\n","\n","Epoch 00113: val_acc did not improve from 0.90100\n","Epoch 114/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0379 - acc: 0.9877 - val_loss: 0.5500 - val_acc: 0.8840\n","\n","Epoch 00114: val_acc did not improve from 0.90100\n","Epoch 115/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0368 - acc: 0.9882 - val_loss: 0.5030 - val_acc: 0.8920\n","\n","Epoch 00115: val_acc did not improve from 0.90100\n","Epoch 116/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0347 - acc: 0.9883 - val_loss: 0.5334 - val_acc: 0.8788\n","\n","Epoch 00116: val_acc did not improve from 0.90100\n","Epoch 117/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0325 - acc: 0.9893 - val_loss: 0.4755 - val_acc: 0.8965\n","\n","Epoch 00117: val_acc did not improve from 0.90100\n","Epoch 118/200\n","20000/20000 [==============================] - 6s 308us/step - loss: 0.0266 - acc: 0.9912 - val_loss: 0.5412 - val_acc: 0.8935\n","\n","Epoch 00118: val_acc did not improve from 0.90100\n","Epoch 119/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0438 - acc: 0.9849 - val_loss: 0.5195 - val_acc: 0.8790\n","\n","Epoch 00119: val_acc did not improve from 0.90100\n","Epoch 120/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0343 - acc: 0.9883 - val_loss: 0.5518 - val_acc: 0.8968\n","\n","Epoch 00120: val_acc did not improve from 0.90100\n","Epoch 121/200\n","20000/20000 [==============================] - 6s 308us/step - loss: 0.0345 - acc: 0.9872 - val_loss: 0.5046 - val_acc: 0.8872\n","\n","Epoch 00121: val_acc did not improve from 0.90100\n","Epoch 122/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0243 - acc: 0.9919 - val_loss: 0.5248 - val_acc: 0.8940\n","\n","Epoch 00122: val_acc did not improve from 0.90100\n","Epoch 123/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0363 - acc: 0.9877 - val_loss: 0.5245 - val_acc: 0.8888\n","\n","Epoch 00123: val_acc did not improve from 0.90100\n","Epoch 124/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0304 - acc: 0.9899 - val_loss: 0.5904 - val_acc: 0.8750\n","\n","Epoch 00124: val_acc did not improve from 0.90100\n","Epoch 125/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0312 - acc: 0.9892 - val_loss: 0.5232 - val_acc: 0.8912\n","\n","Epoch 00125: val_acc did not improve from 0.90100\n","Epoch 126/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0311 - acc: 0.9895 - val_loss: 0.5839 - val_acc: 0.8890\n","\n","Epoch 00126: val_acc did not improve from 0.90100\n","Epoch 127/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0277 - acc: 0.9910 - val_loss: 0.5179 - val_acc: 0.8962\n","\n","Epoch 00127: val_acc did not improve from 0.90100\n","Epoch 128/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0315 - acc: 0.9888 - val_loss: 0.5889 - val_acc: 0.8872\n","\n","Epoch 00128: val_acc did not improve from 0.90100\n","Epoch 129/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0227 - acc: 0.9923 - val_loss: 0.6880 - val_acc: 0.8692\n","\n","Epoch 00129: val_acc did not improve from 0.90100\n","Epoch 130/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0269 - acc: 0.9905 - val_loss: 0.5322 - val_acc: 0.8930\n","\n","Epoch 00130: val_acc did not improve from 0.90100\n","Epoch 131/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.0247 - acc: 0.9919 - val_loss: 0.6059 - val_acc: 0.8812\n","\n","Epoch 00131: val_acc did not improve from 0.90100\n","Epoch 132/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0253 - acc: 0.9915 - val_loss: 0.5680 - val_acc: 0.8918\n","\n","Epoch 00132: val_acc did not improve from 0.90100\n","Epoch 133/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0195 - acc: 0.9938 - val_loss: 0.6130 - val_acc: 0.8765\n","\n","Epoch 00133: val_acc did not improve from 0.90100\n","Epoch 134/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0242 - acc: 0.9914 - val_loss: 0.5414 - val_acc: 0.8958\n","\n","Epoch 00134: val_acc did not improve from 0.90100\n","Epoch 135/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0261 - acc: 0.9918 - val_loss: 0.6316 - val_acc: 0.8940\n","\n","Epoch 00135: val_acc did not improve from 0.90100\n","Epoch 136/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0243 - acc: 0.9921 - val_loss: 0.5812 - val_acc: 0.8960\n","\n","Epoch 00136: val_acc did not improve from 0.90100\n","Epoch 137/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0268 - acc: 0.9905 - val_loss: 0.5499 - val_acc: 0.8898\n","\n","Epoch 00137: val_acc did not improve from 0.90100\n","Epoch 138/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0209 - acc: 0.9924 - val_loss: 0.5554 - val_acc: 0.8980\n","\n","Epoch 00138: val_acc did not improve from 0.90100\n","Epoch 139/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0214 - acc: 0.9927 - val_loss: 0.5489 - val_acc: 0.8968\n","\n","Epoch 00139: val_acc did not improve from 0.90100\n","Epoch 140/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0190 - acc: 0.9935 - val_loss: 0.5957 - val_acc: 0.8915\n","\n","Epoch 00140: val_acc did not improve from 0.90100\n","Epoch 141/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.0166 - acc: 0.9945 - val_loss: 0.5886 - val_acc: 0.8932\n","\n","Epoch 00141: val_acc did not improve from 0.90100\n","Epoch 142/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0298 - acc: 0.9902 - val_loss: 0.6581 - val_acc: 0.8758\n","\n","Epoch 00142: val_acc did not improve from 0.90100\n","Epoch 143/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0222 - acc: 0.9923 - val_loss: 0.6319 - val_acc: 0.8760\n","\n","Epoch 00143: val_acc did not improve from 0.90100\n","Epoch 144/200\n","20000/20000 [==============================] - 7s 344us/step - loss: 0.0207 - acc: 0.9931 - val_loss: 0.5858 - val_acc: 0.8882\n","\n","Epoch 00144: val_acc did not improve from 0.90100\n","Epoch 145/200\n","20000/20000 [==============================] - 7s 328us/step - loss: 0.0204 - acc: 0.9938 - val_loss: 0.5911 - val_acc: 0.8950\n","\n","Epoch 00145: val_acc did not improve from 0.90100\n","Epoch 146/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0169 - acc: 0.9943 - val_loss: 0.5593 - val_acc: 0.9000\n","\n","Epoch 00146: val_acc did not improve from 0.90100\n","Epoch 147/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0189 - acc: 0.9937 - val_loss: 0.6318 - val_acc: 0.8918\n","\n","Epoch 00147: val_acc did not improve from 0.90100\n","Epoch 148/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0264 - acc: 0.9913 - val_loss: 0.6360 - val_acc: 0.8870\n","\n","Epoch 00148: val_acc did not improve from 0.90100\n","Epoch 149/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0168 - acc: 0.9942 - val_loss: 0.5806 - val_acc: 0.8955\n","\n","Epoch 00149: val_acc did not improve from 0.90100\n","Epoch 150/200\n","20000/20000 [==============================] - 6s 307us/step - loss: 0.0261 - acc: 0.9914 - val_loss: 0.5823 - val_acc: 0.8858\n","\n","Epoch 00150: val_acc did not improve from 0.90100\n","Epoch 151/200\n","20000/20000 [==============================] - 6s 306us/step - loss: 0.0123 - acc: 0.9960 - val_loss: 0.6051 - val_acc: 0.8910\n","\n","Epoch 00151: val_acc did not improve from 0.90100\n","Epoch 152/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0214 - acc: 0.9930 - val_loss: 0.6172 - val_acc: 0.8910\n","\n","Epoch 00152: val_acc did not improve from 0.90100\n","Epoch 153/200\n","20000/20000 [==============================] - 6s 317us/step - loss: 0.0228 - acc: 0.9923 - val_loss: 0.5566 - val_acc: 0.8978\n","\n","Epoch 00153: val_acc did not improve from 0.90100\n","Epoch 154/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0125 - acc: 0.9958 - val_loss: 0.6554 - val_acc: 0.8902\n","\n","Epoch 00154: val_acc did not improve from 0.90100\n","Epoch 155/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0151 - acc: 0.9947 - val_loss: 0.6091 - val_acc: 0.9028\n","\n","Epoch 00155: val_acc improved from 0.90100 to 0.90275, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 156/200\n","20000/20000 [==============================] - 6s 323us/step - loss: 0.0246 - acc: 0.9908 - val_loss: 0.7275 - val_acc: 0.8610\n","\n","Epoch 00156: val_acc did not improve from 0.90275\n","Epoch 157/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0187 - acc: 0.9935 - val_loss: 0.5639 - val_acc: 0.8945\n","\n","Epoch 00157: val_acc did not improve from 0.90275\n","Epoch 158/200\n","20000/20000 [==============================] - 6s 307us/step - loss: 0.0144 - acc: 0.9958 - val_loss: 0.6718 - val_acc: 0.8832\n","\n","Epoch 00158: val_acc did not improve from 0.90275\n","Epoch 159/200\n","20000/20000 [==============================] - 6s 306us/step - loss: 0.0167 - acc: 0.9941 - val_loss: 0.5566 - val_acc: 0.8938\n","\n","Epoch 00159: val_acc did not improve from 0.90275\n","Epoch 160/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0254 - acc: 0.9915 - val_loss: 0.6156 - val_acc: 0.8820\n","\n","Epoch 00160: val_acc did not improve from 0.90275\n","Epoch 161/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0197 - acc: 0.9931 - val_loss: 0.6114 - val_acc: 0.8910\n","\n","Epoch 00161: val_acc did not improve from 0.90275\n","Epoch 162/200\n","20000/20000 [==============================] - 6s 306us/step - loss: 0.0125 - acc: 0.9960 - val_loss: 0.6128 - val_acc: 0.8948\n","\n","Epoch 00162: val_acc did not improve from 0.90275\n","Epoch 163/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0143 - acc: 0.9955 - val_loss: 0.6042 - val_acc: 0.8920\n","\n","Epoch 00163: val_acc did not improve from 0.90275\n","Epoch 164/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0197 - acc: 0.9939 - val_loss: 0.6239 - val_acc: 0.8852\n","\n","Epoch 00164: val_acc did not improve from 0.90275\n","Epoch 165/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0201 - acc: 0.9926 - val_loss: 0.7407 - val_acc: 0.8612\n","\n","Epoch 00165: val_acc did not improve from 0.90275\n","Epoch 166/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0164 - acc: 0.9945 - val_loss: 0.6042 - val_acc: 0.8850\n","\n","Epoch 00166: val_acc did not improve from 0.90275\n","Epoch 167/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0175 - acc: 0.9938 - val_loss: 0.5999 - val_acc: 0.8945\n","\n","Epoch 00167: val_acc did not improve from 0.90275\n","Epoch 168/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0194 - acc: 0.9926 - val_loss: 0.6032 - val_acc: 0.8955\n","\n","Epoch 00168: val_acc did not improve from 0.90275\n","Epoch 169/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0292 - acc: 0.9888 - val_loss: 0.5708 - val_acc: 0.8968\n","\n","Epoch 00169: val_acc did not improve from 0.90275\n","Epoch 170/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.0105 - acc: 0.9968 - val_loss: 0.6353 - val_acc: 0.8858\n","\n","Epoch 00170: val_acc did not improve from 0.90275\n","Epoch 171/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0263 - acc: 0.9913 - val_loss: 0.6228 - val_acc: 0.8895\n","\n","Epoch 00171: val_acc did not improve from 0.90275\n","Epoch 172/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.0119 - acc: 0.9958 - val_loss: 0.6469 - val_acc: 0.8922\n","\n","Epoch 00172: val_acc did not improve from 0.90275\n","Epoch 173/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.0158 - acc: 0.9945 - val_loss: 0.6948 - val_acc: 0.8870\n","\n","Epoch 00173: val_acc did not improve from 0.90275\n","Epoch 174/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.0161 - acc: 0.9953 - val_loss: 0.6295 - val_acc: 0.8940\n","\n","Epoch 00174: val_acc did not improve from 0.90275\n","Epoch 175/200\n","20000/20000 [==============================] - 6s 318us/step - loss: 0.0197 - acc: 0.9944 - val_loss: 0.6268 - val_acc: 0.8958\n","\n","Epoch 00175: val_acc did not improve from 0.90275\n","Epoch 176/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0115 - acc: 0.9964 - val_loss: 0.6120 - val_acc: 0.8992\n","\n","Epoch 00176: val_acc did not improve from 0.90275\n","Epoch 177/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0129 - acc: 0.9958 - val_loss: 0.6337 - val_acc: 0.8962\n","\n","Epoch 00177: val_acc did not improve from 0.90275\n","Epoch 178/200\n","20000/20000 [==============================] - 6s 307us/step - loss: 0.0122 - acc: 0.9963 - val_loss: 0.5827 - val_acc: 0.9038\n","\n","Epoch 00178: val_acc improved from 0.90275 to 0.90375, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 179/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0179 - acc: 0.9939 - val_loss: 0.6643 - val_acc: 0.8855\n","\n","Epoch 00179: val_acc did not improve from 0.90375\n","Epoch 180/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0167 - acc: 0.9940 - val_loss: 0.6232 - val_acc: 0.8975\n","\n","Epoch 00180: val_acc did not improve from 0.90375\n","Epoch 181/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0158 - acc: 0.9950 - val_loss: 0.7452 - val_acc: 0.8812\n","\n","Epoch 00181: val_acc did not improve from 0.90375\n","Epoch 182/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0202 - acc: 0.9936 - val_loss: 0.6355 - val_acc: 0.8982\n","\n","Epoch 00182: val_acc did not improve from 0.90375\n","Epoch 183/200\n","20000/20000 [==============================] - 6s 313us/step - loss: 0.0158 - acc: 0.9955 - val_loss: 0.6771 - val_acc: 0.8960\n","\n","Epoch 00183: val_acc did not improve from 0.90375\n","Epoch 184/200\n","20000/20000 [==============================] - 6s 306us/step - loss: 0.0193 - acc: 0.9937 - val_loss: 0.6904 - val_acc: 0.8865\n","\n","Epoch 00184: val_acc did not improve from 0.90375\n","Epoch 185/200\n","20000/20000 [==============================] - 6s 311us/step - loss: 0.0127 - acc: 0.9962 - val_loss: 0.6433 - val_acc: 0.9058\n","\n","Epoch 00185: val_acc improved from 0.90375 to 0.90575, saving model to SCNN_cifar10_best_4cls.hdf5\n","Epoch 186/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0109 - acc: 0.9967 - val_loss: 0.7337 - val_acc: 0.8872\n","\n","Epoch 00186: val_acc did not improve from 0.90575\n","Epoch 187/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0176 - acc: 0.9940 - val_loss: 0.5994 - val_acc: 0.8968\n","\n","Epoch 00187: val_acc did not improve from 0.90575\n","Epoch 188/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0119 - acc: 0.9961 - val_loss: 0.7286 - val_acc: 0.8752\n","\n","Epoch 00188: val_acc did not improve from 0.90575\n","Epoch 189/200\n","20000/20000 [==============================] - 6s 307us/step - loss: 0.0104 - acc: 0.9967 - val_loss: 0.6874 - val_acc: 0.8830\n","\n","Epoch 00189: val_acc did not improve from 0.90575\n","Epoch 190/200\n","20000/20000 [==============================] - 6s 307us/step - loss: 0.0196 - acc: 0.9936 - val_loss: 0.6802 - val_acc: 0.8938\n","\n","Epoch 00190: val_acc did not improve from 0.90575\n","Epoch 191/200\n","20000/20000 [==============================] - 6s 310us/step - loss: 0.0091 - acc: 0.9970 - val_loss: 0.6958 - val_acc: 0.8890\n","\n","Epoch 00191: val_acc did not improve from 0.90575\n","Epoch 192/200\n","20000/20000 [==============================] - 6s 316us/step - loss: 0.0117 - acc: 0.9965 - val_loss: 0.6876 - val_acc: 0.8862\n","\n","Epoch 00192: val_acc did not improve from 0.90575\n","Epoch 193/200\n","20000/20000 [==============================] - 7s 332us/step - loss: 0.0113 - acc: 0.9965 - val_loss: 0.6134 - val_acc: 0.9028\n","\n","Epoch 00193: val_acc did not improve from 0.90575\n","Epoch 194/200\n","20000/20000 [==============================] - 7s 353us/step - loss: 0.0073 - acc: 0.9981 - val_loss: 0.6399 - val_acc: 0.8950\n","\n","Epoch 00194: val_acc did not improve from 0.90575\n","Epoch 195/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0219 - acc: 0.9926 - val_loss: 0.6045 - val_acc: 0.8990\n","\n","Epoch 00195: val_acc did not improve from 0.90575\n","Epoch 196/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0104 - acc: 0.9970 - val_loss: 0.6634 - val_acc: 0.8975\n","\n","Epoch 00196: val_acc did not improve from 0.90575\n","Epoch 197/200\n","20000/20000 [==============================] - 6s 309us/step - loss: 0.0138 - acc: 0.9949 - val_loss: 0.6581 - val_acc: 0.8858\n","\n","Epoch 00197: val_acc did not improve from 0.90575\n","Epoch 198/200\n","20000/20000 [==============================] - 6s 312us/step - loss: 0.0128 - acc: 0.9959 - val_loss: 0.7192 - val_acc: 0.8958\n","\n","Epoch 00198: val_acc did not improve from 0.90575\n","Epoch 199/200\n","20000/20000 [==============================] - 6s 314us/step - loss: 0.0211 - acc: 0.9924 - val_loss: 0.6339 - val_acc: 0.8972\n","\n","Epoch 00199: val_acc did not improve from 0.90575\n","Epoch 200/200\n","20000/20000 [==============================] - 6s 315us/step - loss: 0.0146 - acc: 0.9955 - val_loss: 0.7427 - val_acc: 0.8962\n","\n","Epoch 00200: val_acc did not improve from 0.90575\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7feee7da96d8>"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"BGTTYXUjWcXD","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"gm929llrIVvI","colab_type":"code","colab":{}},"source":["model.save_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/SCNN_cifar10_best_4cls.hdf5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMkaGTZJU_6u","colab_type":"code","colab":{}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/SCNN_cifar10_best_4cls.hdf5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"6f037454-2731-4d41-d8c6-0bee65117806","executionInfo":{"status":"ok","timestamp":1567350750481,"user_tz":-60,"elapsed":1508,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":385}},"source":["p = 0\n","x = x_test[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(32, 32, 3), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  np.argmax(y_test[p]))\n","print(predicted_class.dtype)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(32, 32, 3)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nystLAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 32, 32, 3)\n","[[9.6310010e-05 4.0334272e-03 5.4005446e-04 6.9779360e-01 3.5023043e-04\n","  2.8658271e-01 6.1542899e-03 3.1579123e-04 1.0096476e-04 4.0326365e-03]]\n","predicted_class 3\n","correct_class 3\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fGO9i3xkcyBl","colab_type":"code","outputId":"404bf47f-8bef-4c51-f240-a8bcde4ae907","executionInfo":{"status":"ok","timestamp":1567435731342,"user_tz":-60,"elapsed":940,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","outputId":"f8b1a9c7-09d3-466b-fcf2-1a0d536c99b0","executionInfo":{"status":"error","timestamp":1567437323687,"user_tz":-60,"elapsed":955,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":231}},"source":["plt.imshow(x_org.reshape(32, 32, 3), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=True)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(32, 32, 3), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","print(x_comb_gt.shape)\n","x_comb_gt = np.mean(x_comb_gt, axis=-1)\n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-94467b87c1ee>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_org\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"gray\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"off\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m18\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m36\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x_org' is not defined"]}]},{"cell_type":"code","metadata":{"id":"S5bTNMOXkimK","colab_type":"code","colab":{}},"source":["x_comb_gt /= np.sum(x_comb_gt)\n","print(np.sum(x_comb_gt))\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))\n","print(np.sum(combined))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","colab":{}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","preprocessed_x_t.shape\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border\n","\n","numbers = {}\n","for i in range(0, 10):\n","  numbers[i] = sorted_x[border[i]:border[i+1]]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZkomth02qyK","colab_type":"text"},"source":["overlap 3"]},{"cell_type":"markdown","metadata":{"id":"fu1DQa2Q1bSC","colab_type":"text"},"source":["Create dataset"]},{"cell_type":"code","metadata":{"id":"KPgy5YexO7Rc","colab_type":"code","outputId":"5c18115d-48a9-4708-9ba8-f1cd6446bc9d","executionInfo":{"status":"ok","timestamp":1567353247565,"user_tz":-60,"elapsed":520,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]"]},"metadata":{"tags":[]},"execution_count":206}]},{"cell_type":"code","metadata":{"id":"6poTKH9QFdRU","colab_type":"code","outputId":"cf1c3790-b2ec-4870-cbcc-bb1570220701","executionInfo":{"status":"ok","timestamp":1567454481662,"user_tz":-60,"elapsed":1745,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=\"relu\", name='conv_1')) \n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(64, 64, 3), activation=\"relu\", name='conv_1'))\n","# model.add(Conv2D(32, kernel_size=3, strides=1, padding='same', input_shape=(32, 32, 3), activation=\"relu\", name='conv_1'))\n","# model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[0]), 1.5, 32, name=\"sparse_1\"))\n","# model.add(Activation(\"relu\", name=\"relu_1\"))\n","\n","model.add(Conv2D(32, kernel_size=3,  activation=\"relu\", name='conv_2'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=\"relu\", name='conv_2'))\n","model.add(KW(round(32*ratio[1]), 1.5, 32, name=\"sparse_2\"))\n","# model.add(Activation(\"relu\", name=\"relu_2\"))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(Conv2D(64, kernel_size=3,  padding='same', activation=\"relu\", name='conv_3'))\n","# model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_3'))\n","model.add(KW(round(64*ratio[2]), 1.5, 64, name=\"sparse_3\"))\n","# model.add(Activation(\"relu\", name=\"relu_3\"))\n","# model.add(Conv2D(64, kernel_size=3, activation=\"relu\", name='conv_4'))\n","\n","model.add(Conv2D(64,  kernel_size=3, activation=\"relu\", name='conv_4'))\n","model.add(KW(round(64*ratio[3]) , 1.5, 64, name=\"sparse_4\"))\n","# model.add(MaxPooling2D(pool_size=(2, 2)))\n","\n","model.add(GlobalAveragePooling2D())\n","# model.add(Dense(512, name='dense_1'))\n","model.add(Dense(4, name='dense_2'))\n","# model.add(Conv2D(10, (6, 6), name='dense_1'))\n","# model.add(Flatten())\n","\n","model.add(Activation(\"softmax\", name=\"softmax\"))"],"execution_count":51,"outputs":[{"output_type":"stream","text":["x Tensor(\"conv_1_2/Relu:0\", shape=(?, 64, 64, 32), dtype=float32)\n","global_average Tensor(\"sparse_1_1/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_1_1/TopKV2:1\", shape=(?, 19), dtype=int32)\n","x_shape Tensor(\"sparse_1_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1_1/stack:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_1_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_1_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_1_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_1_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_1_1/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_1_1/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_1_1/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_1_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1_1/stack_1:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_1_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_1_1/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"conv_1_2/Relu:0\", shape=(?, 64, 64, 32), dtype=float32)\n","spx Tensor(\"sparse_1_1/BroadcastTo:0\", shape=(?, 64, 64, 32), dtype=float32)\n","x Tensor(\"conv_2_1/Relu:0\", shape=(?, 62, 62, 32), dtype=float32)\n","global_average Tensor(\"sparse_2_1/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_2_1/TopKV2:1\", shape=(?, 19), dtype=int32)\n","x_shape Tensor(\"sparse_2_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2_1/stack:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_2_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_2_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_2_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_2_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_2_1/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_2_1/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_2_1/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_2_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2_1/stack_1:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_2_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_2_1/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"conv_2_1/Relu:0\", shape=(?, 62, 62, 32), dtype=float32)\n","spx Tensor(\"sparse_2_1/BroadcastTo:0\", shape=(?, 62, 62, 32), dtype=float32)\n","x Tensor(\"conv_3_1/Relu:0\", shape=(?, 31, 31, 64), dtype=float32)\n","global_average Tensor(\"sparse_3_1/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_3_1/TopKV2:1\", shape=(?, 51), dtype=int32)\n","x_shape Tensor(\"sparse_3_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3_1/stack:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_3_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_3_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_3_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_3_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_3_1/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_3_1/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_3_1/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_3_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3_1/stack_1:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_3_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_3_1/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_3_1/Relu:0\", shape=(?, 31, 31, 64), dtype=float32)\n","spx Tensor(\"sparse_3_1/BroadcastTo:0\", shape=(?, 31, 31, 64), dtype=float32)\n","x Tensor(\"conv_4_1/Relu:0\", shape=(?, 29, 29, 64), dtype=float32)\n","global_average Tensor(\"sparse_4_1/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_4_1/TopKV2:1\", shape=(?, 51), dtype=int32)\n","x_shape Tensor(\"sparse_4_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4_1/stack:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_4_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_4_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_4_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_4_1/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_4_1/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_4_1/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_4_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4_1/stack_1:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_4_1/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_4_1/Relu:0\", shape=(?, 29, 29, 64), dtype=float32)\n","spx Tensor(\"sparse_4_1/BroadcastTo:0\", shape=(?, 29, 29, 64), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kKtT51dpiFVP","colab_type":"code","colab":{}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/SCNN_cifar10_best_4cls.hdf5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ggioovhyR_oe","colab_type":"code","outputId":"8e7ea469-6288-4314-9680-830b55a52130","executionInfo":{"status":"ok","timestamp":1567452270335,"user_tz":-60,"elapsed":2422,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":268}},"source":["len(y_test)\n","argmaxed_y = np.ones(len(y_train)).astype(np.int16)\n","for i, y in enumerate(y_train):\n","  argmaxed_y[i] = np.argmax(y).astype(np.int16)\n","sorted_arg = argmaxed_y.argsort()\n","sorted_x = x_train[sorted_arg].copy()\n","sorted_y = argmaxed_y[sorted_arg].copy()\n","\n","border = []\n","c = 0\n","for i, y in enumerate(sorted_y):\n","  if y == c:\n","    border.append(i)\n","    c += 1\n","border.append(len(y_train))\n","border\n","\n","# 0 airplane\n","# 1 automobile\n","# 2 bird\n","# 3 cat\n","\n","import random \n","\n","att_test = np.ones((1000, 32*2, 32*2, 3))\n","positions = []\n","\n","for i in range(1000):\n","  pos = random.sample(range(0, 4), 4)\n","  positions.append(pos)\n","  pb = [\"{0:b}\".format(p) if len(\"{0:b}\".format(p)) == 2 else \"0\"+\"{0:b}\".format(p) for p in pos]\n","  att_test[i][32*int(pb[0][0]):32*int(pb[0][0])+32, 32*int(pb[0][1]):32*int(pb[0][1])+32] = sorted_x[i]\n","  att_test[i][32*int(pb[1][0]):32*int(pb[1][0])+32, 32*int(pb[1][1]):32*int(pb[1][1])+32] = sorted_x[border[1]+i]\n","  att_test[i][32*int(pb[2][0]):32*int(pb[2][0])+32, 32*int(pb[2][1]):32*int(pb[2][1])+32] = sorted_x[border[2]+i]\n","  att_test[i][32*int(pb[3][0]):32*int(pb[3][0])+32, 32*int(pb[3][1]):32*int(pb[3][1])+32] = sorted_x[border[3]+i]\n","plt.imshow(att_test[1])\n","plt.axis(\"off\")\n","plt.show()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD7CAYAAACscuKmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztvVmQXFlyHfi22CMzckMCmYklgUQB\nherat+7qrm6yySYpbmrJJNmYyTQjs9Gf/qTP+R0zfc6XvinRZBqTaYbWktgku0mxyGJVdTUatQIF\nFJYCkNhyX2OPeNt8qPn8HEdmAqLJUpx+fr5upt+478Z978Zzv+5+3E3T1DEYDL/48P5nT8BgMBwO\nbLMbDDmBbXaDISewzW4w5AS22Q2GnMA2u8GQE9hmNxhyAtvsBkNOEBzmxX78r/9FFsGTHBDM47n8\nG+R6rrQdFwT8OddV/wCkLnXc9zM4Pl5X9+X2/r+ZekrY13X09wTZQXOEv9MDfq7xWp4ew9t//MD3\ns/b//n/8m6zd2m5Tv6OzR7N2UopINrcwm7WXVtez9tZWh/pVKmNZe2ZujmSvfeP1rL1x73rWfnT5\nIvXrdGReYxNjJHvu3HzWPnf6mFzr+Gnq997FK1n73fd4/DgpZO2llW2SFUv1rJ26sp06rS71S0JZ\nn5HRUZJNzsg6xr7ci3DAYzixjFEpV0jU2t7J2p9dubznRrA3u8GQE9hmNxhygkNV41Nqa/VZkKjP\nefDB1KE/9r2CVk1ZjYfmY2o2XleNkaZ79nNdPWOU6QtIX61r+QeYITQPbKtL8/WkZ6Ku5h2QEoEW\nVqlUytpdv0f9kkQuXgj4UXrh5Zez9mxXPnf77gPqV6s0sna/xyr+Z1dEnR5sifq8fL9J/cqeqLdH\nWYt3Xj7/TNYuBjLfG1c+oX7uUEyBX/7WSyTbasn4PVD3HcdxEq8o8+8M5FoFh/sVZR2PnTxOsvGJ\nI1l7dXU1a/vq+SsUZIx0GPL84/2fwb+GvdkNhpzANrvBkBPYZjcYcoJDtdnJnaRcbwe6zf4GOfcH\njfc3/dzTjon9PE//nu7vsvP2cb1ptxkeGCQHuB8Pct89Pq8njzEM2U4Mw6HMY8DjX758OWuPzYpL\nbWFhgfqNVsUN5SY8/s8u/mXW3toQ912fvXzOxKjYsr/9a98m2YUFcbd1umL3V6snqV/h7nLWfrjK\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"tyRQ0lNLpm5V","colab_type":"code","colab":{}},"source":["np.save(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_cifar.npy\", att_test)\n","np.save(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_cifar_gt.npy\", gts)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9mdjNp6oqLgU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":755},"outputId":"5d459a4c-5463-4105-d3d5-b356bdaed31f","executionInfo":{"status":"ok","timestamp":1567453637368,"user_tz":-60,"elapsed":1045,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["pb = [\"{0:b}\".format(p) if len(\"{0:b}\".format(p)) == 2 else \"0\"+\"{0:b}\".format(p) for p in positions[0]]\n","pb[0]\n","gt = np.zeros((64, 64))\n","\n","x, y = np.meshgrid(np.linspace(-1,1,32), np.linspace(-1,1,32))\n","d = np.sqrt(x*x+y*y)\n","sigma, mu = 1.0, 0.0\n","g = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )\n","print(\"2D Gaussian-like array:\")\n","plt.imshow(g, cmap=\"gray\")\n","plt.axis('off')\n","plt.show()\n","\n","gt[32*int(pb[0][0]):32*int(pb[0][0])+32,  32*int(pb[0][1]):32*int(pb[0][1])+32] = g\n","plt.imshow(gt, cmap=\"gray\", vmin=0, vmax=1)\n","plt.axis('off')\n","plt.show()\n","\n","gt[33]"],"execution_count":37,"outputs":[{"output_type":"stream","text":["2D Gaussian-like array:\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD5CAYAAADhukOtAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAACWJJREFUeJzt3Vty1EgQBdBq8AMD+98pfoNnA2Q6\nnJY03dxzPsmoHlnddxShGyWd3t7eFvDv+/J/HwBwDGGHEMIOIYQdQgg7hBB2CHF15H/sdDqVPd/d\n3V257vv37x9e8+3btw9/3nvrqtnt7W25pptdX1+PZl+/fi1nV1d//0q/fKn/v346ncpZp6tt//z5\n89d/f319Ldf8/v27nL28vIxmT09PH/r3tdZ6fHwcze7v70frHh4ePvx51Zq11np7e/vrF+rKDiGE\nHUIIO4QQdggh7BBC2CHEodXbpF7rZt2a6X+rW1fNunrt5uamnE1ruape62aXUL11s0m9tlZ9jrs1\n03PfneOuLp2e/49yZYcQwg4hhB1CCDuEEHYIIewQ4tDqbVKvrbXWjx8/PvTva/UV2nRdNZvslFur\nr+W23hG3R/XTVW/VDrY9drY9Pz+Xs2q3WbcLbVJtrqV6A86EsEMIYYcQwg4hhB1CXMRGmMnd+G42\nbQWq458+C6+7Gz+9U3/JG2Gmd9y7WXUep5tdurvq3TnuZpXu/E5e2+bKDiGEHUIIO4QQdggh7BBC\n2CHEodVbV0NNNqBMq7eta7nu2LvnzHXrptXbv7oRpqvXulchVedqj3pteh6rmrI7V92s4soOIYQd\nQgg7hBB2CCHsEELYIcRFP4NusmattX7+/DlaN6neprXcdEfcZNfbZEfWWnVl1M26XW9b72xbq67l\n9qjeOpMdgpPz23FlhxDCDiGEHUIIO4QQdggh7BDione9bV3lTWfT6q07H10tN3lY4rnseps+cPLp\n6amcncsuwGlVNjlX3aziyg4hhB1CCDuEEHYIIewQQtghxEVXb9N3x21dy03eD7fWvHqb7Hq7hOqt\n29m29bvZ9ti9Nn1AZHVOpjVlxZUdQgg7hBB2CCHsEELYIcShd+O7O8zdrLprPd2AMp1Vd92nd/67\nu/HdHffuXE3uxu/xDLrJ3fjurvr0mXGTpmHyd60137hS3Vnv2onuN1BxZYcQwg4hhB1CCDuEEHYI\nIewQ4myqt65qqiqq6UaSrWu5Paq36TPoqvN4LtVbVydNq7fJ8e+xoaX727qNK9W6x8fHco3qDSgJ\nO4QQdggh7BBC2CGEsEOIQ6u3rjKa1HJdXddVaJMddt1ssmat+TFe8q637jfQveJp62Oc7l7rKrTu\n++xquep33H3PXS1XcWWHEMIOIYQdQgg7hBB2CCHsEOJsqrfJrKveprNJ5bX15601fxhlda7OpXrr\nqqvpa6i649j61UpdPTj9zVXf2TQvFVd2CCHsEELYIYSwQwhhhxDCDiEOrd66+qd7oODW1cSkBunW\nTR8OOX0A5+S/19Vr3ffS6XaOVXXYtObrHhDZ1WjVuerW7PHbmcym77eruLJDCGGHEMIOIYQdQgg7\nhBB2CHFo9TZ9l1dVM0yrielxVLNuTVfVTOrG6aw7H9PdZt1ndrVcZbKLbq3+HFc72Lb+Daw1/81N\nft/drOLKDiGEHUIIO4QQdggh7BDi0Lvx3SaIyUaN6eaO6bpqNlnzmdnk+I9+Bl2lu6t+5Hk88txP\n103zUq758ArgIgk7hBB2CCHsEELYIYSwQ4hDq7duw8VkNv28rraYfOa0Itm6ilxrdozTjTDdZ1a1\n3LSe2np2Lr+dbjb9vIorO4QQdggh7BBC2CGEsEMIYYcQwg4hhB1CCDuEEHYIIewQQtghhLBDiEN3\nvb29vW06m35e96DEyWd2n7fHbPLQxu7z9njgZHWuumM/8jyey2+nm00/r+LKDiGEHUIIO4QQdggh\n7BBC2CHEodXb1lXTtJ6arqtmkzWfmU2Pf/J5na7+2fo723p29Lnf+vc9+c5c2SGEsEMIYYcQwg4h\nhB1CHHo3/vX1dTSr7lZO1nzmOKpZt+b5+bmcXV9fl7OXl5dyNtm4Mtk885nPrO4Wd39XN5ue48l3\ntvXvdLpuehwVV3YIIewQQtghhLBDCGGHEMIOIQ6t3qbVRFXJTGucrqqZrLu6qk9jN3t6eipnp9Op\nnHWqyqur1/Z4Bl31XU+/l+5cdZ9Zrdv6N/DeuslsWvNVXNkhhLBDCGGHEMIOIYQdQgg7hDi0etu6\nmuhqkOmsq3iqXWrT6m1aeU2e/XYu1VtXJ3XnfjqrvuutP+8zs62r5YorO4QQdggh7BBC2CGEsEMI\nYYcQZ1O9TeqOrs54eHgoZzc3N+WsewhkVaMdXWt19VX1t51L9TbdNdb9Ph4fHz88m6x57zi639yk\nlpvu9Ku4skMIYYcQwg4hhB1CCDuEEHYIcWj11lUJt7e35ayqQqYVWleRdBVVNdv64ZBr9fVad66q\nSuZcqrfprreuuuqqsvv7+7/+e/cbmM62rgenuzMrruwQQtghhLBDCGGHEMIOIc7mbvzkTuZk08p7\ns63vWk+eF7dWf9e6m00260zbhMnf1h379O5zd6e7unte3aXv1uw1q45/mpeKKzuEEHYIIewQQtgh\nhLBDCGGHEIdWb11FMqnRphXa1jXUZEPIWn0N1T1jbOvn5J1L9bbHM+iqyqurwn79+lXOuspu6zpv\nUtd1XNkhhLBDCGGHEMIOIYQdQgg7hDib6m2yS226Q236zLWqaurqtW42rZq6Z+9V52qP89FVjtVs\nuuttuiNuUmt1FdqRtZzqDRgRdggh7BBC2CGEsEMIYYcQh1ZvXf0wqYa6NXu8kmnrhyje3d2Vs+mr\nrao68lx2vU2ryO48Tl7JNK3e9qjlqnXT46i4skMIYYcQwg4hhB1CCDuEEHYIcTa73iYPiNx699pa\n21dv0zppWr1Ndr3tUb1Ndr1Nz1U3q35z0/ey7VHL2fUGbErYIYSwQwhhhxDCDiGEHUIcWr11VUJX\n/2z9/rWt3812dL2WuOtteo6rimryfrj3ZpN6rVs3fXdcxZUdQgg7hBB2CCHsEELYIcTZPINuYnI3\neK3+bny3UaOaTe4Gr7XW7e1tOZtsdulml7ARZrpJpnv9U/XdTF4Z9d5seve8WucZdMCIsEMIYYcQ\nwg4hhB1CCDuEOJuNMBNHV29V/dNVaN2sq+Umm13WuuzqbY9NMlXF1lVv3ffSzbo6bLLxxkYYYETY\nIYSwQwhhhxDCDiGEHUKcuvoE+He4skMIYYcQwg4hhB1CCDuEEHYIIewQQtghhLBDCGGHEMIOIYQd\nQgg7hBB2CCHsEELYIYSwQwhhhxDCDiGEHUIIO4QQdggh7BDiP+6UnG9rTqroAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nEH8APMJSEcVVMsgAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["array([0.39158016, 0.4168078 , 0.44181791, 0.46638345, 0.49026993,\n","       0.51323907, 0.5350526 , 0.55547635, 0.57428437, 0.59126304,\n","       0.60621517, 0.61896371, 0.6293553 , 0.63726333, 0.64259047,\n","       0.64527072, 0.64527072, 0.64259047, 0.63726333, 0.6293553 ,\n","       0.61896371, 0.60621517, 0.59126304, 0.57428437, 0.55547635,\n","       0.5350526 , 0.51323907, 0.49026993, 0.46638345, 0.44181791,\n","       0.4168078 , 0.39158016, 0.        , 0.        , 0.        ,\n","       0.        , 0.        , 0.        , 0.        , 0.        ,\n","       0.        , 0.        , 0.        , 0.        , 0.        ,\n","       0.        , 0.        , 0.        , 0.        , 0.        ,\n","       0.        , 0.        , 0.        , 0.        , 0.        ,\n","       0.        , 0.        , 0.        , 0.        , 0.        ,\n","       0.        , 0.        , 0.        , 0.        ])"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"L35sKcPvhMb-","colab_type":"code","colab":{}},"source":["gt_air = np.zeros((1000, 64, 64))\n","gt_car = np.zeros((1000, 64, 64))\n","gt_bird = np.zeros((1000, 64, 64))\n","gt_cat = np.zeros((1000, 64, 64))\n","gts = [gt_air, gt_car, gt_bird, gt_cat]\n","for i in range(4):\n","  for j, pos in enumerate(positions):\n","    pb = [\"{0:b}\".format(p) if len(\"{0:b}\".format(p)) == 2 else \"0\"+\"{0:b}\".format(p) for p in pos]\n","    gt = np.zeros((64, 64))\n","    x, y = np.meshgrid(np.linspace(-1,1,32), np.linspace(-1,1,32))\n","    d = np.sqrt(x*x+y*y)\n","    sigma, mu = 1.0, 0.0\n","    g = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )\n","    # print(\"2D Gaussian-like array:\")\n","    # plt.imshow(g, cmap=\"gray\")\n","    # plt.axis('off')\n","    # plt.show() \n","\n","    gt[32*int(pb[1][0]):32*int(pb[1][0])+32,  32*int(pb[1][1]):32*int(pb[1][1])+32] = g\n","    # plt.imshow(gt, cmap=\"gray\", vmin=0, vmax=1)\n","    # plt.axis('off')\n","    # plt.show()\n","    gts[i][j] = gt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zVNJ-o8kp9kX","colab_type":"code","colab":{}},"source":["att_test_test = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_cifar.npy\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yeE3spzeW7Mc","colab_type":"code","outputId":"02fcda66-f3a1-47b2-9772-946d3fd00302","executionInfo":{"status":"ok","timestamp":1567463212257,"user_tz":-60,"elapsed":1046,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":621}},"source":["# 0 airplane\n","# 1 automobile\n","# 2 bird\n","# 3 cat\n","\n","p = 18\n","# p = 4\n","x = att_test[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(64, 64, 3), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions.shape)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  np.argmax(sorted_y[p]))\n","print(predicted_class.dtype)\n","\n","plt.imshow(gt_car[p], cmap='gray')\n","plt.axis(\"off\")\n","plt.show()"],"execution_count":103,"outputs":[{"output_type":"stream","text":["(64, 64, 3)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD7CAYAAACscuKmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztfUmMbFdy3X1TzmPNVX8eOHyS3SJb\nbErdJFoNQbIhWdbGgDYybMGAvBVs2Guv7IW9s2FvDBgCPAkwBNgGPElqodnuJpuk2J9k85P8A/9U\nVb/mnMc3etHkixORlcVvLdJwvzirm3VvvbzvvryZEfdEnLCSJDEKheLnH/b/6wkoFIrFQDe7QpER\n6GZXKDIC3ewKRUagm12hyAh0sysUGYFudoUiI9DNrlBkBO4i3+wP/uCfphE8xVKJ9a2sNNL2q998\nifVde+FK2v749t20/dbbf8HGfevVl9P2a698nfX1h8O0/c4776XtP//em2xcnND337d+6VXW9zt/\n4zfTdrGQpw4RmMS/QXlfYp0VxAR9Fv5ZfidDZxKzHsdy0vbBwUna7nRabNxqczNt3//kIesLQlqr\n1//uP8eri2nk4EVe9NEcLfZ3ef8wfysWfQm08Cp8HpZlQ1vMMbHMaZCzsJKI2vKZsRdyjvL1HJwR\nvMavj/ccioHwXjNLRf8X7/zbU29af9kVioxAN7tCkREs1Ix/dm0tbTuFHOtLcmR5oMltjDEf3rqT\ntt/84Vtp+8nuEzZu3O+l7ZOjE9aXLxTT9vd/8Hba3ts/4POIyRy6c+cO6+sPvpu2Pc9L2zmXm47s\nG9SSJuFZZjytAVp9li2/k8+4Bpi0nSMy3bfvP2DD4nVqD3t8vY3np03brcC7ChMZPz6Wx3osCy1J\nMOnFelhous+Y+GwR4O9nuDXW0/1+yZyQBMz4ZMZGRrdJzDE5o28O5G0yjw3u2TIRG5fET7lWc6C/\n7ApFRqCbXaHICHSzKxQZwUJ99m9sXUjbvsX9kcPRIG33DzhN9OkB+eb3P3+YtuNgysY9CSZp+/jo\niPWV8kT1nRxS32gwYONch/zSxw8fsr7/+Ed/nLZ/8zd+PW0/e/0KGxejr5VIH/V0KkgOtdFPFy4k\ncxPFNfDqdkS9nT1+hhEP6NEnLv8YrK0vpW0nR+uWyI+LRa9tm/fhOcNZ1Jtl4+szqDe2bvI3ar4/\n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\nRK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 64, 64, 3)\n","(1, 4)\n","predicted_class 0\n","correct_class 0\n","int64\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nJ0ynDFblDwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"-NM38-E8W-Vi","colab_type":"code","outputId":"e74a1e55-f4e3-4c09-c850-d18192a162a5","executionInfo":{"status":"ok","timestamp":1567463219954,"user_tz":-60,"elapsed":4066,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# 0 airplane\n","# 1 automobile\n","# 2 bird\n","# 3 cat\n","\n","plt.imshow(x_org.reshape(64, 64, 3), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","\n","predicted_class = 0\n","\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=True)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined[1:])\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","# x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(64, 64, 3), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","x_comb_gt = gt_car[p]\n","print(x_comb_gt.shape)\n","# x_comb_gt = np.mean(x_comb_gt, axis=-1)\n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":104,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD7CAYAAACscuKmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztfUmMbFdy3X1TzmPNVX8eOHyS3SJb\nbErdJFoNQbIhWdbGgDYybMGAvBVs2Guv7IW9s2FvDBgCPAkwBNgGPElqodnuJpuk2J9k85P8A/9U\nVb/mnMc3etHkixORlcVvLdJwvzirm3VvvbzvvryZEfdEnLCSJDEKheLnH/b/6wkoFIrFQDe7QpER\n6GZXKDIC3ewKRUagm12hyAh0sysUGYFudoUiI9DNrlBkBO4i3+wP/uCfphE8xVKJ9a2sNNL2q998\nifVde+FK2v749t20/dbbf8HGfevVl9P2a698nfX1h8O0/c4776XtP//em2xcnND337d+6VXW9zt/\n4zfTdrGQpw4RmMS/QXlfYp0VxAR9Fv5ZfidDZxKzHsdy0vbBwUna7nRabNxqczNt3//kIesLQlqr\n1//uP8eri2nk4EVe9NEcLfZ3ef8wfysWfQm08Cp8HpZlQ1vMMbHMaZCzsJKI2vKZsRdyjvL1HJwR\nvMavj/ccioHwXjNLRf8X7/zbU29af9kVioxAN7tCkREs1Ix/dm0tbTuFHOtLcmR5oMltjDEf3rqT\ntt/84Vtp+8nuEzZu3O+l7ZOjE9aXLxTT9vd/8Hba3ts/4POIyRy6c+cO6+sPvpu2Pc9L2zmXm47s\nG9SSJuFZZjytAVp9li2/k8+4Bpi0nSMy3bfvP2DD4nVqD3t8vY3np03brcC7ChMZPz6Wx3osCy1J\nMOnFelhous+Y+GwR4O9nuDXW0/1+yZyQBMz4ZMZGRrdJzDE5o28O5G0yjw3u2TIRG5fET7lWc6C/\n7ApFRqCbXaHICHSzKxQZwUJ99m9sXUjbvsX9kcPRIG33DzhN9OkB+eb3P3+YtuNgysY9CSZp+/jo\niPWV8kT1nRxS32gwYONch/zSxw8fsr7/+Ed/nLZ/8zd+PW0/e/0KGxejr5VIH/V0KkgOtdFPFy4k\ncxPFNfDqdkS9nT1+hhEP6NEnLv8YrK0vpW0nR+uWyI+LRa9tm/fhOcNZ1Jtl4+szqDe2bvI3ar4/\n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\nRK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["1\n","2\n","3\n","4\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n4z9vv1aSWX7Ye/rpp4fyO9/5zvkW0Hng9ttvHx7yjjvuaOo++MEPDuWHHmpj6Xzyk58cyg8++GBT\n95M/+ZND+Ud+5EeGstqdz372s0P5M5/5TFP3ta99K3Xwm970raxgv/zLv9xc9973vnfJ71RVffGL\nXxzKjz76aFP3zW9+cyi/4Q3fMsU651//+teH8j//8z83dRdddNFQVnu1b9++oXzixImh/LGPfay5\n7ru+67uG8s///M83dTt27BjKv/3b3/ofAN/93W2ClN/6rd8ayr/6q79aPficVe2eY1ntN59b67j3\n+R7Rz3zOb//2b++2ofB+Ov69/al9HHsvtqfX0f6prfqHf/iHbt31118/lD/60Y8ujF1Yv379MBj/\n+I//2NRxTyh8Z/FMUNXOO+dI3+d///ffir31nd/5nU0d2+TYXnPNNc11fMfqerj11luH8vvf//6m\n7p577hnKn//855fsu/ZD3+dcp3wvVFUdOnRoyeu+53u+p7mOa5Hrq6rd/7Q7l1xySXPdm9/85iXb\nq6o6c+ZbGdzULvPZeC93BtB1zzHXOvaF46pjzPvpvV0d54PlWc4YvTOljiPtms4h5+2FF17o1n38\n4x9fGLswmUxGHYre+MY3Np+5xlbif5jSTvC9o+8kzhHfr1VVl1/+rUyHuqc5X6zTZ+H9vvd7v7ep\ne+6554byX/7lXy7xFK9E3/VbtmwZylu3bm3qNm/ePJT5t5TaD9qgZ555pqnj+Oh67tXxuaravxNp\ny2eB7199F/Oz7n33vR46h26/9+pmaYPrh3/7VbV255vf/OaSDxCpQgghhBBCCCGEELrkh4MQQggh\nhBBCCCF0WVWpwqlTp4YyXWeVF198sfs9dQuhazBdV7QNuvCr6yFdhnmduv7S9V/dX9iGun7Mw1h3\nVr327NmzQ1ndaunCqe1zTDje+pxjXe2c28xYZpFrjHXfGdsnd+95ZSTLIadwblDqrrUoHDt2bCjr\nnvv4xz++5HVVVT/2Y99K83311Vc3db//+78/lD/xiU90703pzbvf/e6mjvIHSqLUdY/z9f3f//1N\n3e7du4cyXfeqWvdr2hZ1bWQf6fpb1do5tXl012ObKrWge7G6NtKFe+fOnUP5137t15rr6G541VVX\nNXVOSqCuwT04xurCSZdk597Pe6lkonedtqn2r+dOPPY6xdku10c3PromFwXnDjqvbI3vZr4f9Z3N\n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\nuJSRxKWN43yqqxZTLqrrDdH105NJODdQhe5f+j2OA9eIjr1zDaTbNPuhfdL1T8aO/6Kie2Lfvn1D\nWV3UKXlR11nOESUc6s5PCYK6aNF1lP1SScj1118/lJn6sap1TVOXM+4JfTbCZ9OUjnTlU5dF7i2u\nZ3WBP378+FDmeFe9UorzMldddVXzmZKJK6+8sqnjeta1zn3M+fzrv/7rbvt6b/ZZ3X17rsZq1zjG\nugZ76Y+q2jXDNjZv3txcx3eJuj0+88wzQ5m2d8uWLc11Y/e72o8LwSXZuVPq8419r7LNWVzU+dlJ\n03gvZ9Ndnbtu7PfUrtFmUC6g7XEt6pjSDtHOqA3i/tbUZBwvreulfXZrWff02FSK7p3q2uCz6hjz\ns5PVuPR+tDUsuz7pPuEanDfd5qKyHFIF3fu9s/Ys8Bygbvrcc3qmYV8orVsJN/2Vhs+idofvSpVQ\ncx84WflKw3Xg3h165uPfN5x7/v2o7av0kN/jetGzibMt7KOuwTHjGo+DEEIIIYQQQgghdMkPByGE\nEEIIIYQQQuiSHw5CCCGEEEIIIYTQZVVjHLi0IdRnuPRHCrUa1HCpLsTp5NgGNSgunaFq8qgXY2qy\nqlarzzFQTQr7oVoqalmcvl81boTaFafhp+ZF7zVWZ+vSJlH3o/N06aWXDuV59WUuLSfH2Gl5VEfI\na9kPfU6uM6e778Xm0P7rWuVnnYtFjXnAMdTxZOoZjStCTbyLlcGYBE4DqmudbVBHePLkyeY6xjW4\n5pprmjrOM7XsVW2sgSNHjgxl1bZz71NvX9XakO3btzd1vZgvGieBmkIdx15qHu7TqlaT7Nahjj+v\npS249dZbu/3Q2CfcZ7pf2L5LQeRiHNAWqL1iTAWWVTfINjVdL1M1clydVv/1gHsPcS61zq3F3jlD\n7b1L0cdr3bvXxSBwKUp72lRNw+xSIur5hHD9sY/6PuT91C7wXebW9qOPPjqUVYs9NpaPS4PNPmt7\nY2MQuLlwqcBd/IBeDA6XplpTzzH+hEsx6uytiyNxocc4uOKKK5rPPJczRoDC2Aga50y16PNA3b6u\nZ643F1tF4+ScL7Zt29Z8Hpsikc+taWwZc2mtoLEKmAbRxVZx7w6+3/RvRo6j7m/OPdenxt6aN7bR\nmNgw8TgIIYQQQgghhBBCl/xwEEIIIYQQQgghhC6rKlUg6nrlXOxdaiS6W9FtzbmIqGs43X/pQuPc\nylw6L+eizvRm6v7CNtW1jn1Ulzb2a2y6PnXB6t2LKeNeDc6FupXz2egqvX79+uY6zqG62tD1UCUI\nXE9O0uDGh2tG2+cY99y3tR/q2tibJ12rfG69F9u4UNKu0YVS0//R9ZUu3crp06ebzz3ZkqZL5Ni7\n9Jnsh7rj7tmzZyir6yFdG3V+eqmX1DayTu0kP2/YsKGp4x7ks6ncgXtT63ru8pr20LkXOnkN+0+Z\nB12c9TpKSKr66fGq+u64une4RnQ/0haMldHRlbGqTVH55JNPNnU9OYXSc99+NWa5di3h3NCdjXdn\nCef6T5y7Kfcn7+VkMopzge9J1fS84OyCkyrQVZpjrGuWY+7uzf7Tvb6qdUNWu+nSnPJ5XHozfk/3\nOteIjgfPP720h1Xt+Oh64V51kkKic+3WeM9dWc+eLuUlP2tquwtdqrBr167m83XXXTeU77zzzqaO\na3/r1q1DWdMkO6lCT/aj7yTOpZsDXSu0GWtl7j70oQ81n+lGf/vttw9lPbtxn6lUYR70b64bbrih\n2/7BgweHsu5TngO4JtTuOBkdPzu5Ie2JysS4ZpxN5Xl5Fuky7+dklT3icRBCCCGEEEIIIYQu+eEg\nhBBCCCGEEEIIXfLDQQghhBBCCCGEELqsaowDaoCcHsNpz1VnRh0vNW2aNsulXqLGw6VhonZFtahj\n9adO2+70s9QDqlaNbVKfMlY7qdcy9ZLTH+kYUIujc0hdMtOpaZon4vT9Y9OuOZ2YzlNvHPV+1Gep\nNoltanoUxqagZkp15bxOx2BRUy46XCpWzqWm4eNYa1ogar84RzrW1N26ffXUU08NZZ0T6uvUPnEN\n6PeoodOYAYTjozphfr722mubOj43NYYaf4TPrVrEng5c++via3AONbYK733o0KFuP6g7VT0j2xyb\nPtalddPv8NlUr9qLfaJ2gf3XPvL900vFV9XaDH2HubgriwrXvdpqzp/GO9A5Ij2tuLbv4irxM+fE\nxarRuXTvkF5MELVd/OxiFjm4btwYaB2/x/eVxqjhmOi+7aW1VHidxiBg+6oFpm10sUN4bxeDQM8q\nLsYBz028TueQ6YbVJvXSwGo6XT632nbOjRuDCwWmYFQb6eJ1ca089NBDQ3kW/T3tONeKvrP5ztB9\ny2t1La7F9Ly67jnmLt051+W8sbnc3uS5S9+3PHe58zVtmXtOff+4vxPd3x/EpdnmvZ9++umhrHG+\nHO5MNoZ4HIQQQgghhBBCCKFLfjgIIYQQQgghhBBCl1WVKtCNyqWw0LRAdB9RV6yeVMGlx9H0E3QR\nc6k06CKiblBj0+Q5F0j2S11oxsoHnByE7kGavoljoO50hM+iqX/o/uLSN9ENR1152A91S+SYO5d9\n52Lp3CPZpt6b17q0nHRvUhcmzi9T5+k64xrU/jv3pkVNx8jnv/TSS5u6o0ePDmV1Rb3pppuGsktH\nRrc1TRvo0hnSDcztOdogup5WtWtA+9+za5pu9ZlnnhnKmg6Kro0333xzU0f7Qjc23Tvcg5/5zGea\nOnWTe5nLLrtsyX+veuVc3HvvvUuWq6puueWWocwxOHHiRHMd14XuTa4f3XO0o3zOdevWdfvv5AhK\nLwWXa1PvzflgqqhPfepTzXUf/vCHh/Jb3vKW7r0uFFyqVCfJmwdnZ10d59xJDnQN8dncu8a50Tvc\nOYBwf7gzk+4rPs/zzz8/lJmOTdvQ8eF7zkkn3bmLz+bOIw6Olc4F39kqtXCyIt6b/dI2KL/T+e2d\np9Qtm7bFrZELUeao7N27dyjrvh0rO9A1PBauFUpzVQLppHUqa1jrqF1zEizi5GSOXmptdbenTdI9\nzb8v1UbwnERpi+6rsVI5J5VWW0a433fs2NHUUarEvzdmkSq8VuJxEEIIIYQQQgghhC754SCEEEII\nIYQQQghdVlWqQHcSl1VBXYzoaqzfo6sd69Q9iO4qGpWW33OZGcZG33Xu8bxO3WRcdPneddpntumy\nQrgo1c6dn65JTmZAVy2FLkDaR86FRhnmc6uUg/1k/9UVzEXqdq6lvTHWSL1OErNp06Yl61R+01vT\nittDiwTnQd2yTp48OZTVtWv//v1Dma5pVa17KOs0Wj9tga5F7nHaAl17hw8fHsrqYs9+6F7is9Fe\naT/ogqZSBdoTXW9cw9xLe/bsaa6jFOJv/uZvmjpmkyCa4YJzc8899zR1d9xxx1DWNfroo48OZc69\n7j/uEX1O7ml1WezZUbVd+r4gLvp+T8agc+0ygFAOcv/99w9llewxM8Msrp6LahfYbx1nF9Gec67z\nzHmgTdd3Kq9zbXAt6rrk95ytdm7u7KPaHe4JraNdcGuF99Y2uCd03bNNJ1VgGy5LkrbP/nNu1C2Y\nn/Vd76BkgO8AzRbjsmYQ7T/lnpQW6JmS/dD+891BmZvOJ8fAZX7QLE+zjNeiwDXGd0vVK/f4csO5\ndNlEOF8uY4ued3geUdnj+ULPB+y/7tXlgPaE86l/j/X+ptM29L3S+xvPZbhQSQbnTd8J3P9sQ/tB\n++EytpyvbErxOAghhBBCCCGEEEKX/HAQQgghhBBCCCGELvnhIIQQQgghhBBCCF1WNcYBtRqaro86\nFNWkUM+jGrGexk21ai6lTy/2gqZF42ftY0+TV9XqV5xOzukeeT+XCpLfU90dNTXaR2rjXContq9t\n8Nmc1o5jpdoePptLZeJ0oaxTHR/bVP2RS4dJvSHb1LmgllzXKvvP9plSpapdZy5l5KJqlxXOnUuh\nxVRLVW3qQ/3e+vXrh/JDDz00lFWT9573vGcoa0wNfua9NOUi9Wi657im1GZQw+7ijzCegIvtofaK\nsE1dl5s3bx7KjNdQ1aYHJLqvuA80/sG73vWuoax2mbaA8SEef/zx5jqO8b59+5o6jqOmkqWe0cU+\n4V5STSpthq6zXswX3bfso/af/aIO+dZbb22uo029UPa+o/de0zodC64pfd/24tjodS4dY0/DqvuK\naB+pU9c93bOBTtuujI1x4Nrj93QMeGZiXAPVXtMmOU29G3+Ot4t14dKmqg6Ze5z7SuNfuXVA9BzA\n+9EmqX3i+nHPxjWidp5jp+2zDT1nLGqMA9pStdWMOfWlL32pqeP7fMuWLU1dbx25FKV6XmBf+M7Q\nPvbWtn7W8zU/cy7P57tA39OMbTZvysWxcBz1bwXWaT/4eez8qv1w6XSJ2hOeHV2MA86p9p82VuOj\n9dA+vta9H4+DEEIIIYQQQgghdMkPByGEEEIIIYQQQuiyqlIF56LjXLaI1tFlh64fmiaPKc3OnDnT\n1DEdmXP3pSufugexTlMR8lpKNOgiXNW6sbh0gOp20nNt1OvYD+daxzqXRsrJLnSM+dzr1q0byuoq\n1Eu3oqjbYM/dXV1y+D11m+Ya1PVDqQLnRuUOdHvUdcAxpuuhzp9zeXY4V8pFQdMZ8vl1PDl/6rLF\nsWZZ1wPXsKa/Y3pA57bGdarui27P0V5xv6i7L9eb2iemdDx27FhTd+mllw5ll3aN/br66qubOt3H\nL+P2labUZBpBtWuaRvNldu3a1Xyma7Q+J8fcuZUTtWucC6Y7qmrnV21GT76mrpP8no7dJz7xiaHM\n99k73/nO5jqO1Sx2YVFlDVynum6cmyqvHfs93dPOvZyux7RJap+cPeZ7TlOB9t5lui75jtI5nudd\noOPIda/v4p7sR22LSxfm5KM9uaFex+fWOXSyN/aL7bvvKG4P9tIyu3F0c+Zkpi6FH/uxqHZA4RlL\nz6B8T+hccizUjnMP8qzn3NxV2sM54jtJ22C/3JlA14OTEJ8v3B5Y6fOophft4f5WU5tHG8515t4B\nOr+0LXoepISW7yZ9Ftp2bZ/r060Dri33fuudkRzxOAghhBBCCCGEEEKX/HAQQgghhBBCCCGELvnh\nIIQQQgghhBBCCF1WNcYBUe0bUxm5VFmaUoa6P2o1NO0aYxyoLp3aZuqCNaUg9SraBvU8Lj4BNViq\nbTx69OhQVg3Wpk2bhrLTbrkUHxxz1ezwe05359Il8jm1j5zTZ599dsn2qtpUbjo+Y1OIjNX16RwS\njXHAsXMpHamRcmuEdZqalHp9l47xQoFjq/p+jpOuFZf+k3E0fvRHf3Qoa2okxhnReThy5MhQfvrp\np4ey2hauZ51zrmdq/auqrr/++qHMtD2qi+P32I+qqgMHDgzlPXv2NHUcE46drqkXX3xxKKtOu4dL\nY6RjwDrav6rWzjHdps4TYznoHqDmT+1Ozy7rdRwfTUnJ+bjxxhubup7N0zRM1DbefffdTd3v/u7v\nDmWmCdN3AJ9TbaNjUW2GSy3ci8lT5VPWsh3aD91zfD/qXHJPc440HaNLr+ziB/B7LpYD7aa2r9eO\nwY2xnhd6954lBZt7T/fiVDhNuIsv485CLGv/3Ry6WES9+XWxmdy5t7duFZfScZa4KGsZ2kEXM0LX\nCudZ4xPQnvJvDBdvTeeLa4fvUf1bh9fpXPLz2Hg95xO1jbSBbp0uBzwT6PnPxdMjqv3fsGHDkmVt\ng+1rfAKecfR7/FuT65h/+1W1z6ZxrXoxGi677LLmOhe7hbZSz71j5m3trcQQQgghhBBCCCGsGfLD\nQQghhBBCCCGEELqsqlSBrhPqIsLPLs2Jpl2jWwVdLjR10f79+4eyuvTSLdalPaR7h7oC8tnU7Y7t\nnz17dig79za6sWidc6eja5WOI783SxoY4tx+XGokwnGk22dV61Kjbs2ca3Wd5L1dSiV+T/vI1HPq\nXsbx4TpjCs2q8WuEc6/94HOqOxy/txZd1+aBe9rJcNQtjnIS3e9cV3ThoqygqupjH/vYUD5+/Pgs\n3R4FU70ePHiwqbv99ttHtfHud797KF9xxRVNHV0DnUs615RKCeimqe7xPZx7uML5dWkcKcnYt29f\nc90jjzwylF3/KbuoaqUv3NPqnsf1onI42m9dn7SxTsp2//33D+Xf+73fa+p6KcRUjsC5nkWqsKhp\nWrdt29ato23VOeF60/co3T75rlQ3d84fZU9VrT3h9/S8wHWka4r91z3Hvco21WWVtkzdS7lm9f2i\n54KXcecRHQP2X9OjzoN73/LZVErFedI9wXWg50aOpb47iJO9sA2dG/aT86vPSTdnXcc8r7nU1M5m\nuHfrotJL4VvVnu/0bMbvzSKpGQvHl2eTWdLLr0S/VhKVZ7nUyMsNx1slrmPR88gTTzyx5HUqneT5\nQf9OoT3ROtpenlUefvjh5jrWqW3nOZgSDZ0Lyh1Ueu1kaHo2WooL4y+PEEIIIYQQQgghrAj54SCE\nEEIIIYQQQghd8sNBCCGEEEIIIYQQuqxqjANqxFT/TW2MavJcekDqMXidpj5jmivVSvfiJKj+yKU6\npMZN9TDsF++lbVCvopo26nl0DKjzcyk42EetY1+cno73Vk0kn1PboHaLcR5Ux8p+qF6Zc+NSHVJH\nqM/JMdZxZIwDl5qK2jnVA7nUS730YtpHF8/iQkmpRKjz1LQ6hw4dGsqq9WIKGx0XzhHbvO+++7r3\nVrZv3z6UqY9U3fRKc8899wxl9qmqjXmgNpX7h1o7tU9cbz39s6JtONgv1QlTk8s0iKo9ZPwJpqbV\n9nX9sJ+cQ9X1cXxUR813iWope5p5XVeMZ/Hkk09WD/aD9qiqfW7V5Dtt7KLGOODz6jPQFqj95JpS\nbSffPdzHeubg+0W1o0ypxX7p2uYa1hgHPZ2q3tvFzSC69/le0rU+NsYBx5jPXNU+N8duuVJ/9lIw\n6vuWe1XXCPuiWmPC9eJisGhcF/ce6GmUXVpIpffc+pxsg+u76pWxFy50OM9uzlcaF9fgQsL9nTI2\nffpagrZRY1KRXbt2DWXdc7T1+g5nOm3GNdC/dYi+33gGpG3Rd4D2i/A5NS7KmLNdPA5CCCGEEEII\nIYTQJT8chBBCCCGEEEIIoct5kyoodLNQ1zq60KmLJl2CemmMtM65tNG9Q90/6ZKnbn3OHZfurUzP\npi63zg2dbWq/6I7mXN/ouqXuKXSF43M6N1fnjqVu5XRbopumXke3HF0HnHt132E7vbJ+1jHgOKpb\nIu/NsrbPMVHXUta51KR0FdL5ZBuL6oKs0K1748aNTR3d17WO6N6hKxbHcP369c11dBG78sorm7qf\n/umfHsqcI6YGrGr3o87l6dOnh7Ku2c2bNw9lplZ74IEHmutoW06dOtXU0c1Zx4B7mvfWfctUhE6m\nRHTdcy1q+9wHWsc9yNRhn/70p5vrKFW44YYbmjq67u3YsaOpY+o8jpW+R+6+++6hrPPEVHRMcVTV\nri3aK7Ut6qreg+vlwIEDTR3XlrpsL1oarzG4VHKs03XPedD1rO+UXhtMqUVJVFVrMzgn6irq0jHy\nXaOpAnvnJHV75dpTt2C24dINEn3nOTdYtk9bu1xSBcKx0lR8fDYnDdT+81o+p44BpRAqYaIt1v3e\nGx9tn+tH57C3p/VZ+Jy63l167hCWm0WXKoyFtthJYlQuwHOMkyw6NmzYMJQpl5olRTPRPqo0byni\ncRBCCCGEEEIIIYQu+eEghBBCCCGEEEIIXc6bVEFdA+k6pu5WdMnTSLZ0xaKLt7qJ0x3NRSemm4aL\nVKwuZy6aPl3OLrrooiX7pDiXYXXbpHsry5deemlzHSUC6jLMZ+NzO1mHuiLxe2OzZqhro5MZsM/q\nxtdzPXRyAXXRYZ9dlG2Olfafn9Udmp/p5qhjxXvpOrgQ3Q1dFgzud7r2V1Xt2bNnKKsrcE+WQ7fz\nqqrHHntsKJ84caKpYzYD7iXKCqpaV1ru76p2nvXZuB9pTy6//PLmOko51L2N2SN0re/cuXMo9+RY\nVa3dHCtV0P3HfeUkTFrHfrG/GtGY/dKov9w/Ku3hOuC+1TacDIp7TuvYJt8dtMNV4+VZtGOamYHr\nTrMGXYhwX6kbJiV/uqaYqUezAXDeuefUnd9lZuDZxWX6cevGSRW4hlnWPcf3r76Lee+xmXj0TOPe\n5717OVxmDL034R7W8x+/p1KC3pmmqn2/sw29jnuasiftl3MT5ty4M4GuY8437aTa6N7ZR6/VNXgh\nZmgKq4tm7eAau5Azejj5PNE9d+zYsdd8b9odngdVRjkWtQPM/NAjHgchhBBCCCGEEELokh8OQggh\nhBBCCCGE0CU/HIQQQgghhBBCCKHLeYtx4LSuWkedsKZGor6EGjTVNhKXGon6EdWnUBusfaROROv4\nmc/JtE5Vrb5ONX9s/7nnnmvq+JnPxvRj2g+XTo1l1w99TurpNEZAT0+n2kD2S+MHUAuqms5ebATV\nPPOzajNdai19nl77xOlOueZUs+j0nmQlUl+dD7jeZknhw3gFOl9sh/tY03m59cyYBy7OCtewsy06\nz7yWa1bjJPDZ9N60VzoG1MgyDZ1qpbkuVfvfw+ljXVox3S/UIbv0okyjqbEuaOtVZ86+sE73GGMG\nOL2yptDlnPJ7qpnnWt29e3dTxzllqklNHXjo0KGhzJgJFyqcL7XVnD+t4xpTnS2/x7Wue47Xufd5\nL3ZPVTt/mj6TAZdwBwAAH1ZJREFU99Y9x/3CMtM6V7XnEV1vfFfqu57nDtcPjoHuTaer76HvK9pl\nF1uF/XBxGHSeOPdax3Z6qZa1j3ru4rpT28v9Sfs0y3mK48o6Tf/GcdUzK7+XmAZrDxdLa2wa1fOJ\nO/+6ukXHpY3nZ42Po3GL5oF2bd64Bq+VeByEEEIIIYQQQgihS344CCGEEEIIIYQQQpdVlSrQbcq5\nvil0Y1O3RLrv0TVGXYbppqXui3TroxuYutrQPUXdvpbDDcylP6LbmrqjcezocunkINp+b/z133lv\n7Qdx7XO8ddw0hSTh3KjbYy8lm7plE3WPpNuYultzLOmSrGuJro46duwjn0Xdq+nqpOPI555lD61l\nOA+amoyoq+iWLVuGso4h3b85dyrf2b9//1DWdF50MaUbr64NrgG1T7y3uqn2XOfVrZlur84tW/vf\nS+GlrsXsh8oAerj0bM4+6RhwrXOsNmzY0FynEg3CudE9wLni2Gk/KIVQmRvbVIlAz64xjVtVa+c0\nnSfn7aabbhrKmrrpvvvuG8pMXVn1yvG6EOC61HexkxLwWnXr5v7nuDOtqda5d717Z2/cuHEoayq/\nN7/5zUNZ11RvzTIFZVUrpdJUsnRh1fcc7YuTU9BOuHfZWKmC4tJz91JC67M4qQLHzp0X+M52shF9\nN/F+6q7M+eU60HeHO2+yj+yHkyqElYVnRM5rVbs23bokunfYvkrmen+n6Bl0NSUpKrtbDlf8RcDZ\nFr63luNMrmuEZwueW/R8vJLE4yCEEEIIIYQQQghd8sNBCCGEEEIIIYQQuuSHgxBCCCGEEEIIIXRZ\n1RgHZJYUdNTsaLocplejvkb1QUyLoZqgnh5J2+D3VDvPPqrGqKdBc7pB1cgS1ftSX0fNtmqwnKZw\nHrT/bFOfuTcGs+jzXP97qQ4VahhVk8o2tP1ejAk31y6FWC9Fp143SxyDRY1xQE0YU68qqg/l2Ks+\nt6fdVS0z9cVqW3q6Up1X4tKKubgZxMU3cWkndS1ynfLZ1NY6DX8Pp2tWDa6muiO99HhMS1hV9dBD\nDw1ljVPBZ9O54ZjwHfD0008313GNaPu0tzr+1DKz/xpzg/3QsevF4ND1SDuhaZ4Y40DtyaLaBY67\n6r978Tuq2r3v0otyf2vqM86Jpkzj/VwKYu5NnS/qlTU+AfdELy6O3lv3rXu/9OzXvPZ13hgHxKUi\ndHpx9ln7z8/unMHx0Pgs7lxH1KayHZ4jXYwDfTaNm/Ay7nwTXjtMnUv7XtXOib7XGJ+L+0Xni3bH\nne90n7p4XcT9LfXwww8P5Xk18YwBtGvXrqZulnTaFwruXLcc716N+8Z3GtND63rROH/LSTwOQggh\nhBBCCCGE0CU/HIQQQgghhBBCCKHLqkoV6L7j3GnU5YKuXiofYDrG48ePD2V1X6T7kaZG4v0OHDgw\nlNWVh31Wt0S6j6iLWS91mXNz1+/w3jt27Gjqbr755qG8Z8+eoaySBo6/S5nW65P2S+eQLjrOnduN\nI+vcvZ07rnMLpguxuhO/+OKL3fa5npxkgmOgLkz8Hq/TfvSeRVlUF2SF61JdkseiY6F75GV0Xpl2\nTV2B3fcIXffUZZhr1qVX4jzrvqJtUTd62rzPfvazTR1dJD/4wQ8OZXW/pJ0Y697m1p7aFpe6iO1w\n/PU56a43y35hm0yDqLadrv66DiiBU7dT7mPW6fuHbq1bt25t6phmz9kFJ6e4EOH+cCnHnFRB38W0\nybQ1LqWj7mnej2tP3zVc97qvKI1QmQT7TMmivispZdE+utTCPdmmukJzTFZaquDkeizruYKfXdo7\nh5snl3bSSchoA53khrZmbKraSBVWlrNnzw5llypb5/Lo0aND2cmraT90X/Fa3Y+cd+5pfd9Svu2k\nn2NR+/re9753KO/du7ep499jr1c4BnpO6kmeHSq3652Rda2uJPE4CCGEEEIIIYQQQpf8cBBCCCGE\nEEIIIYQu+eEghBBCCCGEEEIIXVY1xkFPJ17V6sxUw3HmzJmhTB16VasTeetb3zqUr7322uY6pibU\ne1Nn5lJq7du3byhrusSe7rGqr1N3addU/3L69OmhrFpHpkShtptap6pWSztvOkan+aMOT3XCHC+O\nv45VL2VhVdtnHYNev1yKKW2fbWpdT8uq+lSiqf96ad30WVwfHbOktlxLUNfnUvfpXHJOdJwOHz48\nlA8ePDiUn3rqqeY6l9aNunraHRcLQaEWXedHYx704PpgutWqVrevad3Ib/7mbw7lj3zkI00dbe9Y\njaLqL7lvVX/v1jNtO+2+apk5djqObF/tCe0oy5dffnlzHdMaqe3tpbWsanX4HDtNocT9rnaBa4vx\nFNRGU5uu/R8bU2aRcOl9Oc9qFziGLo2ji0/Ad79Lc+riszB+ip4XeM7QNcW55PrSPcf76b2ph3Z2\nhs/mUlirzWNfxmp1Z8Htd+LOC2PhOtB5oi3TOq47t//43nfpHl2a3AslntFqomcJTYnag+uI79eq\ndk/rnuOZo5dit6qNp6OxSfiZe7+qjb/BvaqxzPR7r5Wf+ImfaD7fcsstQ/maa65p6o4cObKs954X\n2u9542bNi7OHvfg7auP4XtEYBz170oultxIs5okihBBCCCGEEEIIq0J+OAghhBBCCCGEEEKXVZUq\n0B1wlnRedLtTV1qmFtu+fftQVlfO9evXD2V1aaOr6Fve8pahrG5EV1xxxVCmy5KirjHqSvkyKoXg\nZ3U/IpqOh24udFNS10O6OlG6oW046E6nrt09t+Cq1i2HLjXOvdDJKdStj9fSjVLbcG5LznW15xKp\nz0m3NHUd4pzS7VGfhW6hY9NmLjJcRy4dIFONVrVzpBKmL3zhC0OZEh2HjrVz/R/LcrgN0g323nvv\nfc3tqW2hK9xYO+CkCppiiutZ7810krTf6hZMl1EnP1IoGaDrKlNoahsqP2K/1O733k3af+e6SikK\n5WXaD7av/aB7/oViIzgnOsdOqkBboOcFygI47ioX43vCpRfle01dSl26RK4P3S9c6+y/uk1Tvqjv\nevZRn4335rOpKzfvre278ZkHfQf2Uh47aaM7E7j7cT/qvqJbOctV7btK3z89m+fSTuqzrbRU4UKx\nEz00FetYqQLRtf3II4/M3IaeAfhZ7cLmzZu73+P7gOvLyWSWA32X8e8UJ/Hi98bKMpcLnilXW6rg\n4Lxxfep5hDZJ7RrPHCyv5nPG4yCEEEIIIYQQQghd8sNBCCGEEEIIIYQQupy3rArqou6i9fOzRqSm\n+yldezR6Ot3u1EWLLmdsQ93W6BKk7pF8HpUSsI5uJy7K+qlTp5o6Po+6cx87dmwo0/VJXVfYj6uu\nuqrmwbnzu6wQHDu6MOk48rOOo4ugzGeli6LKKbjOVErAZ1MZCe/HNaJt0MVIx5/t001Jx4DuTM5F\n90KBz+hcAV1kb80gQskR3f/Ure/s2bNL9qOq6uTJk67ba4IPfehDQ1kj+bP/HANmEKhq3dydBIuo\n+zP3ptoF7hFdv7yWtkuvozu3zhPtqNoMuouzTefGrLbFZVUgtDXqXki7oLaRmXBoF+64447mOroz\nzuN2u2jQNVf3LedZZTOcW5e5iHOpe4J7Se1Oz01f7T2/p6667L9KUvg8XA9bt25trqPrPGULVa08\nS8eu5+bssm/omp03g0EPt6ddhoWepGGW+7Gsz8l3s64zShB0fnvRzp3UQvvPeWI/dE3POxerGYX9\nfLAIZyU9y9OGuL8xVhPKCata6R7PFVXtfuTfaqstVdAzyHLj/o4bK/fk/tazG887Ou98d9AGLXc2\nDUc8DkIIIYQQQgghhNAlPxyEEEIIIYQQQgihS344CCGEEEIIIYQQQpfzFuNAdSDUpKjWjlpE1eBS\np0Wd35EjR7rXKdSjUVekbVDro+kM2UfVyfF5WKfaSepWNYUc0/3o9/hsTmtMbZLqv5yOsIfOE/uh\nej3qcpxOmDpCp+lS3Sbv51I08d7aR5caif3n9zTlD9vQPjJ1KOdGU9RRD6Zz4XR7Y+dtrTFWu/fY\nY481n6mJ1zG88sorhzI15ArnSONhcK2cOXNmKH/pS19qrqNOkWlf9bOmXeNa4Z4+fPhwcx33/rXX\nXtvUbdmypdt/7neOj+oquefG6l41RRPXpbbBcdQYNbSp7Af3SlX7nBp/hPdW28K9yrnWeWIbqlVn\nv9SmMsYO+6x9ZJ2mbtu1a9dQZrwajbFx2223DeVeit+lWFS7wHWqz0t77NKRaSwOwv24e/fupm7n\nzp1DWeMlcc320gBXtXta9ae8VvvPMw7Xl+4dfn788cebOvZL4yUxrgvPI2o/OHZO+09cnIR5YxAQ\nXcuztNmD469zQbup48P1yTGtavc/zwg6PrQ7Gp+F5wA+p67pno1T1HYtQgyA14KmYl0EuM9cPAyu\nAT2Dcj2o3ZknToLGT2FMJG2f/Xe2d6VZ7rXt2nMxncamSHTx4lxsFY7/SqflJPE4CCGEEEIIIYQQ\nQpf8cBBCCCGEEEIIIYQuqypVoOuKunC4lDh0/VD3F7qQ0G1D3X3ZpnNRd27udDG95ZZbqoe6Tffc\n19U1je7QdFmtat0NVarQczdkCrCqNuWHc4F3rq1jXXacCyHHR+eTLpB6L9cm2+F1+iwurRHb0BRZ\nnCuOsbpGsw11bWRfOIfqOs4+zjJPi+qSPBZ1L6dU4YknnmjqOE5vfOMbh7LaFroF63xxHdGtWaUP\nXBvqws/P6nLGvtAlef/+/c117P9ll13W1DlpDMeAz6n9OHTo0FAe6/o7Nn1aVV9KVfVKG7XUd6qq\ntm3b1m2DqM3gXqLd0T5yH2ufOHa6frh33djxedSFlq6mfMfoOti3b1+3fceiuiTTRuq4cw07u+fW\n4tj0wepGyv04dt27OVD34d4ZwaXb0r3PNUXbovfjGLu0ls5temwqVh0f58ZLu0m3fx0D9z536VfZ\nF17nUp+p3XFpWtl/2g/th5NJ9NJDc/1Vtc+ic8g23fvnQkTP1/OgkjOOvY7n2JSDbJNnGP3s9hL7\nofJtZ9dOnDgxlF3qa6J7jp91DLinl2P852U5zsJMNalyr14616p23zpJOG20yk2I2kn+baJ/a64W\n8TgIIYQQQgghhBBCl/xwEEIIIYQQQgghhC754SCEEEIIIYQQQghdVjXGAfUdLu2XajqoG1cNMTVp\n1P2o9oNaVKdzdv3YtGnTUGa8gKqqdevWde9NzRE1eaqZY/9VL8V0P6od4r05Ptp/6vBUy+f0gD2c\n/l61PRxzfk91faxTLd9Y7ZCLl0F0DVKvpXPIa51us9dfbZPz6bSlyrzxJ9YyY/VomjLNpfvp6VZV\nq8b9qHrDSy65ZChv3bp1KGusBe4r7kVtX/dtbx1pDBOnQ6be8Pnnn2/qqJujXk9TvT7wwANDWdOK\n9dBncWuW9k/nmjbVaYEdbFNtak8DrfbP6cepSVW70LMvTK1b1c6N1nH98Fluvvnm5joX2+FCpJcC\nt/7/9u5lRY9yi8P42nfgRIKoKB6iiQYdRKLiJF5BnHpvjsULkOhAFETwhEjQENF4loDkIvbI2k/9\nd69lddndsTvPb1Rf6kt9dXjft6qLtd5V28eMHBPZFtke8n7L65W/zTkD2L6yLfC65vwpbH/5//iZ\n+azZRqcSohwbc1zjOpZWy/Fjel7rymfn99h3DjPfEM/xNE8M+2M+L/C38zmjew6b5jjI68RzkM+Q\nPOcsxZrj5pQvzjbDsTzLcnb7W7VuP9O8Yvqf8+fPL8u8b1atz/3Up9nepvK+iX0kn2/4me0t+/eU\nL89nmiyzmGWC/5LzR7F8cN7L+Kxyr/Lvq/aVnaxa99WHHnpoWc55ifIZrTOV4OZv5djF8TDbS57z\ne+H+ehKRJEmSJEmH4osDSZIkSZLUOtFUBYbCZfgOw76mcoZTODZDdBhOU7UuY5brWH6LKQ0sXVJV\n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\ngf8v+xz7fp5jtotsIzx3PP/5PZbizLGL+8L94HVPuY9T2s7eMm/3M5Y9zfQX3hPZh7NPsP/lmMEQ\n9QzTZ1uf/k7J/n6cbt26tfrMY+XzTqZATiUA2Vfz+YD9am96wr9RPv+xne0ty8yxJlPfp7+VtzDi\nQJIkSZIktXxxIEmSJEmSWr44kCRJkiRJrROd4+DOnTvLcuYrMw8zc3Sm0hH8f11Jwap17s2UhzyV\neeLnzK+ZyiB25Rgzf2cqocTPW0sY5ve25srwe5k3uLXUyLSPW8tCZm4Y9yvbT5dTmNea25hKvWRe\nMPeT7SBzaNnGs/zP1lzj6XtTTvhxl8Q7Liyr+OKLL67WPfXUU8ty5hQyl5mlWKvWeeMswXb16tXV\n986dO7csZxkjbnMqxTrNF7IVy6JlPiDbQ+apMud3yv1nn8i5VdgPmJtZVfXWW28tyyxTeOPGjXYb\n165dW61jPnTm8fL/cf/zWjCPPctmMpf58uXLq3Wc1+Dtt99elplbXFV18eLFZTnzqPn5ueeeW63j\ntWF///HHH6vDEqBV6+vEdRcuXGh/K/v6dO7eeeeddl/+zaY5TaY+wRzwPBfdNrPv8HPmg/J6MUc5\n+y3bZd7LptKdeTx/meY9yjbLXOk8Zo5lPLbp3pLnh/mzLG2YczlQzjfE85NzXvFYp3k/pnlAeF7z\nGnJs59wRWVJvet7hOc+5C3i9edw59vL/5T7y2Dh+5/MxjzPbEttIPs8exZxB9xv2q+zvvC7T/CBs\nD9M131pu+980hw37D88Pn2+q1ucq2yWfF85KyfHD4vnJez3bzFT+nc9W+bfOP50/6XT+pSFJkiRJ\nkk6ELw4kSZIkSVLrP/dL6IckSZIkSTo8Iw4kSZIkSVLLFweSJEmSJKnliwNJkiRJktTyxYEkSZIk\nSWr54kCSJEmSJLV8cSBJkiRJklq+OJAkSZIkSS1fHEiSJEmSpJYvDiRJkiRJUssXB5IkSZIkqeWL\nA0mSJEmS1PLFgSRJkiRJavniQJIkSZIktXxxIEmSJEmSWr44kCRJkiRJLV8cSJIkSZKkli8OJEmS\nJElSyxcHkiRJkiSp5YsDSZIkSZLU8sWBJEmSJElq+eJAkiRJkiS1fHEgSZIkSZJavjiQJEmSJEmt\n/wIRuBQwWuxWAAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAEICAYAAACZA4KlAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztnVusXcddxv+TW3Nr0sSuT3w/vmDL\nSV03ctKWILVF0KoV8FKVVKgCglSkCgkEb6gg8QIoQiDx0DdUROGBi6APFIGCBIloKpcqTerEcXB8\n9/E5rh0ncXrJpUm6efA5y7/5suefbZfugz3fJx1ptmetWbNmrfH6vvlfpoxGozAM48rHVcvdAcMw\npgNPdsPoBJ7shtEJPNkNoxN4shtGJ/BkN4xO4MluVCilPFBKeTSp/7dSyq/+GK47W0oZlVKu+b9u\n2zgPD6xxURiNRp9Y7j4YlwZ/2Q2jE3iyX2YopawvpXy5lPJcKeX5UsoXSilXlVJ+v5RyvJRyppTy\n16WUWxePX6LHv1ZKmSulvFhK+Vwp5d5SypOllHOllC+89TLlC6WUl0op/1NK+RlUPFJK+exi+YFS\nyqOllD9dbPdoKeUTOPbWUsoXSymnSinzpZQ/LKVcvVh39eJ5Z0spRyLi5378o9c3PNkvIyxOlH+J\niOMRMRsRayPi7yLigcW/n46IzRFxc0ToBP5ARPxERHw6Iv48In4vIn42Iu6KiPtLKR+WYw9HxMqI\n+IOI+HIp5fZGtz4QEQcWj/2TiPhiKaUs1v1VRLwREVsj4u6I+FhEfHax7tcj4ucX//2eiPjUZKNg\nXDJGo5H/LpO/iPjJiHguIq6Rf/+PiPgN/N4eEa/H+TWZ2YgYRcRa1D8fEZ/G73+KiN9eLD8QEQsR\nUVD/jYj45cXyIxHxWRx7CMfduHitOyJiJiJei4gbUP9LEfHwYvk/I+JzqPvY4rnXTDoe/ru4Py/Q\nXV5YHxHHR6PRG/Lva+L8134Jx+P8RJ/Bv51G+ZUxv2/G7/nR4gxEe2saffr2UmE0Gr28+FG/OSJu\nj4hrI+LUhQ99XBURc+jz3IVmqv4bPwZ4sl9emIuIDaWUa2TCL0TERvzeEOfp8+mIWHcJ11lbSimY\n8Bsi4p8voa+vRcTKMf85RUScivP/eS1hw8V307gYWLNfXvhGnJ8kD5ZSbiqlXF9K+amI+NuI+J1S\n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\nCf4XQiwF+ejO128AAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["(64, 64)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["KL divergenvce\n","1.559929071103958\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9cRsoOzsjTbd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":918},"outputId":"b6dce362-89bf-49c0-9ac3-725b00583a3d","executionInfo":{"status":"ok","timestamp":1567454587289,"user_tz":-60,"elapsed":26992,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["kl = np.zeros(10000)\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(4)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    # preprocessed_input = np.expand_dims(sorted_x[border[i]:border[i+1]], axis=-1)\n","    preprocessed_input = np.expand_dims(att_test, axis=-1)\n","    preprocessed_input = att_test\n","    # print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=True)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()"],"execution_count":58,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/4 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (1000, 32)\n","output shape (1000, 64, 64, 32)\n"," \n","weights shape (1000, 32)\n","output shape (1000, 62, 62, 32)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 31, 31, 64)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 29, 29, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 25%|â–ˆâ–ˆâ–Œ       | 1/4 [00:12<00:37, 12.59s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 1\n","weights shape (1000, 32)\n","output shape (1000, 64, 64, 32)\n"," \n","weights shape (1000, 32)\n","output shape (1000, 62, 62, 32)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 31, 31, 64)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 29, 29, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 2/4 [00:17<00:20, 10.16s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 2\n","weights shape (1000, 32)\n","output shape (1000, 64, 64, 32)\n"," \n","weights shape (1000, 32)\n","output shape (1000, 62, 62, 32)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 31, 31, 64)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 29, 29, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 75%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ  | 3/4 [00:21<00:08,  8.48s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 3\n","weights shape (1000, 32)\n","output shape (1000, 64, 64, 32)\n"," \n","weights shape (1000, 32)\n","output shape (1000, 62, 62, 32)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 31, 31, 64)\n"," \n","weights shape (1000, 64)\n","output shape (1000, 29, 29, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4/4 [00:26<00:00,  7.29s/it]\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"c76O-HXplDMH","colab_type":"text"},"source":["check the produced map"]},{"cell_type":"code","metadata":{"id":"-hdThbLhlCpv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":791},"outputId":"c220bcd0-66b1-4a20-8f34-fcfd00e06bbf","executionInfo":{"status":"ok","timestamp":1567454737672,"user_tz":-60,"elapsed":1715,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["plt.imshow(att_test[-1].reshape(64, 64, 3), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[0][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[0][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[0][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[0][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[0], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":64,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABA4AAAD8CAYAAAD3y+ZBAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztvVmvZddZvT8DhJDEXfW9m7LLvRMn\nIYoSlAgESEECbriGa274FnwB7rmGGwRCSBCFKKBIQelk7Iodd9W6yuXqyy0JbX43f9Z/zMF5R829\nvM8+e5ef52ruM9dea67ZvGudrTHm+7Gf//znDQAAAAAAAABgK35hpxsAAAAAAAAAAOsLPxwAAAAA\nAAAAQAk/HAAAAAAAAABACT8cAAAAAAAAAEAJPxwAAAAAAAAAQAk/HAAAAAAAAABACT8cAAAAAAAA\nAEAJPxwAAAAAAAAAQMkvrfJif/zHf/zz/y3/x3/8R1f3y7/8y1P5l37pl8q6e+65p6vbtWvXlmU/\n7u67757Kn/jEJ8o2Hjp0aCq///77Xd0PfvCDqXz27Nmu7t13353Kf/AHf9DVHTx4cCq/8847U/lj\nH/tY2Y6d5Etf+tJU/ud//ueu7sc//vFU9j7+4IMPpvKRI0e6uvfee28qv/XWW1NZx8w/37hxo6u7\nfPnyVP6FX+h/89I587Of/aw87q677prKOmat9XPSr63j5udU/ud//mfLsqPt+PjHP97V6Xz3dije\n///1X/81lf/8z/98PSfXFvzRH/3RFBe++MUvdnVHjx6dyr/4i7/Y1f3bv/3bVNZ7b621f//3f5/K\nV69encoXLlzojtM5++lPf7qr03HROfWpT32qO07H8vjx413dww8/PJV/9KMfdXV/93d/N5V//vOp\nC9revXu74+67776p7DFju2OI9vm+ffumssa01lp79NFHp/Kf/dmfdXV6bzq3W+vv9f7775/K2t+t\ntXbz5s2prPGjtT62+Dy49957p7KOp6/hX/mVX5nKHpN0vPVarfXzR9e73rPjzze9trZXY05rrb39\n9ttbfqe11g4fPjyV/d6+973vTeVvfvObGxMXnn766akTfe3rPPK+0Ge997XOI107HncefPDBqfzc\nc891dS+88MJUvnbt2pbnbq2fz1purY8ZHnc0duk6ePrpp7vjvvCFL0xlXxOvvvrqVPZ3LV0HOmf/\n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\nj9uXLl2aypqq1p8nTz755FT++te/3tXp/ybnz5/v6l555ZUt2+Xv8gcOHJjK3ge6jvU4n2uaVtHH\nQp/NHvd1L5912bPDn73/9E//VB5bpayfu4+B4vFVx9CfP+xxAAAAAAAAAADbBj8cAAAAAAAAAEDJ\njqVjdBlmSk+n8g6Xp6gEQ8/pktskK1KpT5IGqiQ5pRxz6d6xY8emssqDXKaUpHUq2UkSHb1PlzCp\nbNftGtpmvZZL/bWN3gcqbdTUYf49PWdKvelWC71ekm0my0RKr6R43+m96Vz1PqikSK31/a+pr/w4\nlXGpfKy1nGbUj90UdG6olaS13p7gY/n5z39+Knu/6Hil9D5JlqXjpXPR16auR1+bOh88JY7aXHTO\nuuRM2+/t1bnjc1bPk1KUagz1/tdjtY89RqdUjfv27ZvK586d6+o0pmr6IO+DKu1ha/14+FrSPtGx\n8XWr8cqle3rf3v96rxoXvP1a588+jYEppa1+T2OEnyPJsjcVvwe3uM0hpUXTcfBrJwudouv7kUce\n6er0GejpPnVu6vzy2LJsqfmZM2e6z//4j/+4ZZta69dESsmmeHv13vyd6ciRI1se99prr3XHqWVH\npdGt9fHEbW7a59shedb3Ty17fNV7S+8SVfpIP4dbdPU9yeft3FSldwL+LlH1r89tHcs5cvLW+rju\nY55sqtV4eRvVxqC2Bb+2o+8no6nhfe0kCbySbEv6fPe5vt1pFrebZPX+sPh7kT4j/b1Ir51SQVag\nOAAAAAAAAACAEn44AAAAAAAAAIASfjgAAAAAAAAAgJKV7nGgaTfc45L8Vuq58LQS1fnd65V8eNoW\n9X64v2bUU3j27Nnu86OPPrrltdzflPw7VcrF1uo0Zu6RUp+2+63V86c+5K985SvdcVVftdbfj6dY\n0dQy6qlZJKWNekZ9fNVPVZVb671bKcWU+8X1e6NzxO9N/eJV+sjW+j5O6afci+T+8U1B56+m22mt\nn1O/8zu/09VpCj2fi9VeFu7v1/R3vh51/LQueXU9jum1/fyVP979aMmDq3Up3Zaud5/32o++rtTL\nrDEi7d/h/lFdSx4XqpRE3ldp/wDF15J6p7WvPC6oH9pTrCZfa7WPhM+RlHJUz6/3nfyvPtbJC+99\n8lFG+1T3mfHnoY6lro/Wxp9ZOmcPHTrU1akPeXQPivT+4fNZ73N0Twbn1KlTU9nXu96brun0TuNx\nJ6UL032h9Fr+bqVrx5/ZureKpy/V9bjKtG7+zB7xEy+Cj9Po+9pHjePHj3efNc31hQsXprK/L4yu\nVe133y8gpXtM++mMovHpO9/5Tlen68fXhO4Rom30eHf16tWp7M9z/azPUd/DJD3rU7pKjaMa1zx1\n5aalGvX+qdLXL4L+z5v+N/CYMRIXPrqRAwAAAAAAAABuCz8cAAAAAAAAAEDJSq0KL7/88lROsimX\nA6nU36UrKiNUGYunY9TUFClNSJK4uIS1+p6nhtPPyaqQ7BpJ6lq12c+nkiPvAz32ueeem8q//uu/\nXrbDZXY6pp4u7NatW1tey8ezku221vejt18/q/TGZTgptZ22yyVYeqxKgFI6SZdmVjYSHz89h8uy\nVQbu/aPrZJPQueFj8vu///tTWVN0tdan5vJx1s/Xrl2byi5n1XNevny5q6tSoPo5kvRQ50CSHmpd\nsiwlmb5LknVuan+oPaO1/j49zZ1+T9eEyy/3799fnl+/5+tK15xK8nx9q5TPnw9qwUoyOz2/t0Ot\nCkna7+fXcdN7SZLkZEXRsfe4oNf2eaB1ei+t3RnpGBdB52KyLKbUvNr3vh4re42j7yavvvpqV6cx\nz9G57xYKJaVvTu8xc6wLHhf02v6upWjf+Vjo52QPUrm4r1u9F2+jrhGPSZ/97Genssp4/RmwDHRt\nLjsFW2t9/Lh06VJXl9LjeRy606lSdrfWzyNdt4ukrExWWiXF+GSbSe/eFZr+vbV+LaX1qOd3q5a+\nT41e29efvpv4mtDnlc9Rnc/6nPP/uebK+3cKj/M6Vz1eL/t5nlJrV6A4AAAAAAAAAIASfjgAAAAA\nAAAAgJKVWhVUEuaST5Vf6G7HrbV28ODBqeySP5XeaNnlFiovdpmSyuL0ey5RVHmuy5X1HC5f13tT\nya1L/JI8sjrO0e+NSmL9WD1O5eCt9RIm7wOtS/JF7UeX6KikSXdx93b5jrDa/iTj0r5zWZiOk8uB\n9HPKbKDz2vu4Gt+0E7XLC7W/XFLtEuVNQSWmjzzySFf3q7/6q1P5+9//fleXZPsqp9N59Nhjj5Xf\nSdJwlYv5mCT5aZJH6jxSCbWPq85tnytJbqr3o/PUY6PGW5cC61pNNgDfFVgZlTam2DKadcLHRtet\nSi49y47et6+j0Vis7U/ZULz9On+qcmv9/PH+UZlpkrffieju+a219tRTT01ll8jq80x3UvcxTtZA\n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\nWmZ/ZiergvadzyNtV5Kl6n0nq0Ja33ovbgfS+/bvVZYsHwu1Jvk7ma5HXwM6f9TioLGktdZOnTq1\nZTt2Ep/7Kit3C6eCVWFn8LigczG9h/t60fPo8yTF9/Q/htu5dV5pXJgba9UK8eijj3Z1yUqldlJN\nm9raclLtVu1wqhTyrWXL6CrR2OXvXckmlhgZbxQHAAAAAAAAAFDCDwcAAAAAAAAAUMIPBwAAAAAA\nAABQstI9DtST56nJUgq65MEdTS2UPCmjewQkP4z6jPx7Wpf2cnBfbEW6t+RrTn5ubctDDz00ld0X\nt2fPnqF2eGokbUsaT8W9W+rJcn+WzqfR9E1pv4yU2i55n9I+EtU8c6q+8s/uC718+XJ5znUm+fVG\nx8vXUuUpdy9w8ihX5/O1k9aV4j4z9TDqenGvrsaFNB98vlX7K6R9OXxe7t27dyqrT/Ef/uEfuuO0\nzn22yeut7dd9Ufw+tf0+D7R/3AN57ty5Lev8/GkfgznpV/24yrfu19ay7y+jfm5/fmqb/fwp1eQ6\no/tQeKzTeTS6Z8Qi6HzzdVv1ta8/9eq++eabXZ2m1VWPemv9nNJ45alGtX88rqV9oTRG6fdSimxf\nV1U6Q18P6lFO6R793aeKSb7HQUq5qPPC13Q1vh6/9d4W8QmPonPGx1DrfL0r2j9pLxCfn3PTesOH\nQ8cyPSfSWOr8TXsVOOn9RM+5jL3Ynn322ansKRc1/vm60n2u/F6WvU+HrzllE/Y40Jjt7136PuXp\npz8sKA4AAAAAAAAAoIQfDgAAAAAAAACgZKVWBZV3uLwmkaS6VQqRJMlJshOVprlUVM/p8hqtc2lP\nJadz6Zh+niuFSWlUtC6lgVE5oKfHS+fQMXUZnPZrsqWkOpUpeZ3K9FXi5e0YTUuXUv+NWi1GJaIp\n9aNLOPWcLmnf7hRl20VKq6iksUupR/V7flxaZ7puUwrR6rqtZcmzktKKVTaZ1vJ6rNLGpfb7vH/m\nmWem8pNPPjmV//Iv/7I7LqViVZmwj6/GmiQZ1jF0+5Ge02XfGhc0PiXbWSKlxPNxU7TPfU1XFjVN\nZ9Vanw7T7QfJCrEusspFSVYFnQ/pXWI0TauTZO76WeeDj7+mAvVzqI1Bj2utjwU6B5JVId1nipu6\n3n3t65zy9wA9Z0qbmdLYJvvX6LNM25yulawKupb8uvfee+9U9pih1/PzV2Po75Q6hj5OOq9V2q3l\n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\nxznSTx+/lAbrgQceWOq11wGVVqcUqKmfUjxOFp3R52h6FsyxTPjnuVa4Oc+oZIvzOaUyd415/r6g\nccEtM9rno7Hdn4fpPUytC95+7WN950g2ze0gpYjVeKjHvfPOO91xuha8Hw8ePDiVv/SlL3V1hw8f\nntHinSdZhpXtTpPnVo/KquBzVOt8zHUupv8/kkVK13dKG+/v0NVxHhd0/s1dL7qOvX80zfvu3bvL\nOhjnkUce6T7re9elS5fKugoUBwAAAAAAAABQwg8HAAAAAAAAAFDCDwcAAAAAAAAAULLSPQ6SZy6l\nRhpNw5fSyyQvWZXyyP1ByW+4k6kVq3Ylr3Hyy6r3yf1Hyfuk3ph07ZQ+LXkz0/4TVR+M7gdxu2tX\n+yak4/za1dxyr5ne21NPPdXVvfvuu1PZU9YdOnSobSJp3wmdp36/6nfzvlaPfEoDq9fz/QkqH7Km\nX2ytjztpPqSUb6MpIxeZb7oetc794qM+cL1Pv1baayal2q18m+7jTe3VOZJ8oaNpLtO6TfMzpdlK\nVGPoXkOtO3DgQFf36KOPTuXnnnuuq5vrk99p0vrWWODPaX2mJL9mel6lNVftebFIP6fvVc+JueM4\n+gz0uZ3SJmssUL+ye5D1/cHfOc6ePTuVPSbpveq1NO1oa63t2rVrKmsaNz9n6gP1wrsvXtvsbVRG\n9zYa9a231veBzunXXnutO07b7HtEnThxYip//etf7+q++MUvDrV53UjPIZ3D3p9pP6NRdD6n/yPS\nHgfa/rR3iFPtmZJSmaaY4e+dac8DJf0/VuF9oOvY6/T9Std3a3180f6eO54fFT772c92n99+++2p\n7M9IravYzDcKAAAAAAAAAFgJ/HAAAAAAAAAAACUrtSokuVhKh6XSGJfeVPIav1ZKfzRHeujyID12\nrmxmrt2h+l5KMZVI8rnRdmjaQK/Tc7q0LrVxtI9H5YUptVqqS9LrdI5qnPyedU57+qk333xzKnvK\nup20y3wYkvUjSZK1f32ctS/S2tf+dQuCWheS5D2lM0xWhSpNXootSZaY+i6tiRR7dS4miWiiSjvp\n509p0ZadYtXnQUprmc5fHbdIKlyV0KoVyWXTKmv9vd/7va5uz549U9mlzJqqcZPQteRjkuZKkuqO\nytdH0xmOppL152iyAVQ2idTe0ZSRrdX2L38WJxuXSog15Z/bBTQF4wcffNDVqVz55s2bXZ2eR6+l\n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\nfRTd48DffXX9pRSuKa27fs/3MThw4MBU9j0UdH16/68j/r/mSFp3FAcAAAAAAAAAUMIPBwAAAAAA\nAABQsjZWhVH5XErjqBILl7+MprGr0o/55yRJ9murNGbPnj1T2WUymvLDJUXad95XVaq4RawKldzQ\n+yqNU7IqKElerVI+78cLFy6U53/rrbem8vXr16eySxurNE9btUWpZG7exypLdPm8SphGZceLSOqW\nIb3dCdLa1Png967zyPta14v2i8uwRmX6qY1Vm7wdKp/zdl25cmUqe0rBffv2DV1vkRS0FSmupXWb\nYsYy2qHn8Niocly3IFRy6EVSqy2btE5TzE7yzjl9vO6oBNTl2cmqkFL0qWR9GWM+auvbjjRcu3fv\nLq+tsdKvrbaoKiXs7ajmYkojvYgcXNuokmR/nqfUyzovkmVFrU5nzpzpjtP2u1Uh2dD2798/lQ8e\nPLjl+VrrY5mnmNa26H1r37TWy6H92bEu0vRlkp5D2r/JqpDWy6ajz2Kfl+n9dztJ4zT3vVWf7SnN\ntq+BtCa0LSrhdwvTuXPnprLbJPSzr8dNYGQ8UBwAAAAAAAAAQAk/HAAAAAAAAABACT8cAAAAAAAA\nAEDJju1x4D7M0ZRj6Xujx42mC1ukjeqpcf+UehEV9b611nuO3JOnfpvkgx29z0Tay0Hr3LeU0t5V\nY+P7PKhvyf2Mej33pOkeB5peKaXfW8RbVfWlj7X6py5fvtzV6TzQvRAW8camVI2r9GkvE72PNCZ+\nv+rfc5+Z9unoenGqvl5kTwpdx16n3nz1rXpc0L1PfL2kfV3mpJp0RvdJSXu8zGlTwj2K6lF+9dVX\ny+tp36W0n4vsQTAab0e9perP92uN7rORrr1JqHfbxzx5mdN+G7qWdA54ur7kedb1r+vW+zl54Od4\nqtOzxtN+pXSj1Zxd5HmibdF9Brwfk9dYn+++5vT5qLHd/f0aQz1lp8ZRf5/Stmj8cPRdwvu42ken\ntXrPGu8f/Xzfffd1dZ/5zGe2bIenbdR78WeT7vfkqRo3Fe330bTfrdX/K+wkmjqxtdYOHTo0lUfT\nczoaW3xN6DrQvUO2m/S/wlyqONxa3wfbsX+Frnddm1t9vhNBcQAAAAAAAAAAJfxwAAAAAAAAAAAl\nK7UqqFxvO1JGJdndHJlnSq2W0ovs2rVrqI0qS22ttyMkueyozGpuH6fUXklGn2wAKqdT6ZDLF9Wq\n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\nAuPjjwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD7CAYAAACscuKmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztncmyFcX3hdO+l0YEQUBFQwkd6MAI\nw4Ev4QP6ID6CA8OxohJ2gDSCfe9/RP2+XJ69bp7jte5fcn2jPFTdrKysSmqv3Dt33vXXX3+1EMKd\nz90H3YAQwjpksIcwCRnsIUxCBnsIk5DBHsIkZLCHMAkZ7CFMQgZ7CJNw75oXe/vtt5cInqeeeqo7\ndvTo0aV8//33d8fuvvt//yfde+//mvzzzz935/HYoUOHumMPPfTQUr5+/fpSvnLlSnce6/z111+7\nY2zXyZMnN5Zba+3PP/9cyhcuXOiOff/990v57Nmz3TH+/vHHHzfWp+36448/yvbz79iHrbX25JNP\nLuUbN250x65du7axjtdee607j33H+2qttbvuumsp815ce/V5fvfdd0Pnsc5ffvmlO8bnfuLEiaX8\n4IMPduf98MMPG8t6Pd6LXvuee+5Zyvfdd193Hq935MiR7hjfWz7b3377rTvviSeeWMr6fvNZvPPO\nO3e1DeTLHsIkZLCHMAmrmvGPPfbYUlYT+fPPP1/KNL1a680coiYVefjhh7vfNEcvX768lL/++uvu\nvEuXLi1lNW9pOp0/f34pP/vss915P/3001L+8ssvu2M0Mz/77LPu2OOPP76U1VQlNO+cWUxUGp06\ndWopqwlOk5DtZd+01putel32AdvrJIn2N+tg+9W8pbn/+++/d8f47tB8fvTRR7vz2I/6vrHN2kbC\nNuo7zN+8L20z5Y+a6pSf+sz09ybyZQ9hEjLYQ5iEDPYQJmFVzU5dp7qL6+ofeOCB7hi1Ic9T/Ud9\nqfVXdeh6fuo1dc8QuqfUraW6kXAuQXXWrVu3yr8jvG/V7JX+o6utNX9v7LsvvvhiKX/44YfdedSo\nes/8zXI1/7IJ1s/26nN3WpnX4zug968uO/LII48sZe1vvj/u3eG19blTw/P9UM3O+SWdc2D9Ffmy\nhzAJGewhTMKqZjzNVDXVaYp988035d/RZHbmMk1Y/e1ScdH8UtOOZhrbpKYdzUyNpGKkoEKZw3tT\n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\nd/pc3L4FdGnyPlXbnzlzZimfOHGiO+aSi94mX/YQJiGDPYRJWNWMp+tKcYtkyGhUldv2mWU1qWjC\navQbzXq3UIV1apKEKjqttfEIPXeM16vMca3DRXRRujC/eWu9yeyehZMTzjyvklc4l6W65dgut1Bl\nFBdxOeoK1mszpx7v84033ujOe+WVV5aymu3nzp3b87r5socwCRnsIUxCBnsIk7CqZifqwnBavApD\ndBpJtSE1DjWkusb4W/W2C7Mlo0k0nDvMJed0baTeputG50uov0+fPt0dY354zlNoX/G5qIZkuxja\nqUk/+NuFm466Dl04q9P9o3vQuZWKo2HHDANurd9ngH1Pjd5aa88999xS1n586aWXymsv7dvzjBDC\nHUEGewiTcGA56DQRAhMcOGgqubzxalbSBHUmMl03LjLOua7clkAuksrVSeiiUncVXWVMcOCiDZ9/\n/vnu2NNPP72Uaf7rvVBuuW2Iaepevny5O89tUTwqmxxVn6qLjtdy+ePcirvR1YkqBdhXr7/++lJ+\n9tlnu/P4bI8fP94d04i6TeTLHsIkZLCHMAmrmvE0K515q6YSZzJpYrlU0m522CU7cFRmvM7COhOc\n6LWrCC+3VZZStUtn4zlTr4kQOCM8unjJmcWjC2HUDGZ6arczLn9rG6v8cbpgxkVE8txdF8JQbukx\nPgvKTU1ece3ataWsZvuXX365lM+ePds2kS97CJOQwR7CJGSwhzAJq2p2akHVkIcOHVrKqpkYcURt\nqBFdbjUboc5yWnObvPTEJagYTYTgEjG6RByMRHRbRzMyTrds5m/qbU0qwueix6o+YHLF1npdOrol\ntG55zD5QLc4+HX0u+u5UW2q11s8NVUlWNrWrqv/SpUtL+YMPPujO4/uufcM5gTfffHPjdfJlD2ES\nMthDmIRVzXi6GNSspHmkpjXPpfmpUsBFp1U54/RabrdN4tx3owkNnBnvIvlGo/do9mnEFaPk1LSm\nScj61HRkPnht440bNzZeWyP+qqQirfXvCxOJqEnsElGw/11k42hiCycTeEyjAZ18Y7+yzP5trd4m\nqrW/990m8mUPYRIy2EOYhAz2ECbhwFa9qWZyOpfhnNQtTpe7kNLRkFuHc72xTtVn/Dun2Xdx87XW\nz2PQnanhw9SU6sq6cuXKUqYOZchqa7277ebNm92x6jlp0kq629T1xmtz/mGbbbb5rDkPoq7CUdzq\n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\n7B/tD7ZftWe11bPODzjNTm3ozuO1XIIN50ak9tR3okpa4t4dfRbV/IO2g89FXYxsv16bcxW8lkba\n0U2pdbAPWNYEGIwY5Uq51hJBF0IAGewhTMKqZvyVK1eWspqwNFXVPKf5RfeUyyPmIstYv5rxzj1T\n5TpTNyLr0HbQxHdbMVdtV1wkonN1En0WzzzzzMb63bbA2ldss3Mj8hmq9OK5leu0NR8Zx3aw/Xoe\npYuTTdoHNLudy5UmuUo79jHfbxdhSVnQmpeft8mXPYRJyGAPYRIy2EOYhFU1O3WGC5d1e4NRG6rW\nHE2OQVSDsR2qg9xqM0Idx3zhrfXt1/qrUFLXRu0D6l72o4azsv3qajpy5MhSpr7UdlBruhz7LKuL\nqErYoe13mp33onMH/Du239XhcMkueZ/qNvvmm2/KNhLXxqeffnop63sVzR5CWMhgD2ESVjXjaX6q\nKeOi6yrTxrnXRnPDK85crFx7LgJN3UlqdhOaYpULTc9zfcU+1UQIPE+jvZiT/JNPPtlYX2t14obW\nenPdRQNWskOPjT5bl0ff4ep3ew7wfty76fLvV+3Qd4dyS7cVu3DhQlnnUveeZ4QQ7ggy2EOYhFXN\neG6J47a2camCXR47lwa6SsLgctC5XWJdzrIq9fWu6Ewr61dzsUqTrTPuXFSh+dI4Q876VYK43HLE\nma08ps/d9XFVh3oMdpF2o+m5XR2ujSo12I/sA51x53PRBBsXL17cu317nhFCuCPIYA9hEjLYQ5iE\nVTU7NYfbfsdtu+QSCRAX0eWSHbgIpkq7qR6mtnVJGlUDj24NXLVXf7sVdqxf28+oObbXJYZwVJFw\nrfn3oDrmnovbzqtaAafHRucHHFo/56R0DqbS7Lqy7YUXXljK58+f7469//77e7YpX/YQJiGDPYRJ\nWNWMpytBt0Vy0MysFja01puqzh1WLV7QOtX05W+aWBqdxkUPmnueqIlfRWrpAhm3aKjKs6b34rY0\nYpIR/p1bxOJcgE42sR16n7uY8aMmuJNXitthuMK5EVU28dwTJ04sZS58aa3PL6/teOutt/ZsU77s\nIUxCBnsIk5DBHsIkrKrZqV/d6i/VI3RbUFPrCirnWhndH411ajuoX6kvXd54TRrhkmKyjS43PPWf\nunEqV5PTmpocsdLYbiWX3id/U+vrM3P9XT0zF87q9LzT3uw3fXfc31Wr2VzIt777DKl2+fHpEj16\n9Gh3TMNnN5EvewiTkMEewiTcNepKCCH8t8mXPYRJyGAPYRIy2EOYhAz2ECYhgz2ESchgD2ESMthD\nmIQM9hAmIYM9hEnIYA9hEjLYQ5iEDPYQJiGDPYRJyGAPYRIy2EOYhAz2ECYhgz2ESchgD2ESMthD\nmIQM9hAmIYM9hEnIYA9hEjI1756SAAAACklEQVTYQ5iE/wMbfpnj6LeI4QAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"CrL4HbePliIG","colab_type":"text"},"source":["evaluate"]},{"cell_type":"code","metadata":{"id":"e8s1ADxRlaHi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"2208aceb-f6aa-4120-b337-dece809b7a39","executionInfo":{"status":"ok","timestamp":1567459516907,"user_tz":-60,"elapsed":1349,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["eps = np.finfo(np.float64).eps\n","\n","def compKL(salMap, posMap):\n","  fm = posMap / (np.sum(posMap) + eps)\n","  sm = salMap / (np.sum(salMap) + eps)\n","  return np.sum( fm * np.log( (fm + eps) / (sm + eps) ) )\n","\n","kls = np.zeros((4000))\n","temp = []\n","for i in range(0, 4):\n","  gt = gts[i]\n","  pmaps = results[i]\n","  assert len(gt) == len(pmaps)\n","  for j in range(len(gt)):\n","    g = gt[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = compKL(g, pmap)\n","    if kl == np.inf:\n","      print(\"inf\")\n","      continue\n","    kls[(i*1000)+j] = kl\n","    temp.append(kl)\n","  print(i, \"mean kl\", np.mean(temp))\n","print(np.mean(kls))"],"execution_count":83,"outputs":[{"output_type":"stream","text":["0 mean kl 20.85662731485207\n","1 mean kl 19.729868765439168\n","2 mean kl 20.211959956487554\n","3 mean kl 20.364186278592253\n","20.364186278592253\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"G68ONkHDlbNG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"d59aa8c9-7a50-48a8-9c18-0fcc421a202f","executionInfo":{"status":"ok","timestamp":1567460839212,"user_tz":-60,"elapsed":655,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["kls.mean()"],"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20.364186278592253"]},"metadata":{"tags":[]},"execution_count":86}]},{"cell_type":"code","metadata":{"id":"sJ-hM6LA2G_U","colab_type":"code","colab":{}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jH55DKBG9cSR","colab_type":"code","colab":{}},"source":["del x_train\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap3.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap4.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap5.npz\"\n","# np.save(outfile, comb_x, comb_y, gt_x)\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap10.npz\"\n","\n","testfile = np.load(outfile)\n","sorted_x = testfile[\"arr_0\"]\n","sorted_y = testfile[\"arr_1\"]\n","gt_x = testfile[\"arr_2\"]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nUCnPEku_Rlw","colab_type":"code","outputId":"df10e9fd-275c-4477-9ce4-788271caab21","executionInfo":{"status":"ok","timestamp":1566564228368,"user_tz":-60,"elapsed":1397,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\"\"\"\n","sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","\"\"\"\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1033, 2052, 3069, 4084, 5050, 5982, 7001, 7997, 8982, 10000]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"5e1a3a82-602d-43a2-f92e-7912f9dd5bd7","executionInfo":{"status":"ok","timestamp":1566564307960,"user_tz":-60,"elapsed":77506,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["kl = np.zeros(10000)\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    preprocessed_input = np.expand_dims(sorted_x[border[i]:border[i+1]], axis=-1)\n","    # print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=True)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (1033, 32)\n","output shape (1033, 56, 56, 32)\n"," \n","weights shape (1033, 32)\n","output shape (1033, 28, 28, 32)\n"," \n","weights shape (1033, 64)\n","output shape (1033, 26, 26, 64)\n"," \n","weights shape (1033, 64)\n","output shape (1033, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|â–ˆ         | 1/10 [00:14<02:09, 14.39s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 1\n","weights shape (1019, 32)\n","output shape (1019, 56, 56, 32)\n"," \n","weights shape (1019, 32)\n","output shape (1019, 28, 28, 32)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 26, 26, 64)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|â–ˆâ–ˆ        | 2/10 [00:21<01:37, 12.16s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 2\n","weights shape (1017, 32)\n","output shape (1017, 56, 56, 32)\n"," \n","weights shape (1017, 32)\n","output shape (1017, 28, 28, 32)\n"," \n","weights shape (1017, 64)\n","output shape (1017, 26, 26, 64)\n"," \n","weights shape (1017, 64)\n","output shape (1017, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|â–ˆâ–ˆâ–ˆ       | 3/10 [00:28<01:14, 10.61s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 3\n","weights shape (1015, 32)\n","output shape (1015, 56, 56, 32)\n"," \n","weights shape (1015, 32)\n","output shape (1015, 28, 28, 32)\n"," \n","weights shape (1015, 64)\n","output shape (1015, 26, 26, 64)\n"," \n","weights shape (1015, 64)\n","output shape (1015, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|â–ˆâ–ˆâ–ˆâ–ˆ      | 4/10 [00:35<00:57,  9.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 4\n","weights shape (966, 32)\n","output shape (966, 56, 56, 32)\n"," \n","weights shape (966, 32)\n","output shape (966, 28, 28, 32)\n"," \n","weights shape (966, 64)\n","output shape (966, 26, 26, 64)\n"," \n","weights shape (966, 64)\n","output shape (966, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 5/10 [00:42<00:43,  8.75s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 5\n","weights shape (932, 32)\n","output shape (932, 56, 56, 32)\n"," \n","weights shape (932, 32)\n","output shape (932, 28, 28, 32)\n"," \n","weights shape (932, 64)\n","output shape (932, 26, 26, 64)\n"," \n","weights shape (932, 64)\n","output shape (932, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    | 6/10 [00:49<00:32,  8.18s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 6\n","weights shape (1019, 32)\n","output shape (1019, 56, 56, 32)\n"," \n","weights shape (1019, 32)\n","output shape (1019, 28, 28, 32)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 26, 26, 64)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   | 7/10 [00:54<00:22,  7.41s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 7\n","weights shape (996, 32)\n","output shape (996, 56, 56, 32)\n"," \n","weights shape (996, 32)\n","output shape (996, 28, 28, 32)\n"," \n","weights shape (996, 64)\n","output shape (996, 26, 26, 64)\n"," \n","weights shape (996, 64)\n","output shape (996, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  | 8/10 [01:02<00:14,  7.40s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 8\n","weights shape (985, 32)\n","output shape (985, 56, 56, 32)\n"," \n","weights shape (985, 32)\n","output shape (985, 28, 28, 32)\n"," \n","weights shape (985, 64)\n","output shape (985, 26, 26, 64)\n"," \n","weights shape (985, 64)\n","output shape (985, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 90%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 9/10 [01:09<00:07,  7.31s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 9\n","weights shape (1018, 32)\n","output shape (1018, 56, 56, 32)\n"," \n","weights shape (1018, 32)\n","output shape (1018, 28, 28, 32)\n"," \n","weights shape (1018, 64)\n","output shape (1018, 26, 26, 64)\n"," \n","weights shape (1018, 64)\n","output shape (1018, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [01:16<00:00,  7.37s/it]\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"ee21d3a5-5c82-49e0-e611-b176767bd030","executionInfo":{"status":"error","timestamp":1567454627989,"user_tz":-60,"elapsed":1008,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":232}},"source":["plt.imshow(att_test.reshape(64, 64), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[0][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[0][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[0][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[0][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[0], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":61,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-61-5670f06978bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0matt_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m64\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'gray'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'off'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m18\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m36\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 12288000 into shape (64,64)"]}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","outputId":"4d3944ea-03b0-4e07-c7b0-f975569428d9","executionInfo":{"status":"ok","timestamp":1566560955803,"user_tz":-60,"elapsed":6879,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = x_comb_gt\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQUAAAD8CAYAAAB+fLH0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztnW2sZVd53//PfZ33N7uyJh6rdhUr\nFapEQYgaEUURTlRwo9gfEAKhZBpZmi9pMQgJBvoBVeKDkaIQokZORzGJUyEMdVBtORWp6xhF+VCX\nMSBibIhdKHisMQYVe2Y8njv3zqx+OPu5d+3/2c9Z+7zds+89/5802nfvs88+6+w7dz//9bwtSylB\nCCGchVkPQAjRLfRQEELU0ENBCFFDDwUhRA09FIQQNfRQEELU0ENBCFFjKg8FM3uvmf3AzF40s9PT\n+AwhxHSwSScvmdkigH8E8JsAzgH4JoAPpZSem+gHCSGmwtIUrvlOAC+mlH4IAGb2MIC7AYQPBTNT\nWqUQ0+fnKaV/UjppGtOHmwG8lO2fq47VMLNTZnbWzM5OYQxCiH5+3OakaSiFVqSUzgA4A0gpCNEl\npqEUXgZwS7Z/ojomhNgBTOOh8E0At5vZbWa2AuCDAB6bwucIIabAxKcPKaUNM/t3AP4GwCKAL6aU\nvjfpzxFCTIeJhyRHGoR8CkJsB8+klN5ROkkZjUKIGjOLPggxacxsrPd3QTV3ASkFIUQNKQWxY2Fl\nUNpnBimDeVYNUgpCiBpSCqIV487XnXEscKQEeBudH43Ft2YWjm+elIOUghCihpSCqBFZ12GtsNPG\nwpbOiT57YWGhts/Ho/ezQvDt9evXw7H5NeZBMUgpCCFqSCkIAO3n620VA1vUyDoPM7ZIEZS20dhc\nGfjWzPqORd9nNyOlIISoIaUw55QUAc/bo3k8U5q358dL6qGkDJaWev+NFxcXa1seK3/OtWvX+rb+\ns9PkZxg01t2AHgpzSumPn/+wfBv9wUV/eCzHeXvt2rXwARKN0cfgD4Pl5eXaPj8keGz+2RsbG7Xt\n+vr65v3hP3p+mO1mNH0QQtSQUpgzSs46luBsfdkKR848VgRujV2e+/7CwsLmsUiqs3pxZeDblZWV\n2pbH6mPkMV29ehXAlkLIp0Il1cLn7SakFIQQNaQU5ggzKyoEnqezFWYrHc3bWRHwvD3fsopg68sO\nRf/s1dVVAMCePXtq+6wYfIw8Jn/9ypUrm58b+T7mKYlJSkEIUUNKYQ7I58E8N2aF4FaWrTBvI2vM\nSsEVwdraWm3r1nltba1PPbBvwZUCqxcfy969ewEA+/btqx338/278ph8DM7169cbfR5NY9rNSCkI\nIWpIKcwRTT4F9ui7QnCry9v9+/cD2LLO7Ftw3NKyMrh8+TKAeoTAX/Mx+XsdPx4phAMHDtT2fax+\nvuPWnhWCf97Vq1f7lI+/Vkr33k0+BikFIUQNKYU5wszCaANbYbe2Bw8eBAAcOnSotu+Kwc/367jF\ndAvrVvmNN94AAFy6dAnAlsK4dOlSXyTE5/x+rUgpsHpxxeDH2afgeQl+vSYfA49lUs1ldhJSCkKI\nGlIKu5imeXDJp8BW2BXCkSNHals/zr4Fx5XCm2++CQC4ePFi7fq5L4Ktc543kI8/ijZESsGVhfsS\neIyuHHyMS0tLYU3HPCkGKQUhRA0phTmiSSlEGYzs2XeFcOzYsdq+W2mPWvj1fZ7uVpitN0crcnjO\nHykF30ZKwb8bRx1cITTVccyTIoiQUhBC1JBSmANy6xfVPET1BG513QofPnwYAHD06FEAW74FP5+z\nBz0vgaMUTlOTFc5X8P1oTK4UOKfCv5urFh8T12u0UQe7KQ+hxMhKwcxuMbOnzOw5M/uemd1XHT9m\nZk+Y2QvV9ujkhiuEmDbjKIUNAB9PKX3LzA4CeMbMngDwbwE8mVK638xOAzgN4JPjD1WMS1MNRJS3\nUFIMHJXw+b2/3628W3H3JbC/4Pr1632VlOyX8PeUsi259oG/K+cpOHlHpnEazO4WRlYKKaXzKaVv\nVT9fBPA8gJsB3A3goeq0hwDcM+4ghRDbx0R8CmZ2K4C3AXgawE0ppfPVS68AuGkSnyEmQ6lRa9Tl\nKKo7YM+/n+8W1j3+XEWZV0a6Beeah0gpcJ4CK4So5oH38z6RPraoj0Jpu5sY+6FgZgcA/BWAj6aU\nLlBLq2RmjXfNzE4BODXu5wshJstYDwUzW0bvgfCllNLXqsM/NbPjKaXzZnYcwKtN700pnQFwprrO\n7nvc7lBKS7G5xee+C269eT7v53FUwhXElStX+vIHuIci5ylwtIE7L7lfg/McIoWQb0sKYR4YJ/pg\nAB4E8HxK6Q+zlx4DcLL6+SSAR0cfnhBiuxlHKbwbwO8A+Acz+0517NMA7gfwVTO7F8CPAXxgvCGK\nSVKaG7MVjdY7iHwPbq05Y9Lf79bf8xcuX768WUHpvRc4A5GrJLmng285qzL6jqwQ8uhH6XvPg2IY\n+aGQUvp7AFHWx52jXlcIMVuU0TgHDFqijZWBW81oFaVojYYo34GzE7mycd++fZs/e52Ef4Zfwy1/\nlKfgx6NKzeg7enQjP68UfZgHVPsghKghpTBH5Eoh8sDn/QoHbdnK8sKsHMXg9SNyq8+Wv61SKEUd\nSmtHNm2j985TNEJKQQhRQ0phzoh8Cmw1XRHk+QSDtqwcuBrSrT33hFxZWemrr+BqxiijkTMYOR+B\n+0UO8iX4ln0K84iUghCihpTCLqYpxl6KOrhC4PUaPDKQ5xc0ve7Wm/s2DFr1if0NrgS4O5MrBY42\n8Hn8Hdv6FJTR2ENKQQhRQ0phjhhGKbDPwJWBZx/yOg7RqkwcEWiKUnAPh2hVptKK1/wZ7jvgiEkU\nOVE/hR56KMwZbaU1Pxz4oeAt23nJNk4gitqq59OJKPGJ4YeAw99h1HBq0/RhHtH0QQhRQ0phDsit\nXqk4iCU3Oxh9uuBKgROJuACKC6T4+k2KIVqyjcfMx1nd+Nh5KhQphkHTh3maTkgpCCFqSCnMGaWC\nKLbk7FMoKQVuu8bLxPH8v2keH+1HiUW+72FUH6P7Pzh86uf5d2zTZGWekFIQQtSQUphTJqUYuMEJ\nFzH59TgKkYcHOfLhY+FFXEpjZqXgasb3WTG08SnMI1IKQogaUgpzxKAoRNtkJvfo+3zdfQquGHgB\nWb9+tBhMk1LgJKOmuT9fIx+jj+3ChQsAtpQCRyMGNVmRUhBCiAophTmn1NyUrTcXSnGmIxcrcTmz\nK4jcbxAVKHFxlm9LY+KsS9/6cc5TyJXHPOcnOFIKQogaUgqiRlvlwNabrbVvuY6Bl5VraqsefRZn\nJJbKu10ZsC+hTUbjPCOlIISoIaUwR5hZXz1BtM/HHfbOu1WPypN9yy3fo/E1fTZHSKKICDeA4byE\nyJeQf6d59iU4UgpCiBpSCnNKtIBstB8dZ6LFVPhzc8Xgfgaf23tOg1v2SGWUIiRRU5VoYZtcKcwz\nUgpCiBpSCnNAbtXZ8kdLzXMXpGG3fB1eiDbPeORW7k7Uhp4VRKRaWAmUmrJKJfSQUhBC1JBSmCPy\n6EOkENz6ukXn9uujbr2vAvdXMLO+KkdWHby0PFdRcjSC1UmkJEQzYysFM1s0s2+b2ePV/m1m9rSZ\nvWhmXzGzldI1hBDdYRJK4T4AzwM4VO1/DsDnU0oPm9mfArgXwAMT+BwxQbgfYqQYooVhI0XAC7bw\nEm++7HzuW3AF4Jafl4Nji885EqwYOOORlUMUWRE9xlIKZnYCwL8B8GfVvgF4D4BHqlMeAnDPOJ8h\nhNhexlUKfwTgEwAOVvs3AHgtpbRR7Z8DcPOYnyEmxDA+Bd6yQmAfAS8Lz8d5uXnu6QhsWX5WCpyn\nECkFVgzci5HPa1IMikCMoRTM7LcAvJpSembE958ys7NmdnbUMQghJs84SuHdAH7bzO4CsAc9n8IX\nABwxs6VKLZwA8HLTm1NKZwCcAQAz0+N5CjTNmSOlwFtWChyN4CXcSj4Gt/7uY3DFsLy83NfPkXsy\nRAqh1Fch6t7MGY75Irjst5hHRlYKKaVPpZROpJRuBfBBAH+bUvowgKcAvL867SSAR8cepRBi25hG\nnsInATxsZp8F8G0AD07hM8QINPkUfDtsBiMrhdLrgxQFd2Pi/IQoo9GrI7lvpFdH8utRtiUvaMs/\nA/OlHCbyUEgpfQPAN6qffwjgnZO4rhBi+1FG4xyRKwWOOkS1D5ESiGL/perKJt8Fd352OLoQ+SU4\nF4KjF/wdBo1ZPgXVPgghCCmFXUjkNzCzYgZjySfAVY5RnUE0J2cL3NTDoG1dRuSviFRNSc0os7GH\nlIIQooaUwhyQW94oDyHKK+BMRX49Ug5OaQUqPj8/l9XFIAXE33PQ62IwUgpCiBpSCruIkuVcWFgI\n5+WuFNyT71uvajxw4EBtnz3/nIUY9TJgxeDb/Nyoh2LbDkrR66Idu+KhsJ2ycCf8B4vCgIuLi30P\nAf/j9j963x461KuEP3z4cG3rx/khwWFBdvqVHg5Nr/E2ekhEC8/y0vZNjVqbtvOOpg9CiBo7QimU\nlECXHEizsDZtm7EuLy/3lT6zUnBFcPTo0catKwWeRvB12XHJxU2DfmelxqqsBKKl7KPzBk1DpBak\nFIQQRCeVQmRFotBS0/mjqofIUnBYrCkJhz93u61OpBRy5yK3SXOFcPBgr0/OkSNHAGwpgxtvvLG2\nzz6FKKW4lBTVZhk5hx2IUXiTS6KbFpDN3zdo4Zp59jNIKQghanRGKQyy9m23TdcpKYaSJRiUnlva\nTru4pq0vIU9Q4gaqbvFZIdxwww217bFjxwBs+Rz8/VEoMlqGjo8vLi72lUj71iklQLEyiJaL4+iE\nfArNSCkIIWp0Uim0TV9tSmcdN6W1rSJgK9PG6myXYmiKOgB1peBRA/clcF6CKwZXCL7PSsGvF/kI\nhrkH0bltfQnRQrJtow+ih5SCEKJGp5RC28YcUSnswsLCyEqhpBAiZTAoFZfnxtFnDUv0HaPmq64U\nVldXw/RlVwzR1pWE77NPodSGnfeb7lO0oGzJZ1CKOgxaep735znq4EgpCCFqdEIpePOPaE4cLY/e\n1BKMr9GWtvPZaF7L+7kVn5ZicEpNWJt8CtzSzC1/VMvApdO8zReMzb8b3xcnv59Rq/Zoy63buYW7\nb0u+hCjKMe9IKQghanRCKQD1eHXbbDjOp19aWhp58dCSUmBrE81zufw3h+ey4+YxDKqGBPobqOzZ\ns6dPKUSKgBd3jZRXqZFJVB2Zt2vnZd5cCXjL9kuXLgEALl68CGCrhbtvefEX/p20rZIUPaQUhBA1\nOqEUzAyLi4uh1zxakowt4cLCQtjcY1iiyjxexJTnwU1VgFFbsWEtVNs2ZJHSWl1dDduslZZ9jyIB\nrCB4YRdewIWt+pUrV/qOuQJwpeAKwbcXLlwAsKUgSoqhTXWkb6UapBSEEERnlMLy8vKm1WGFwM1C\n2eOdW7lhlUI0B47yEdz6sFViq51bnbZz2En5FiKfwsrKSlF1cZ5BZOmj+8Tv5/vlS7jlfoGmY0C/\nUnjttddqW1YMfp0oCsE5E/IpNCOlIISo0RmlkC8fFikEj6kPmg+3zU+IsgHZ4rNScN9BqS9AnqnH\nXu9JVU+29SnkY+V7Fo2flZF/7ygPwa1yvqx7/n5eBDaPKLBCYKXg57oyeP311wH0Kwb2LbT1KYg6\nUgpCiBqdUQrLy8t9SoEVQpu24m2XEOecCLayDFtE9tY7ude9lHs/6ShEm3yFaMHYklJgXwFHF7hr\ns7+fIwocSbh48eKmEuCl5CPFwFEIft1VTdRPQd2cBzOWUjCzI2b2iJl938yeN7N3mdkxM3vCzF6o\ntkcnNVghxPQZVyl8AcDXU0rvN7MVAPsAfBrAkyml+83sNIDTAD456CKl6AMrhygKkVdaRlaAFUIU\n048UgFshP89pymPwn6NuRPn3zxlXOUTVkktLS31+hihjkaMPUbSBvyNHHdyXwNY937JPwLfsh4ii\nFK4QOCLkqk6ZjMMxslIws8MAfg3AgwCQUrqaUnoNwN0AHqpOewjAPeMOUgixfYyjFG4D8DMAf25m\nbwXwDID7ANyUUjpfnfMKgJvaXCxf0qypD0C+H3UONrNil+VBXYnyfa76cyvD9Rbsa8jz9yOF0JTT\nMIhSXUEpCpHvR5WnkYrhKIPDSsHhKI1beVcDTbkGriJYEfi2KQuyacvVkvIljMY4PoUlAG8H8EBK\n6W0A3kBvqrBJ6t3txjtuZqfM7KyZnW1aOkwIMRvGUQrnAJxLKT1d7T+C3kPhp2Z2PKV03syOA3i1\n6c0ppTMAzgDAnj17Uj7fjfoltLFqpVh0ZG058sHRBb8Oe+HdKrGaySs2o07Go1JSDHw8//xoTKUx\nRp2THFZMHG1wZfCLX/yitp8rBfYlcNUk50xEdShtOy6JZkZWCimlVwC8ZGa/Uh26E8BzAB4DcLI6\ndhLAo2ONUAixrYwbffj3AL5URR5+COD30HvQfNXM7gXwYwAfGPXikUUdVO0WWQW+FkcXIh+Dqxa+\njn8O+yJylVOqwxhXMQxLHp3hMQwbGeE1FKJog2cfukLg7YULF/qqHbmjUttuzdHq0/IlDMdYD4WU\n0ncAvKPhpTvHua4QYnZ0IqMxgp/4UczcuX79ejjn5Tg85xmwxWT/Rv4ZQJwJmVvcUv+DSVGqusyV\nVXQuZ1lGNSRRnwTOKeBoAyuE3KfAeQZtfQSDOmnnWymE4VDtgxCiRieUgkcNSv3+o1p/J1cKbA3Y\n4rsPIIpORBYzUgbjMGwNREkZDFpzIbK+UffqqFqUFQJHG7iS0bd+3JXExYsXN9VFqQ/CqIpACmE4\npBSEEDU6oRSAesacW1+OS7OS4Nr9PE/BcUvHmYjDxrAjqzONfPpIOUQ9HkurVuXee47tcyYmZ3Ky\n2uDfCSuEUs8DP55XRka+hEghDKsIpBCGoxMPhZQSNjY2ioumsHOLpxNNDwVOPuIkpVI4K5qycOOO\npveXyrZLreBKDslI8kcLsK6trYVt0fhh4O/1+8XXLDkW/Y+fS6Wb2rNHpc6lhwHfh2hfDIemD0KI\nGp1RCuvr660bebDTML+O4xaPz3XLV1qs1LdsnSL5HTk4c4YNUY46lYmKtN58881Ny84Lw/J0gZOx\n/NrsYGQlEE0bonbseYl52ymdlMF0kVIQQtTolFJgaxUlLzlN4UC2vu47cNwCsiJgq8pzaS6AYmdY\nU9JU1PSEt5HTsm2okkOQ7EvIl2Hj9O2ofVq+wE4+Nk5n5qaqUTMVbsOe+xHaljjz9xXTQUpBCFGj\nk0oh8qKXynvz1GIueOIwJ/sEeMut4SKlwIuY5kSt3tqGL9vOpdlLHy3tnpen873mkueoyQyrD26J\nFm0HNUJR4VK3kFIQQtTojFLIk5d4CTJ/LSrzzbc8T+e4e5RCzT4Fnms77ClnK5bnQUTLlZXKk/k+\nRJSiD2zVFxYW+vwUfo5bfG+KW1IK3ACFG6REDVOaUpilELqFlIIQokYnlAKAgUohKlKKvPv5NZhS\nkxD2KUQNS7lgiBdzbUrbjrb+mW0VQ8m3wN8pv3/sd3AL7gqBm+byZ0T+iqi9etQoJfcjSCF0CykF\nIUSNTigF9ylErc+j45ynkFvati3QSsqB38ef7Ra1qUlJFH3gxrRtm66UMvza+CBKfgdeRo6/d5QL\nwVEZ9h0MKoOWQugWUgpCiBqdUApAz0pEyoB9B2xZBllnbtnO1pqtdOQJL2Un+ud6TcHq6urmPJ2z\nBLmMO1IvpbFEiiGqHWk6xsu+lZaRi3JIeL9tg5T89y66gZSCEKJGp5RCZAGjOXfTkuusDHhxWrfk\n0TJxPM/nRq7RgjRsSdfX1zfn1XntQf5Z/L3ath0r1UQMivuPmi3K1462bZRB01Z0BykFIUSNzigF\noNxxiOsamhaidUWwd+/e2paXsfctKwpWDtGWF4/hMW9sbPT1HuD3RnN/3i8tcFOKOjTN3zljs9Ta\n3Sn1clAT1Z2PlIIQokanlAITefzZSrufYO/evZvKYP/+/QCAffv2AYgVAisAVh+8jFzkk2BfxLVr\n1zaz+fw9XLkZZVP6vo8lUgx8n0rRCDMLVcawC9WoeeruRUpBCFGjU0qhlJ/Q5EMAUFMHrgwOHjwI\nYEsp+Dls6Tk+z3kM/Fm+ZcXRpBS4DyLXD0R1A6XswijD04miN4NyQfjctgzbP1GKoftIKQghanRG\nKTQtyNqUhwD0z+9dBezbtw+HDx8GsKUU3LfASoGtMH9W5Lfwz/brDVIKHGVwn0HJvxHlRIy6RF1T\nl+tSluSoi+BG1xm276SYHWMpBTP7mJl9z8yeNbMvm9keM7vNzJ42sxfN7CtmtlK+khCiK4ysFMzs\nZgAfAfCWlNKbZvZVAB8EcBeAz6eUHjazPwVwL4AHhrl2ZL1ZKbilzf0IrhAOHToEoD8KwTUQ0Xy9\npE5K0Yd8xSuOYEQ5D1H1ZDTGURjkbxi0z+cP+3ldVgzj3E+nC99jUozrU1gCsNfMlgDsA3AewHsA\nPFK9/hCAe8b8DCHENjKyUkgpvWxmfwDgJwDeBPA/ADwD4LWUkpflnQNwc5vrtfEpsMXl7MX9+/fj\nwIEDALZ8Cr7PSqHUy4AjHhyNiOb9w3wf/oxIrURRh0lYuIjSZ5U+u23eQp47MW3a9Nho+71K7GTl\nMLJSMLOjAO4GcBuAXwKwH8B7h3j/KTM7a2ZnRx2DEGLyjBN9+A0AP0op/QwAzOxrAN4N4IiZLVVq\n4QSAl5venFI6A+BM9d40yLJGiqHJx8A1D64QhlUKkdWO3tdUA1DK848URKQQpklJjYyaK8G1EKV+\nk5OkpG6a7u+oGZ0lH8lOUg7j+BR+AuAOM9tnvTtyJ4DnADwF4P3VOScBPDreEIUQ28k4PoWnzewR\nAN8CsAHg2+hZ/r8G8LCZfbY69mDba5asVBSNyJVD1HGJoweRL6BUccgWIer2fO3atbC3QOna20FJ\nIZU6UEcqhhVBVMnZdC8mZU1LimCQ+hnVV1JSQl2KtpQYK3kppfQZAJ+hwz8E8M5xriuEmB2dyWhs\nojSnbnrSl9aKYI9/1Isw6hPAyoDJFUTUB2FYxTBN30JJGbCfo9R5ihVU6b5NUjG09YsMUj9t+0mU\numLt5JWzO/1QcPgGRn+o165dC5eHKy1iWpLBpWaqTWOOSpwHtaafNm3/cKICsZLDNWoQ4wwq5570\ndxr2Qbe4uBj+jqLGtdHWrxN9/y5PJ1QQJYSo0SmlECmCSLLxUmRra2ubZcfeAo0tHVuAksORLUC0\nIEsbid82zLedtFUKHAb2LcNL/vnvZpCDLvreJSvaVu2UFuXJVVBUfBapU26VzwrVYQXRRYXgSCkI\nIWp0RinkFoOtMT+VefFSVwUrKyvFNGS+Ji/M4kQKgeeIkQNuYWEhTGsetxR6ErR1xEZt6Ur3ta0D\nN2/8EqmvYb9DqWEOf5c8jM3XcPj/AbfOKy3sE6lgPq8LSCkIIWp0RikAsTWJ5m/ctmxxcbH1smd+\nLS5fdqKQk8NzQ06HXlhY6FM+UTivxKTaojcl57Sdh5cawUTJXKUQXq4UnMhvw2Nu6weJWur5Nn89\nWk7Qx8JNdv3/YEkhDJsWPUukFIQQNTqjFPInZqQUeDHUpmKltgrBn/SDWrQPwt/nsNJoKvCaZZSB\nGTVPgRUDfxf2ujuDlpsr5YxEYy+pGx8jt70b1Pa/5GPKI135Zw7zffPvECmMWSKlIISo0RmlAJR9\nCv5UdSsfxfubrslKwZ/07E2P8Gu7FeInPh9veuJH8+vS8VLDknFoW3xWWj7PKXntS/keOZGCaBsx\n4Xb8XFbftKRg9L183P7/hvM0+HtxRidHZbqgCCKkFIQQNTqjFPInZ1Qw5BbC53Vt5uqRX4IjF5HX\nma2SWx9WL1HTVaCc9RZZFd9Oo6imVHRVankfKaySP6CNQiidW4o2cJl8U9s+oHmhIH8v+xQ4WsUW\nn3+XrmZLEacuRiGkFIQQNTqlFKIy3LZly03wXM+tNWezRS3Q/AnvFsLfz0ohqhYE+mPavvX5qb/u\nW16Svm1lZhuGbUBSqizkKESUJzJoPNEYSjkibfMSIp/CKErBP5P/T/LvsLSgT/R7cGapHKQUhBA1\nOqMUgHK2V8nX0ARbmyjqEC3A4ltuK1/K3MvzGFxdvPHGG7Xt5cuXAWzVbvjY2PcQ+RYmGY1oqxhK\n+Qo+llJzlvx4ZE1ZMUXZo20XA2bFwMdXV1fD6IOPhfNYWHmWam+i+yyfghCis3RKKTjRU3MYpcC5\n+Dz3Ky3RxhbNLUE072/Kf+B8eVcGFy5cAABcunQJwJZScF8Df0bb2P40FENpARu2jD6GKK+B37e4\nuFhcwo+VEkd8SlWQrBhYSeTNfaN+ET42/x1Eywayemnb8LZLSCkIIWp0Uik4bRXDoKgEK4bSk9zh\nJ79bhmi+z8vMLy0t9SkFVwKuEC5evFjb99f5M6YRhRgWts48f+f4PSso/05+vn/X5eXlTQUVqRR/\nb5RFWvIpcJv/QSqmlH/BUSy+RinKsBOQUhBC1Oi0UnCG9THk72GLVYobR3Np7rTDW7d8bp1y5cH+\nBreMUfShrU9hmkqhlKcQLfbLFpYz/rhb1tLSUuvcBs4NKfVejBTBID8H+5qiMZSiKqV8kC4jpSCE\nqLEjlILTRjFE2ZBtlz+LohBuVXiOPKgLlMN+B85sbKsUZrGwCN8Xts7s2Y/m5FxlmPsioq5XjN8P\nzoWIaiHarl2Rv59fc6LPLP0/2olIKQghauwopcAMynj01/hJXso9jywjV8Fxrz7OmV9cXOxTK03r\nVOTXiCIbXYg+OJFV5uzAKBrB96tJUfH3Z4XAv1uucI3UHv9Om+o1omhU2/9HTpcyFIdFSkEIUWNH\nKoVBNRIcy+Zzo4o73udsOrcMUWfpQT37opr7qM/CMN2JhqWUDdm0LkNOVD3K/RDdZ8DdnrnPANDf\ngyDPYQD6u1qxn8hpW5nZ5n62jR5E/p3S8S4rieJdNLMvmtmrZvZsduyYmT1hZi9U26PVcTOzPzaz\nF83su2b29mkOXggxedoohb8A8J8A/GV27DSAJ1NK95vZ6Wr/kwDeB+D26t+/AvBAtZ0Kg/ogRk/2\naA7YthNRlPcQ9WPI31NasXj/F5GNAAAH5ElEQVTQ2ghN23EoVVyyYuD3OTwv5/wF7nrNNQXr6+t9\nkQtXGbweKGd4MlHPy9JqX/nxqIdDqTtzqQflTlAITlEppJT+DsD/o8N3A3io+vkhAPdkx/8y9fhf\nAI6Y2fFJDVYIMX1G9SnclFI6X/38CoCbqp9vBvBSdt656th5EGZ2CsCpET+/kUHdm0p16yUFEeU9\nRB2Y8ut1sYszjy0aCyujqB6DiRRUUxVl2zwCpmSto5wS9mvk28gXVeqzGSmEYStbu6AkxnY0ppSS\nmQ39TVJKZwCcAYBR3i+EmA6jPhR+ambHU0rnq+nBq9XxlwHckp13ojq2bYz6pI3mypHiiFb6GZTJ\nFlmPkiLYDoUQzcOjiElUC8Lz9DZ1DaXsv5Jfg8cU1UK0WcuTVyNnpcC9GEvfv61voQsKwRk1T+Ex\nACern08CeDQ7/rtVFOIOAK9n0wwhxA6gqBTM7MsAfh3AjWZ2DsBnANwP4Ktmdi+AHwP4QHX6fwdw\nF4AXAVwG8HtTGPNITOpJzIrBadpvmxMQjXHS1iO/XuQrKc3LPR/Dt1zHwZmKkcLK6ztK61+09b24\nAvCxRepkUHTCIx+8tggrBb4PXK/SpV4Yw1J8KKSUPhS8dGfDuQnA7487qC5Q+qW1dWAOc+3t/I/S\ndtrADwMu4uImK5y85e/nkG5eQs3NZaJkrijtOZrqRd81mhqtr6/3LTzM1+bS79LYo4cCj61LKM1Z\nCFFjR6Y5z4LtSDWeBSXFwOG7psarQL9U5/ZrvIiKX/fy5cubLe+jEvIoDMjO3kiiR0qDrfuePXv6\nlAIvD+fn+ljZ8ehbvo87KYlJSkEIUUNKYUy6/MRvIhpvlKzE5cncTIYdrE2t7oF+x2NucXmRHLbC\npfm6U0pjLhWkXb16ta/0m8fN34+XANwNjkYpBSFEDSkFAaB//s2hOLeEXCDmcCMZLn+OlmFbW1vb\nbGDLSiFaHCdSCuxbiJRDpBg2Njb6WrdzAVdU5l1a8q8UfeiScpBSEELUkFKYU0q5Em0KvYB+H4Rb\nUM5fiN63trbWZ3VdObD15VTiUgl1lJDlY2oq9vKfI4UTKaK2CqGLyoCRUhBC1JBSmHPYYrVdko/z\nGtiTz1GKyAexsbHRF+OP8hSi9Odont62MUp+Hb92tNBsFIUYVil0GSkFIUQNKQVRo9SOrXSeW8rI\n0jIbGxubVjVakm9Y61uqiRjkT4m+T9SOL9ruxPwER0pBCFFDSkEAiK3roEV8m97PuQBRQ9vckkb5\nA6XFcNqOLTqvKbLC44uUzrgKocvKQUpBCFFDSkE0UrJsHPuP3h81pcmvM2qre75WqbdFqQVdPhbO\n6GSfwiyb7U4bKQUhRI2uKIWfA3ij2naRGzEnYyvF/IdkW+/bEFZ5bn6fxD9tc5J1Rd6Y2dmU0jtm\nPY4mNLbR6OrYujouoBtj0/RBCFFDDwUhRI0uPRTOzHoAA9DYRqOrY+vquIAOjK0zPgUhRDfoklIQ\nQnSATjwUzOy9ZvYDM3vRzE7PcBy3mNlTZvacmX3PzO6rjh8zsyfM7IVqe3SGY1w0s2+b2ePV/m1m\n9nR1775iZiszGtcRM3vEzL5vZs+b2bu6ct/M7GPV7/NZM/uyme2Z1X0zsy+a2atm9mx2rPE+Vcsv\n/nE1xu+a2du3Y4wzfyiY2SKAPwHwPgBvAfAhM3vLjIazAeDjKaW3ALgDwO9XYzkN4MmU0u0Anqz2\nZ8V9AJ7P9j8H4PMppV8G8AsA985kVMAXAHw9pfTPAbwVvTHO/L6Z2c0APgLgHSmlfwFgEcAHMbv7\n9hcA3kvHovv0PgC3V/9OAXhgW0bo5aKz+gfgXQD+Jtv/FIBPzXpc1VgeBfCbAH4A4Hh17DiAH8xo\nPCeq/zTvAfA4AEMv0WWp6V5u47gOA/gRKh9Vdnzm9w3AzQBeAnAMvWS9xwH861neNwC3Ani2dJ8A\n/GcAH2o6b5r/Zq4UsPVLc85Vx2aKmd0K4G0AngZwU9paPfsVADfNaFh/BOATADy98AYAr6WUNqr9\nWd272wD8DMCfV1ObPzOz/ejAfUspvQzgDwD8BMB5AK8DeAbduG9OdJ9m8rfRhYdC5zCzAwD+CsBH\nU0oX8tdS75G97SEbM/stAK+mlJ7Z7s9uwRKAtwN4IKX0NvRS1mtThRnet6MA7kbvwfVLAPajX753\nhlndp5wuPBReBnBLtn+iOjYTzGwZvQfCl1JKX6sO/9TMjlevHwfw6gyG9m4Av21m/xfAw+hNIb4A\n4IiZeQ3LrO7dOQDnUkpPV/uPoPeQ6MJ9+w0AP0op/SyltA7ga+jdyy7cNye6TzP52+jCQ+GbAG6v\nvMEr6DmBHpvFQKxXL/sggOdTSn+YvfQYgJPVzyfR8zVsKymlT6WUTqSUbkXvHv1tSunDAJ4C8P4Z\nj+0VAC+Z2a9Uh+4E8Bw6cN/QmzbcYWb7qt+vj23m9y0juk+PAfjdKgpxB4DXs2nG9Nhux0/geLkL\nwD8C+D8A/sMMx/Gr6Em37wL4TvXvLvTm7k8CeAHA/wRwbMb369cBPF79/M8A/G8ALwL4rwBWZzSm\nfwngbHXv/huAo125bwD+I4DvA3gWwH8BsDqr+wbgy+j5NtbRU1j3RvcJPUfyn1R/F/+AXgRl6mNU\nRqMQokYXpg9CiA6hh4IQooYeCkKIGnooCCFq6KEghKihh4IQooYeCkKIGnooCCFq/H9XK6/YpVAd\n8AAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"jz893l0N_rYu","colab_type":"code","colab":{}},"source":["plt.imshow(gt_x[0], cmap='gray')\n","plt.show()\n","np.sum(gt_x[0])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sEfuI3GpeRg5","colab_type":"code","colab":{}},"source":["results[0][0].shape\n","pmap = np.sum(pmaps[0][1:])\n","pmap /= np.sum(pmap)\n","np.sum(pmap)\n","print(np.where(kls == np.inf))\n","print(results[2][279][1:].shape)\n","test = results[2][279][1:]\n","test = np.sum(test, axis=0)\n","test /= np.sum(test)\n","print(test.shape)\n","plt.imshow(test, cmap='gray')\n","plt.show()\n","test.max()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"0737e5ef-3323-4391-d742-8e4e129935fc","executionInfo":{"status":"ok","timestamp":1566564329792,"user_tz":-60,"elapsed":4129,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["kls = np.zeros((10000))\n","temp = []\n","for i in range(0, 10):\n","  gts = gt_x[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    kls[border[i]+j] = kl\n","    temp.append(kl)\n","  print(i, \"mean kl\", np.mean(temp))\n","print(kls.mean())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0 mean kl 2.5680342576202184\n","1 mean kl 2.909500316896012\n","2 mean kl 2.818598413399716\n","3 mean kl 2.8447214663226044\n","4 mean kl 2.8516289927678704\n","5 mean kl 2.9034391950962597\n","6 mean kl 2.8880943160276282\n","7 mean kl 2.900752060024396\n","8 mean kl 2.846135787700065\n","9 mean kl 2.85113712658574\n","2.8508520128730814\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1zC1XX0IAZ-x","colab_type":"text"},"source":["overlap 3: kl divergence\n"]},{"cell_type":"markdown","metadata":{"id":"r8kGK3ibAImz","colab_type":"text"},"source":["\n"]},{"cell_type":"code","metadata":{"id":"ioySD7oZUeYT","colab_type":"code","colab":{}},"source":["ratio_1\n","overlap 5: kl_divergence\n","0 mean kl 2.6163089808814353\n","1 mean kl 2.8753965817893063\n","2 mean kl 2.866036166178241\n","3 mean kl 2.839589049469307\n","4 mean kl 2.8002224193948586\n","5 mean kl 2.7976602635052896\n","6 mean kl 2.776942131565275\n","7 mean kl 2.7878222827655015\n","8 mean kl 2.7505092012763033\n","9 mean kl 2.74410191069035\n","2.737241655913624\n","\n","overlap 4:\n","0 mean kl 2.6100659478117705\n","1 mean kl 2.8564435487711513\n","2 mean kl 2.8491184604782265\n","3 mean kl 2.817959019489922\n","4 mean kl 2.7815341166016436\n","5 mean kl 2.777701293830135\n","6 mean kl 2.757888095920567\n","7 mean kl 2.7704798382440265\n","8 mean kl 2.7349647613795596\n","9 mean kl 2.7299936093780865\n","2.7283556132124596\n","\n","overlap 3\n","0 mean kl 2.6085916882382834\n","1 mean kl 2.8292348078654737\n","2 mean kl 2.820811807183378\n","3 mean kl 2.791181309139243\n","4 mean kl 2.762313691383919\n","5 mean kl 2.7547291164301706\n","6 mean kl 2.7405205780466804\n","7 mean kl 2.750608592249947\n","8 mean kl 2.721995328715782\n","9 mean kl 2.7192830214153765\n","2.717923379904669\n","\n","overlap 10\n","0 mean kl 2.7753871251337663\n","1 mean kl 3.0302378841369033\n","2 mean kl 2.9991861274385294\n","3 mean kl 2.9434782696579727\n","4 mean kl 2.920269374847127\n","5 mean kl 2.909823645930598\n","6 mean kl 2.89084027398056\n","7 mean kl 2.902485352306911\n","8 mean kl 2.855393801654071\n","9 mean kl 2.8440827687959764\n","2.8432295439653377"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XnIbgxKtRfIZ","colab_type":"code","colab":{}},"source":["ratio2 \n","overlap 10\n","0 mean kl 2.78751347970808\n","1 mean kl 3.0770529865454987\n","2 mean kl 3.049556663938309\n","3 mean kl 3.0019593188098597\n","4 mean kl 3.0338597806365777\n","5 mean kl 2.964702376967148\n","6 mean kl 2.948014540856044\n","7 mean kl 2.973138355750508\n","8 mean kl 2.938854330519554\n","9 mean kl 2.955926342189674\n","2.9423290810156018"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R1OdRz7QaKa1","colab_type":"code","colab":{}},"source":["ratio3\n","0 mean kl 2.5617848816902273\n","1 mean kl 2.9615626864881635\n","2 mean kl 2.879493789567673\n","3 mean kl 2.8252716277631866\n","4 mean kl 2.9035969343326524\n","5 mean kl 2.872025146531248\n","6 mean kl 2.8751694721629666\n","7 mean kl 2.908918915133712\n","8 mean kl 2.8766034414893342\n","9 mean kl 2.8966481953131815\n","2.8187283588592575"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"itPglejX07x1","colab_type":"code","colab":{}},"source":["ratio4\n","0 mean kl 2.92640563839942\n","1 mean kl 3.057036631113963\n","2 mean kl 3.0523901373753484\n","3 mean kl 3.055620712414837\n","4 mean kl 3.047826981225571\n","5 mean kl 3.028641382657027\n","6 mean kl 3.035205260144986\n","7 mean kl 3.02426302800163\n","8 mean kl 3.0306466077710734\n","9 mean kl 3.0302878726411806\n","3.023318210534106"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RSXc6HX8WjTy","colab_type":"code","colab":{}},"source":["ratio 5\n","0 mean kl 2.6102924420325104\n","1 mean kl 3.056996957150096\n","2 mean kl 2.993175665924335\n","3 mean kl 2.933419261364506\n","4 mean kl 2.9700195668672977\n","5 mean kl 2.9511598986357215\n","6 mean kl 2.9355646228847476\n","7 mean kl 2.959898989088979\n","8 mean kl 2.9204692729041324\n","9 mean kl 2.9291596814920604\n","2.9291596814920604"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KcGYPoeEZimZ","colab_type":"code","colab":{}},"source":["ratio 6 \n","0 mean kl 2.6871636202241023\n","1 mean kl 3.0877852419167957\n","2 mean kl 2.995067160916525\n","3 mean kl 2.9400063153028806\n","4 mean kl 2.9454528502453514\n","5 mean kl 2.923680459711544\n","6 mean kl 2.9050300056313687\n","7 mean kl 2.923790665282685\n","8 mean kl 2.8810601626583248\n","9 mean kl 2.880443626259657\n","2.880443626259657"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"STN7IId5bRSx","colab_type":"code","colab":{}},"source":["ratio 7\n","0 mean kl 2.560195787736453\n","1 mean kl 2.8156223253343104\n","2 mean kl 2.738813908040841\n","3 mean kl 2.75447621848629\n","4 mean kl 2.747612327836614\n","5 mean kl 2.777388223145542\n","6 mean kl 2.7809560683082064\n","7 mean kl 2.80386887747819\n","8 mean kl 2.759662688746271\n","9 mean kl 2.7521729954598158\n","2.5248435060348347"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L4CfJqd2eR0u","colab_type":"code","colab":{}},"source":["ratio 8\n","0 mean kl 2.656541431748879\n","1 mean kl 2.8407070131187933\n","2 mean kl 2.8102019654082584\n","3 mean kl 2.7997584110905165\n","4 mean kl 2.8655736959865603\n","5 mean kl 2.892894408786466\n","6 mean kl 2.8886316985559644\n","7 mean kl 2.9027008629355824\n","8 mean kl 2.865921417443035\n","9 mean kl 2.8800192946230725\n","2.8143548547056665"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5ft5eu8BgwLS","colab_type":"code","colab":{}},"source":["ratio 9\n","0 mean kl 2.5680342576202184\n","1 mean kl 2.909500316896012\n","2 mean kl 2.818598413399716\n","3 mean kl 2.8447214663226044\n","4 mean kl 2.8516289927678704\n","5 mean kl 2.9034391950962597\n","6 mean kl 2.8880943160276282\n","7 mean kl 2.900752060024396\n","8 mean kl 2.846135787700065\n","9 mean kl 2.85113712658574\n","2.8508520128730814"],"execution_count":0,"outputs":[]}]}