{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"evaluate_scnn_exp2_scnn_with_relu","version":"0.3.2","provenance":[{"file_id":"1Bi0Gp-wU2iCK6TCvkwPBrvju_C-Tq1pD","timestamp":1566606633767},{"file_id":"1wTkqln-Mdo_VsWQeYtrdM2q1NbgXNUB1","timestamp":1566557728494},{"file_id":"1Ct2hHploJlWxWj-tMaZPgn0io1iYIWFz","timestamp":1566418130179},{"file_id":"/v2/external/notebooks/tpu.ipynb","timestamp":1566309409095}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"dm2wSqJvpjGf"},"source":["# TPUs in Colab\n","\n","This notebook provides an introduction to computing on a [TPU](https://cloud.google.com/tpu/) in Colab. In this notebook you will connect to a TPU, run some basic TensorFlow operations on the TPU, and print out the speed of the TPU as measured in teraflops."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"_pQCOmISAQBu"},"source":["## Enabling and testing the TPU\n","\n","First, you'll need to enable TPUs for the notebook:\n","\n","- Navigate to Editâ†’Notebook Settings\n","- select TPU from the Hardware Accelerator drop-down\n","\n","Next, we'll check that we can connect to the TPU:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"71iSWtsXe36x","outputId":"b6fa03b1-c434-422e-b749-3b8472c9a6d7","executionInfo":{"status":"ok","timestamp":1566607551979,"user_tz":-60,"elapsed":2020,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import os\n","import pprint\n","import tensorflow as tf\n","\n","if 'COLAB_TPU_ADDR' not in os.environ:\n","  print('ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!')\n","else:\n","  tpu_address = 'grpc://' + os.environ['COLAB_TPU_ADDR']\n","  print ('TPU address is', tpu_address)\n","\n","  with tf.Session(tpu_address) as session:\n","    devices = session.list_devices()\n","    \n","  print('TPU devices:')\n","  pprint.pprint(devices)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["ERROR: Not connected to a TPU runtime; please see the first cell in this notebook for instructions!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YuBH7rpfU_gq","colab_type":"code","outputId":"f64dcbae-6b69-41c2-a837-04b6d51c76fc","executionInfo":{"status":"ok","timestamp":1566607552214,"user_tz":-60,"elapsed":2241,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from keras.applications.vgg16 import (\n","    VGG16, preprocess_input, decode_predictions)\n","from keras.preprocessing import image\n","from keras.layers.core import Lambda\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.python.framework import ops\n","from keras.models import Model\n","import keras.backend as K\n","from keras.layers import Layer\n","import tensorflow as tf\n","import numpy as np\n","import keras\n","import sys\n","import cv2\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","import scipy\n","from scipy import stats"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_CfZIC8QU_jo","colab_type":"code","colab":{}},"source":["def normalize(x):\n","    # utility function to normalize a tensor by its L2 norm\n","    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)\n","\n","def load_image(path):\n","    img_path = sys.argv[1]\n","    # img = image.load_img(img_path, target_size=(224, 224))\n","    img = image.load_img(img_path, target_size=(32, 32))\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","def register_gradient():\n","    if \"GuidedBackProp\" not in ops._gradient_registry._registry:\n","        @ops.RegisterGradient(\"GuidedBackProp\")\n","        def _GuidedBackProp(op, grad):\n","            dtype = op.inputs[0].dtype\n","            return grad * tf.cast(grad > 0., dtype) * \\\n","                tf.cast(op.inputs[0] > 0., dtype)\n","\n","def compile_saliency_function(model, activation_layer='block5_conv3'):\n","    input_img = model.input\n","    layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])\n","    layer_output = layer_dict[activation_layer].output\n","    max_output = K.max(layer_output, axis=3)\n","    saliency = K.gradients(K.sum(max_output), input_img)[0]\n","    return K.function([input_img, K.learning_phase()], [saliency])\n","\n","def modify_backprop(model, name):\n","    g = tf.get_default_graph()\n","    with g.gradient_override_map({'Relu': name}):\n","\n","        # get layers that have an activation\n","        layer_dict = [layer for layer in model.layers[1:]\n","                      if hasattr(layer, 'activation')]\n","\n","        # replace relu activation\n","        for layer in layer_dict:\n","            if layer.activation == keras.activations.relu:\n","                layer.activation = tf.nn.relu\n","\n","        # re-instanciate a new model\n","        new_model = VGG16(weights='imagenet')\n","    return new_model\n","\n","def deprocess_image(x):\n","    '''\n","    Same normalization as in:\n","    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py\n","    '''\n","    if np.ndim(x) > 3:\n","        x = np.squeeze(x)\n","    # normalize tensor: center on 0., ensure std is 0.1\n","    x -= x.mean()\n","    x /= (x.std() + 1e-5)\n","    x *= 0.1\n","\n","    # clip to [0, 1]\n","    x += 0.5\n","    x = np.clip(x, 0, 1)\n","\n","    # convert to RGB array\n","    x *= 255\n","    if K.image_dim_ordering() == 'th':\n","        x = x.transpose((1, 2, 0))\n","    x = np.clip(x, 0, 255).astype('uint8')\n","    return x\n","\n","def target_category_loss_output_shape(input_shape):\n","    return input_shape\n","\n","def target_category_loss(x, category_index, nb_classes):\n","        # print(\"K.one_hot\", K.eval(K.one_hot([category_index], nb_classes)))\n","        return tf.multiply(x, K.one_hot([category_index], nb_classes))\n","    \n","def grad_cam(input_model, image, category_index, layer_name, sparse=False, intialize_model=True):\n","    # model = Sequential()\n","    # model.add(input_model)\n","    # nb_classes = 1000\n","    # print(\"category_index\", category_index)\n","    nb_classes = 10\n","    one_hot = K.one_hot([category_index], nb_classes)\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # if not \"lambda\" in input_model.layers[-1].name:\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # input_model.pop_layer()\n","        # print(\"hello?\", input_model.layers[-1].name)\n","        # target_layer = lambda x: target_category_loss(x, category_index, nb_classes)\n","        # target_layer = lambda x: tf.math.multiply(x[0], one_hot)\n","    if intialize_model:\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape))\n","    # print(\"one_hot\", K.eval(one_hot))\n","    # print(\"name of the last layer\", input_model.layers[-1].name)\n","    # print(\"input_model.layers[-1].output\", input_model.layers[-1].output)\n","    loss = K.sum(input_model.layers[-1].output)\n","    # print(\"loss\", loss)\n","    # conv_output =  [l for l in model.layers[0].layers if l.name is layer_name][0].output\n","    # print([l.name for l in input_model.layers])\n","    conv_output =  [l for l in input_model.layers if l.name == layer_name][0].output\n","    grads = normalize(K.gradients(loss, conv_output)[0]) \n","    if sparse:\n","        sparse_name = \"sparse_\"+layer_name[-1]\n","        sparse_output = [l for l in input_model.layers if l.name == sparse_name][0].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \"\"\"\n","    dense_output = input_model.layers[-2].output\n","    final_output = input_model.layers[-1].output\n","    fin_out_manual = tf.math.multiply(input_model.layers[-2].output, one_hot)\n","    \"\"\"\n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_output, grads, sparse_output])\n","    output, grads_val, sparse_output = gradient_function([image])\n","    \n","    if sparse:\n","        output = sparse_output\n","    \n","    # print(\"number of all zero map\", count)\n","    # print(\"dense output\", dense_output)\n","    # print(\"final output\", final_output)\n","    # print(\"fin out manual\", fin_out_manual)\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","    # print(\"one_hot * dense_output\", one_hot_num * dense_output)\n","    output, grads_val = output[0, :], grads_val[0, :, :, :]\n","    sparse_output = sparse_output[0, :]\n","\n","    weights = np.mean(grads_val, axis = (0, 1))\n","    cam = np.ones(output.shape[0 : 2], dtype = np.float32)\n","\n","    if sparse:\n","        output = sparse_output\n","    for i, w in enumerate(weights):\n","        cam += w * output[:, :, i]\n","\n","    # cam = cv2.resize(cam, (224, 224))\n","    cam = cv2.resize(cam, (112, 112))\n","    cam = np.maximum(cam, 0)\n","    heatmap = cam / np.max(cam)\n","\n","    #Return to BGR [0..255] from the preprocessed image\n","    image = image[0, :]\n","    image -= np.min(image)\n","    image = np.minimum(image, 255)\n","\n","    cam = cv2.applyColorMap(np.uint8(255*heatmap), cv2.COLORMAP_JET)\n","    cam = np.float32(cam) + np.float32(image)\n","    cam = 255 * cam / np.max(cam)\n","    return np.uint8(cam), heatmap\n","\n","def intialize_model(input_model):\n","        input_model.pop()\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                       output_shape = target_category_loss_output_shape)) \n","        return input_model\n","\n","def faster_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        # print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        cam = np.ones(output.shape[1:3], dtype = np.float32)\n","        # (img_num, 112, 112, 32)\n","        for k, w in enumerate(weights[0]):\n","            try:\n","                cam += w * output[0, :, :, k]\n","            except:\n","                print(\"cam shape\", cam.shape)\n","                print(\"output shape\", output.shape)\n","                print(\"w\", w.shape)\n","                raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","        cam = cv2.resize(cam, (112, 112))\n","        cam = np.maximum(cam, 0)\n","        heatmap = cam / np.max(cam)\n","        combined[i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nt8utqzEbh5G","colab_type":"code","colab":{}},"source":["def batch_grad_cam(input_model, image, category_index, changeLastLayer, sparse=False):\n","    nb_classes = 10\n","    if changeLastLayer:\n","        input_model.pop()\n","        one_hot = K.one_hot([category_index], nb_classes)\n","        input_model.add(Lambda(lambda x: tf.math.multiply(x, one_hot),\n","                                          output_shape = target_category_loss_output_shape))\n","    loss = K.sum(input_model.layers[-1].output)\n","    conv_outputs =  [l for l in input_model.layers if \"conv\" in l.name]\n","    conv_1 = conv_outputs[0].output\n","    conv_2 = conv_outputs[1].output\n","    conv_3 = conv_outputs[2].output\n","    conv_4 = conv_outputs[3].output\n","    grad_1 = normalize(K.gradients(loss, conv_1)[0]) \n","    grad_2 = normalize(K.gradients(loss, conv_2)[0]) \n","    grad_3 = normalize(K.gradients(loss, conv_3)[0]) \n","    grad_4 = normalize(K.gradients(loss, conv_4)[0]) \n","    if sparse:\n","        sparse_outputs = [l for l in input_model.layers if \"sparse\" in l.name]\n","        sparse_1 = sparse_outputs[0].output\n","        sparse_2 = sparse_outputs[1].output\n","        sparse_3 = sparse_outputs[2].output\n","        sparse_4 = sparse_outputs[3].output\n","    else:\n","        sparse_output = input_model.layers[2].output  # to check if KW is implemented correctly \n","    \n","    gradient_function = K.function([input_model.layers[0].input], [conv_1, conv_2, conv_3, conv_4,\n","                                                                                                          grad_1, grad_2, grad_3, grad_4,\n","                                                                                                          sparse_1, sparse_2, sparse_3, sparse_4])\n","    outputs  = gradient_function([image])\n","    # this is slow af\n","    image_num = image.shape[0]\n","    conv_outputs = outputs[0:4]\n","    grad_outputs = outputs[4:8]\n","    sparse_outputs = outputs[8:12]\n","\n","    one_hot_num = np.zeros((nb_classes))\n","    one_hot_num[category_index] = 1\n","\n","    kl_scores = np.ones((image_num))\n","    combined = np.zeros((image_num, 4, 112, 112))\n","\n","    for i in range(4):\n","        output, grads_val = conv_outputs[i], grad_outputs[i]\n","        weights = np.mean(grads_val, axis = (1, 2))\n","        print(\"weights shape\", weights.shape)\n","\n","        if sparse:\n","            sparse_output = sparse_outputs[i]\n","            output = sparse_output\n","            # print(\"output shape\", output.shape)\n","\n","        print(\"output shape\", output.shape)\n","        # print(\"cam shape\", cam.shape)\n","        print(\" \")\n","        # (img_num, 112, 112, 32)\n","        for j in range(image_num):\n","          cam = np.ones(output.shape[1:3], dtype = np.float32)\n","          for k, w in enumerate(weights[j]):\n","              try:\n","                  cam += w * output[j, :, :, k]\n","              except:\n","                  print(\"cam shape\", cam.shape)\n","                  print(\"output shape\", output.shape)\n","                  print(\"w\", w.shape)\n","                  raise  ValueError(k)\n","        # cam = cv2.resize(cam, (224, 224))\n","          cam = cv2.resize(cam, (112, 112))\n","          cam = np.maximum(cam, 0)\n","          heatmap = cam / np.max(cam)\n","          combined[j, i, :, :] = heatmap\n","    return combined"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kvTSb9uHU_og","colab_type":"code","colab":{}},"source":["class KW(Layer):\n","    def __init__(self,  k, beta, filter_num, **kwargs):\n","        # self.output_dim = output_dim\n","        self.k = k\n","        # @TODO randome intialize\n","        self.initialize_duty = True\n","        self.beta = beta\n","        self.filter_num = filter_num\n","        super(KW, self).__init__(**kwargs)\n","    \n","    def set_duty(self, x):\n","        # p, h, w, c = tf.shape(x)\n","        self.duty = K.ones((K.shape(x)[0], K.shape(x)[-1]))\n","        self.initialize_duty = False\n","    \n","    def call(self, x):\n","        # x (p, h, w, c)\n","        print(\"x\", x)\n","        if self.initialize_duty:\n","            self.set_duty(x)\n","        global_average = K.mean(x, axis=(1, 2)) # (p, c)\n","        print(\"global_average\", global_average)\n","        # x_sort_arg = self.top_k(global_average, k=K.int_shape(global_average)[-1]) # (p, c)\n","        x_sort_arg = self.top_k(global_average, k=self.k) # (?, k)\n","        print(\"x_sort_arg\", x_sort_arg)\n","        boosted_x = self.duty_cycle(tf.cast(x_sort_arg, tf.int64), tf.shape(global_average, out_type=tf.int64)) # \n","        print(\"boosted_x\", boosted_x)\n","        # boosted_x_arg = np.argsort(boosted_x)\n","        # boosted_x_arg = self.top_k(boosted_x, k=K.int_shape(boosted_x)[-1]) # (p, c)\n","        boosted_x_arg = self.top_k(boosted_x, k=self.k) # (p, c)\n","        # print(\"boosted_x_arg\", boosted_x_arg)\n","        spx = self.sparse_mtx(x, tf.cast(boosted_x_arg, tf.int64),  tf.shape(global_average, out_type=tf.int64))\n","        spx = tf.cast(spx, tf.float32)\n","        spx = tf.expand_dims(spx, axis=1)\n","        spx = tf.expand_dims(spx, axis=2)\n","        spx = tf.broadcast_to(spx, tf.shape(x))\n","        print(\"x\", x)\n","        print(\"spx\", spx)\n","        return tf.math.multiply(x, spx)\n","    \n","    def top_k(self, x, k):\n","        return tf.nn.top_k(x, k=k, sorted=True).indices\n","\n","    def duty_cycle(self, x_sort_arg, x_shape):\n","        alpha = self.k / self.filter_num\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        print(sparse_mtx)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        duty = tf.cast(sparse_mtx, tf.float32)\n","        duty = tf.math.add(tf.scalar_mul((1-alpha), self.duty), tf.scalar_mul(alpha, duty))\n","        self.duty = duty\n","        print(\"duty\", duty)\n","        return self.boost(duty, alpha) \n","    \n","    def boost(self, duty, alpha):\n","        alpha_tensor = tf.scalar_mul(alpha, K.ones(K.shape(duty)))\n","        a = tf.math.subtract(alpha_tensor, duty)\n","        return K.exp(tf.scalar_mul(self.beta, a))\n","\n","    def sparse_mtx(self, x, x_sort_arg, x_shape):\n","        # x_shape = tf.shape(x, out_type=tf.int64)\n","        print(\"x_shape\", x_shape)\n","        arg_shape = tf.shape(x_sort_arg)\n","        R, C = tf.meshgrid(tf.range(arg_shape[0]), tf.range(arg_shape[1]), indexing='ij')\n","        R = tf.cast(R, tf.int64)\n","        indices = tf.stack([x_sort_arg, R], axis=-1) \n","        print(\"indices\", indices)\n","        # indices = tf.squeeze(indices, axis=0)\n","        indices = tf.reshape(indices, [-1, 2])\n","        indices = indices[:, ::-1]\n","        print(\"indices\", indices)\n","        \n","        sparse_mtx = tf.SparseTensor(indices=indices, values =tf.ones((x_shape[0]*self.k)),\n","                                                              dense_shape=x_shape)\n","        sparse_mtx = tf.sparse.to_dense(sparse_mtx, validate_indices=False)\n","        print(\"SUCCESS # 2\")\n","        print(\"sparse_mtx\", sparse_mtx)\n","        return sparse_mtx\n","        \n","    def compute_output_shape(self, input_shape):\n","        # assert isinstance(input_shape, list)\n","        return input_shape\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTQkRUZmVdK-","colab_type":"code","outputId":"461ae9d4-ca98-4d2e-843a-951d577bdb8b","executionInfo":{"status":"ok","timestamp":1566607588197,"user_tz":-60,"elapsed":20692,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 4/pAEP2FlsxHMIP0_H7Q1xreW48rdKrZpU1vAMW0v2Svz12lmNfX-7dI8"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cj3du6D1U_s2","colab_type":"code","outputId":"1787a86c-b183-4db7-b4d9-b41e56791b42","executionInfo":{"status":"ok","timestamp":1566607615484,"user_tz":-60,"elapsed":5919,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["\"\"\"\n","trainfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/train_dataset.npz\")\n","\n","x_train = trainfile[\"arr_0\"]\n","print(x_train.shape)\n","y_train = trainfile[\"arr_1\"]\n","print(y_train.shape)\n","\"\"\"\n","testfile = np.load(\"/content/drive/Shared drives/UniLeeds/marc_pj/test_dataset.npz\")\n","\n","x_test = testfile[\"arr_0\"]\n","print(x_test.shape)\n","y_test = testfile[\"arr_1\"]\n","print(y_test.shape)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["(10000, 112, 112, 1)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4rc7u8FOU_wD","colab_type":"code","colab":{}},"source":["ratio = [0.4, 0.4, 0.6, 0.8]  # exp1\n","ratio = [0.2, 0.2, 0.3, 0.4]  # exp2\n","ratio = [0.2, 0.2, 0.6, 0.8]  # exp3\n","ratio = [0.1, 0.1, 0.6, 0.8]  # exp4\n","\n","ratio = [0.2, 0.4, 0.6, 0.8]  # exp5\n","ratio = [0.1, 0.4, 0.6, 0.8]  # exp6\n","\n","ratio = [0.6, 0.4, 0.6, 0.8]  # exp7\n","\n","# ratio = [0.8, 0.4, 0.6, 0.8]  # exp8\n","\n","# ratio = [0.5, 0.4, 0.6, 0.8]  # exp9"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NxDMuhZU_zq","colab_type":"code","outputId":"92564cf9-ae95-409c-fcd0-73df0b2cc98e","executionInfo":{"status":"ok","timestamp":1566607590155,"user_tz":-60,"elapsed":1923,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = Sequential()\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation='relu', name='conv_1'))\n","\n","# model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=\"relu\", name='conv_1'))\n","model.add(Conv2D(32, kernel_size=3, padding='same', input_shape=(112, 112, 1), activation=\"relu\", name='conv_1'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[0]), 1.5, 32, name=\"sparse_1\"))\n","# model.add(Activation(\"relu\", name=\"relu_1\"))\n","\n","model.add(Conv2D(32, kernel_size=3, padding='same', activation=\"relu\", name='conv_2'))\n","# model.add(Conv2D(32, kernel_size=3, padding='same', activation=\"relu\", name='conv_2'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(KW(round(32*ratio[1]), 1.5, 32, name=\"sparse_2\"))\n","# model.add(Activation(\"relu\", name=\"relu_2\"))\n","\n","model.add(Conv2D(64, kernel_size=3, activation='relu', name='conv_3'))\n","# model.add(Conv2D(64, kernel_size=3, activation=None, name='conv_3'))\n","model.add(KW(round(64*ratio[2]), 1.5, 64, name=\"sparse_3\"))\n","# model.add(Activation(\"relu\", name=\"relu_3\"))\n","\n","# model.add(Conv2D(64, kernel_size=3, activation=\"relu\", name='conv_4'))\n","model.add(Conv2D(64, kernel_size=3, activation=\"relu\", name='conv_4'))\n","model.add(KW(round(64*ratio[3]) , 1.5, 64, name=\"sparse_4\"))\n","\n","model.add(Flatten())\n","model.add(Dense(10, name='dense_1'))\n","model.add(Activation(\"softmax\", name=\"softmax\"))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0824 00:46:28.654622 139883839469440 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","W0824 00:46:28.697054 139883839469440 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0824 00:46:28.703845 139883839469440 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","W0824 00:46:28.728378 139883839469440 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["x Tensor(\"max_pooling2d_1/MaxPool:0\", shape=(?, 56, 56, 32), dtype=float32)\n","global_average Tensor(\"sparse_1/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_1/TopKV2:1\", shape=(?, 19), dtype=int32)\n","x_shape Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_1/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_1/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_1/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_1/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_1/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_1/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_1/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_1/stack_1:0\", shape=(?, 19, 2), dtype=int64)\n","indices Tensor(\"sparse_1/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_1/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_1/MaxPool:0\", shape=(?, 56, 56, 32), dtype=float32)\n","spx Tensor(\"sparse_1/BroadcastTo:0\", shape=(?, 56, 56, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_2/MaxPool:0\", shape=(?, 28, 28, 32), dtype=float32)\n","global_average Tensor(\"sparse_2/Mean:0\", shape=(?, 32), dtype=float32)\n","x_sort_arg Tensor(\"sparse_2/TopKV2:1\", shape=(?, 13), dtype=int32)\n","x_shape Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_2/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_2/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_2/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_2/SparseToDense:0\", shape=(?, 32), dtype=float32)\n","duty Tensor(\"sparse_2/Add:0\", shape=(?, 32), dtype=float32)\n","boosted_x Tensor(\"sparse_2/Exp:0\", shape=(?, 32), dtype=float32)\n","x_shape Tensor(\"sparse_2/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_2/stack_1:0\", shape=(?, 13, 2), dtype=int64)\n","indices Tensor(\"sparse_2/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_2/SparseToDense_1:0\", shape=(?, 32), dtype=float32)\n","x Tensor(\"max_pooling2d_2/MaxPool:0\", shape=(?, 28, 28, 32), dtype=float32)\n","spx Tensor(\"sparse_2/BroadcastTo:0\", shape=(?, 28, 28, 32), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 26, 26, 64), dtype=float32)\n","global_average Tensor(\"sparse_3/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_3/TopKV2:1\", shape=(?, 38), dtype=int32)\n","x_shape Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack:0\", shape=(?, 38, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_3/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_3/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_3/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_3/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_3/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_3/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_3/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_3/stack_1:0\", shape=(?, 38, 2), dtype=int64)\n","indices Tensor(\"sparse_3/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_3/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_3/Relu:0\", shape=(?, 26, 26, 64), dtype=float32)\n","spx Tensor(\"sparse_3/BroadcastTo:0\", shape=(?, 26, 26, 64), dtype=float32)\n","x Tensor(\"conv_4/Relu:0\", shape=(?, 24, 24, 64), dtype=float32)\n","global_average Tensor(\"sparse_4/Mean:0\", shape=(?, 64), dtype=float32)\n","x_sort_arg Tensor(\"sparse_4/TopKV2:1\", shape=(?, 51), dtype=int32)\n","x_shape Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64)\n","SparseTensor(indices=Tensor(\"sparse_4/strided_slice_4:0\", shape=(?, 2), dtype=int64), values=Tensor(\"sparse_4/ones_1:0\", shape=(?,), dtype=float32), dense_shape=Tensor(\"sparse_4/Shape_2:0\", shape=(2,), dtype=int64))\n","SUCCESS\n","sparse_mtx Tensor(\"sparse_4/SparseToDense:0\", shape=(?, 64), dtype=float32)\n","duty Tensor(\"sparse_4/Add:0\", shape=(?, 64), dtype=float32)\n","boosted_x Tensor(\"sparse_4/Exp:0\", shape=(?, 64), dtype=float32)\n","x_shape Tensor(\"sparse_4/Shape_5:0\", shape=(2,), dtype=int64)\n","indices Tensor(\"sparse_4/stack_1:0\", shape=(?, 51, 2), dtype=int64)\n","indices Tensor(\"sparse_4/strided_slice_8:0\", shape=(?, 2), dtype=int64)\n","SUCCESS # 2\n","sparse_mtx Tensor(\"sparse_4/SparseToDense_1:0\", shape=(?, 64), dtype=float32)\n","x Tensor(\"conv_4/Relu:0\", shape=(?, 24, 24, 64), dtype=float32)\n","spx Tensor(\"sparse_4/BroadcastTo:0\", shape=(?, 24, 24, 64), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4hX-D1VnU_3r","colab_type":"code","outputId":"0e0c61bc-7262-4661-9a54-9bad7ece8900","executionInfo":{"status":"ok","timestamp":1566607590157,"user_tz":-60,"elapsed":1915,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":666}},"source":["model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model.summary()"],"execution_count":9,"outputs":[{"output_type":"stream","text":["W0824 00:46:29.231298 139883839469440 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","W0824 00:46:29.250732 139883839469440 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv_1 (Conv2D)              (None, 112, 112, 32)      320       \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","sparse_1 (KW)                (None, 56, 56, 32)        0         \n","_________________________________________________________________\n","conv_2 (Conv2D)              (None, 56, 56, 32)        9248      \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","sparse_2 (KW)                (None, 28, 28, 32)        0         \n","_________________________________________________________________\n","conv_3 (Conv2D)              (None, 26, 26, 64)        18496     \n","_________________________________________________________________\n","sparse_3 (KW)                (None, 26, 26, 64)        0         \n","_________________________________________________________________\n","conv_4 (Conv2D)              (None, 24, 24, 64)        36928     \n","_________________________________________________________________\n","sparse_4 (KW)                (None, 24, 24, 64)        0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 36864)             0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                368650    \n","_________________________________________________________________\n","softmax (Activation)         (None, 10)                0         \n","=================================================================\n","Total params: 433,642\n","Trainable params: 433,642\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b3DZfJWhIUhr","colab_type":"code","outputId":"602b83b9-bf41-45cc-d12b-345bd529da2b","executionInfo":{"status":"ok","timestamp":1566606986161,"user_tz":-60,"elapsed":123228,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=3, batch_size=32)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 60000 samples, validate on 10000 samples\n","Epoch 1/3\n","60000/60000 [==============================] - 41s 689us/step - loss: 0.7357 - acc: 0.7448 - val_loss: 0.2219 - val_acc: 0.9305\n","Epoch 2/3\n","60000/60000 [==============================] - 41s 678us/step - loss: 0.1617 - acc: 0.9503 - val_loss: 0.1900 - val_acc: 0.9425\n","Epoch 3/3\n","60000/60000 [==============================] - 40s 675us/step - loss: 0.1019 - acc: 0.9675 - val_loss: 0.1226 - val_acc: 0.9615\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7ffa86767cf8>"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"gm929llrIVvI","colab_type":"code","colab":{}},"source":["model.save_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_ratio7_with_relu.h5\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMkaGTZJU_6u","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"1f8ea526-11f1-403b-9bd6-256e8a5bbe6c","executionInfo":{"status":"ok","timestamp":1566607596401,"user_tz":-60,"elapsed":5861,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}}},"source":["model.load_weights(\"/content/drive/Shared drives/UniLeeds/marc_pj/sparse_model_ratio7_with_relu.h5\")"],"execution_count":10,"outputs":[{"output_type":"stream","text":["W0824 00:46:32.755905 139883839469440 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Z9dxKYe7U_rc","colab_type":"code","outputId":"f11ea6a2-049e-469e-869c-32791c2b8297","executionInfo":{"status":"ok","timestamp":1566607642151,"user_tz":-60,"elapsed":4719,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":404}},"source":["p = 9000\n","x = x_test[p]\n","x_org = x.copy()\n","print(x.shape)\n","plt.imshow(x.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","x = np.expand_dims(x, axis=0)\n","print(\"x.shape\", x.shape)\n","# x = preprocess_input(x)\n","preprocessed_input = x\n","predictions = model.predict(preprocessed_input)\n","print(predictions)\n","predicted_class = np.argmax(predictions)\n","print(\"predicted_class\", predicted_class)\n","print(\"correct_class\",  np.argmax(y_test[p]))\n","print(predicted_class.dtype)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["(112, 112, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["x.shape (1, 112, 112, 1)\n","[[5.91565659e-08 1.01045144e-10 8.53472404e-09 1.10053126e-10\n","  1.90573317e-07 1.56597346e-10 4.21746307e-18 9.99999642e-01\n","  1.11074636e-10 1.53975355e-09]]\n","predicted_class 7\n","correct_class 7\n","int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBfGs0EyU_mu","colab_type":"code","colab":{}},"source":["plt.imshow(x_org.reshape(112, 112), cmap=\"gray\")\n","plt.axis(\"off\")\n","plt.show()\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","for i in range(1, 5):\n","    print(i)\n","    layer_name = \"conv_\"+str(i)\n","    cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, layer_name, sparse=True)\n","    if i ==1:\n","        combined = np.zeros((heatmap.shape))\n","    combined += heatmap\n","    # cam_gray = cam.mean(axis=2)\n","    a[i-1].imshow(heatmap, cmap=\"gray\")\n","    a[i-1].title.set_text(layer_name)\n","    a[i-1].axis('off')\n","plt.show()\n","\n","combined /= np.sum(combined)\n","# combined = np.maximum(combined, 0)\n","plt.imshow(combined, cmap=\"gray\")\n","plt.title(\"combined\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","x_comb_gt = scipy.ndimage.gaussian_filter(x_org.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","plt.imshow(x_comb_gt, cmap=\"gray\")\n","plt.title(\"ground truth\")\n","plt.axis(\"off\")\n","plt.show()\n","\n","print(\"KL divergenvce\")\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"S5bTNMOXkimK","colab_type":"code","colab":{}},"source":["x_comb_gt /= np.sum(x_comb_gt)\n","print(np.sum(x_comb_gt))\n","print(stats.entropy(x_comb_gt.flatten(), combined.flatten()))\n","print(np.sum(combined))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fu1DQa2Q1bSC","colab_type":"text"},"source":["Create dataset"]},{"cell_type":"code","metadata":{"id":"vDpixI0xaNfu","colab_type":"code","colab":{}},"source":["preprocessed_x_t = np.ones((len(x_test), 1, 112, 112, 1))\n","preprocessed_y_t = np.ones((len(x_test)))\n","preprocessed_y_t = preprocessed_y_t.astype(np.int64)\n","for i, img in enumerate(x_test):\n","  # preprocessed_x_t[i] = np.expand_dims(img, axis=0)\n","  # preprocessed_x_t[i] = img\n","  preprocessed_y_t[i] = np.argmax(y_test[i])\n","preprocessed_x_t = x_test\n","preprocessed_y_t[0].dtype\n","preprocessed_x_t.shape\n","sorted_arg = preprocessed_y_t.argsort()\n","sorted_x = preprocessed_x_t[sorted_arg]\n","sorted_x.shape\n","sorted_y = preprocessed_y_t[sorted_arg]\n","sorted_y\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border\n","\n","numbers = {}\n","for i in range(0, 10):\n","  numbers[i] = sorted_x[border[i]:border[i+1]]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZkomth02qyK","colab_type":"text"},"source":["overlap 3"]},{"cell_type":"code","metadata":{"id":"sJ-hM6LA2G_U","colab_type":"code","colab":{}},"source":["import random\n","comb_x = np.zeros((10000, 112, 112))\n","comb_y = np.zeros((10000)).astype(np.int16)\n","gt_x = np.zeros((10000, 112, 112))\n","for i in range(10000):\n","  nums = random.sample(range(0, 10), 3)\n","  tar = nums[0]\n","  noises = nums[1:]\n","  tar_arg = random.sample(range(len(numbers[tar])), 1)\n","  noise1_arg = random.sample(range(len(numbers[noises[0]])), 1)\n","  noise2_arg = random.sample(range(len(numbers[noises[1]])), 1)\n","  x_comb = (numbers[tar][tar_arg]+numbers[noises[0]][noise1_arg]+numbers[noises[1]][noise2_arg])\n","  x_comb [x_comb  > 1] = 1\n","  comb_x[i] = np.squeeze(x_comb, axis=-1)\n","  comb_y[i] = np.int(tar)\n","  x_gt = numbers[tar][tar_arg]\n","  x_gt =  scipy.ndimage.gaussian_filter(x_gt, 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_gt /= np.sum(x_gt)\n","  gt_x[i] = np.squeeze(x_gt, axis=-1)\n","plt.imshow(x_comb.reshape(112, 112), cmap='gray')\n","plt.show()\n","plt.imshow(x_gt.reshape(112, 112), cmap='gray')\n","plt.show()\n","print(comb_y[-1])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jH55DKBG9cSR","colab_type":"code","colab":{}},"source":["# del x_train\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap3.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap4.npz\"\n","# outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap5.npz\"\n","# np.save(outfile, comb_x, comb_y, gt_x)\n","outfile = \"/content/drive/Shared drives/UniLeeds/marc_pj/overlap10.npz\"\n","\n","testfile = np.load(outfile)\n","sorted_x = testfile[\"arr_0\"]\n","sorted_y = testfile[\"arr_1\"]\n","gt_x = testfile[\"arr_2\"]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nUCnPEku_Rlw","colab_type":"code","outputId":"3163db02-b1de-44d0-8ac4-bfa32d0335de","executionInfo":{"status":"ok","timestamp":1566607735162,"user_tz":-60,"elapsed":901,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\"\"\"\n","sorted_arg = comb_y.argsort()\n","sorted_x = comb_x[sorted_arg]\n","sorted_y = comb_y[sorted_arg]\n","gt_x = gt_x[sorted_arg]\n","\"\"\"\n","\n","border = []\n","for i in range(10):\n","  border.append(np.where(sorted_y==i)[0][0])\n","border.append(len(sorted_y))\n","border"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1033, 2052, 3069, 4084, 5050, 5982, 7001, 7997, 8982, 10000]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"pQWmfABEV_nK","colab_type":"code","outputId":"c4ee1d5b-ef80-47a2-9d4c-262d7a7408d3","executionInfo":{"status":"ok","timestamp":1566607811776,"user_tz":-60,"elapsed":74305,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["kl = np.zeros(10000)\n","show_img = False\n","batch_size = 50\n","yb4 = 0\n","# for img in tqdm(sorted_x):\n","changeLastLayer = True\n","results = {}\n","for i in tqdm(range(10)):\n","    # print(img.shape)\n","    # preprocessed_input = np.expand_dims(x_test[i], axis=0)\n","    preprocessed_input = np.expand_dims(sorted_x[border[i]:border[i+1]], axis=-1)\n","    # print(preprocessed_input.shape)\n","    # y = int(np.argmax(y_test[i]))\n","    y = i\n","    print(\"y\", y)\n","    yb4 = y\n","    combined = batch_grad_cam(model, preprocessed_input, y,  changeLastLayer, sparse=True)\n","    results[i] = combined\n","    if show_img:\n","        plt.imshow(combined[0][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[1][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[2][0], cmap='gray')\n","        plt.show()\n","        plt.imshow(combined[3][0], cmap='gray')\n","        plt.show()\n","    img2test = np.sum(combined, axis=0)\n","    if show_img:\n","        print(\"img2test shape\", img2test.shape)\n","        plt.imshow(img2test[0], cmap='gray')\n","        plt.show()"],"execution_count":16,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["y 0\n","weights shape (1033, 32)\n","output shape (1033, 56, 56, 32)\n"," \n","weights shape (1033, 32)\n","output shape (1033, 28, 28, 32)\n"," \n","weights shape (1033, 64)\n","output shape (1033, 26, 26, 64)\n"," \n","weights shape (1033, 64)\n","output shape (1033, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|â–ˆ         | 1/10 [00:13<01:57, 13.09s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 1\n","weights shape (1019, 32)\n","output shape (1019, 56, 56, 32)\n"," \n","weights shape (1019, 32)\n","output shape (1019, 28, 28, 32)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 26, 26, 64)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|â–ˆâ–ˆ        | 2/10 [00:20<01:30, 11.26s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 2\n","weights shape (1017, 32)\n","output shape (1017, 56, 56, 32)\n"," \n","weights shape (1017, 32)\n","output shape (1017, 28, 28, 32)\n"," \n","weights shape (1017, 64)\n","output shape (1017, 26, 26, 64)\n"," \n","weights shape (1017, 64)\n","output shape (1017, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|â–ˆâ–ˆâ–ˆ       | 3/10 [00:26<01:09,  9.93s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 3\n","weights shape (1015, 32)\n","output shape (1015, 56, 56, 32)\n"," \n","weights shape (1015, 32)\n","output shape (1015, 28, 28, 32)\n"," \n","weights shape (1015, 64)\n","output shape (1015, 26, 26, 64)\n"," \n","weights shape (1015, 64)\n","output shape (1015, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|â–ˆâ–ˆâ–ˆâ–ˆ      | 4/10 [00:33<00:54,  9.05s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 4\n","weights shape (966, 32)\n","output shape (966, 56, 56, 32)\n"," \n","weights shape (966, 32)\n","output shape (966, 28, 28, 32)\n"," \n","weights shape (966, 64)\n","output shape (966, 26, 26, 64)\n"," \n","weights shape (966, 64)\n","output shape (966, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 5/10 [00:40<00:41,  8.34s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 5\n","weights shape (932, 32)\n","output shape (932, 56, 56, 32)\n"," \n","weights shape (932, 32)\n","output shape (932, 28, 28, 32)\n"," \n","weights shape (932, 64)\n","output shape (932, 26, 26, 64)\n"," \n","weights shape (932, 64)\n","output shape (932, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    | 6/10 [00:46<00:30,  7.74s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 6\n","weights shape (1019, 32)\n","output shape (1019, 56, 56, 32)\n"," \n","weights shape (1019, 32)\n","output shape (1019, 28, 28, 32)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 26, 26, 64)\n"," \n","weights shape (1019, 64)\n","output shape (1019, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   | 7/10 [00:52<00:21,  7.02s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 7\n","weights shape (996, 32)\n","output shape (996, 56, 56, 32)\n"," \n","weights shape (996, 32)\n","output shape (996, 28, 28, 32)\n"," \n","weights shape (996, 64)\n","output shape (996, 26, 26, 64)\n"," \n","weights shape (996, 64)\n","output shape (996, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  | 8/10 [00:59<00:14,  7.01s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 8\n","weights shape (985, 32)\n","output shape (985, 56, 56, 32)\n"," \n","weights shape (985, 32)\n","output shape (985, 28, 28, 32)\n"," \n","weights shape (985, 64)\n","output shape (985, 26, 26, 64)\n"," \n","weights shape (985, 64)\n","output shape (985, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r 90%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ | 9/10 [01:06<00:06,  6.97s/it]"],"name":"stderr"},{"output_type":"stream","text":["y 9\n","weights shape (1018, 32)\n","output shape (1018, 56, 56, 32)\n"," \n","weights shape (1018, 32)\n","output shape (1018, 28, 28, 32)\n"," \n","weights shape (1018, 64)\n","output shape (1018, 26, 26, 64)\n"," \n","weights shape (1018, 64)\n","output shape (1018, 24, 24, 64)\n"," \n"],"name":"stdout"},{"output_type":"stream","text":["\r100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 10/10 [01:13<00:00,  7.05s/it]\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"_8lXi1Sv6g-0","colab_type":"text"},"source":["Check the produced priority map"]},{"cell_type":"code","metadata":{"id":"aYKnedfb3zcL","colab_type":"code","outputId":"636acc2c-31c9-46fb-afce-5d6580be3406","executionInfo":{"status":"ok","timestamp":1566607828963,"user_tz":-60,"elapsed":1831,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":771}},"source":["plt.imshow(sorted_x[border[9]].reshape(112, 112), cmap='gray')\n","plt.axis('off')\n","plt.show()\n","\n","f, a = plt.subplots(1, 4, figsize=(18, 36))\n","a[0].imshow(combined[0][0], cmap='gray')\n","a[0].axis('off')\n","a[1].imshow(combined[0][1], cmap='gray')\n","a[1].axis('off')\n","a[2].imshow(combined[0][2], cmap='gray')\n","a[2].axis('off')\n","a[3].imshow(combined[0][3], cmap='gray')\n","a[3].axis('off')\n","plt.show()\n","img2test = np.sum(combined[0], axis=0)\n","img2test = img2test/np.sum(img2test)\n","plt.imshow(img2test, cmap='gray')\n","plt.axis('off')\n","plt.show()"],"execution_count":17,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nrqR9KlMSEPGckoCkPTtWLNJKwUhz/Hlx+PBhAHbv3g1A2bJlAVfb4O677wagb9++gCt/bisPrXBt\nKlISEPGckoCkPSsv1qBBg5DHLQHY+v/8sGPpbGej7Wg0f/zxB+AqDtl+Bit+qiQgIilLSUDSXqRD\nYzt06AC4z/ESTElAxHNKApKxsrOzY3atkiVLAq5mQSQtW7YM+T78CLVUpCQg4jklAZF/NWrUiMqV\nKwMwevTokOesboAdQ2bWrl0LQLt27QC3g3HNmjVA5ANUUomSgIjnlARE/lWpUiW6desGwPjx4wFX\nZdhWI4afYXDZZZcBMGTIkJDHX3vtNSA9ZiaUBEQ8pyQgGcs+x0d7aOjMmTMZOHBgyHtWrlwJQO3a\ntaO6htWqzO0g3FSiJCDiOSUByVhdunQB3C5Du8sfO3Ys8PU7d+7MOYvQ7ui5nWRs9Qp79uwJuFkF\n212YDpQERDynGoOS9mzu3ir/RtpLsHTpUsDdva1KUM2aNXNeY3UCbL1AJCNHjgRg0KBBAGzduvW0\n2p5IqjEoIoGUBCRjWCJ4/vnnAbjlllvyfc3vv/8egKFDhwIwa9YsAPbv35/vayeakoCIBFISkIxT\nqFAhwJ1D0KpVK8CdQmzPG6tANHHixJyTg2z336FDhwA4ePBgnFsdf5GSgDoBEU/o44CIBFInIOI5\ndQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIinlMnIOI5dQIi\nnlMnIOI5dQIinkuJykIikjxKAiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKe\nUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg4jl1AiKeUycg\n4jl1AiKe+z8LVeiRyQWhcwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1296x2592 with 4 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nUQzO/wFR1IGQ/Abu4AAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g2Jq-ifh6lk_","colab_type":"text"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"WV7lUdV58lMH","colab_type":"code","outputId":"4d3944ea-03b0-4e07-c7b0-f975569428d9","executionInfo":{"status":"ok","timestamp":1566560955803,"user_tz":-60,"elapsed":6879,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["sorted_x_gt = np.ones((sorted_x.shape))\n","for i, img in enumerate(sorted_x):\n","  x_comb_gt = scipy.ndimage.gaussian_filter(img.reshape(112, 112), 4, order=0, output=None, mode='reflect', cval=0.0, truncate=4.0) \n","  x_comb_gt /= np.sum(x_comb_gt)\n","  sorted_x_gt[i] = x_comb_gt\n","plt.imshow(sorted_x_gt[0].reshape(112, 112), cmap='gray')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n8AAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"jz893l0N_rYu","colab_type":"code","colab":{}},"source":["plt.imshow(gt_x[0], cmap='gray')\n","plt.show()\n","np.sum(gt_x[0])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sEfuI3GpeRg5","colab_type":"code","colab":{}},"source":["results[0][0].shape\n","pmap = np.sum(pmaps[0][1:])\n","pmap /= np.sum(pmap)\n","np.sum(pmap)\n","print(np.where(kls == np.inf))\n","print(results[2][279][1:].shape)\n","test = results[2][279][1:]\n","test = np.sum(test, axis=0)\n","test /= np.sum(test)\n","print(test.shape)\n","plt.imshow(test, cmap='gray')\n","plt.show()\n","test.max()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J9hFgtyyflzX","colab_type":"code","outputId":"66f1e01c-8a46-40b2-872e-7aaa00594aaa","executionInfo":{"status":"ok","timestamp":1566607842491,"user_tz":-60,"elapsed":3773,"user":{"displayName":"reo911gt3","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDOj7LgR5wqPPQHl6sOGjcAtbQgGsNZp53vh1Gw3Bc=s64","userId":"07510720842871233469"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["kls = np.zeros((10000))\n","temp = []\n","for i in range(0, 10):\n","  gts = gt_x[border[i]:border[i+1]] \n","  pmaps = results[i]\n","  assert len(gts) == len(pmaps)\n","  for j in range(len(gts)):\n","    gt = gts[j].squeeze()\n","    pmap = np.sum(pmaps[j][1:], axis=0)\n","    pmap /= np.sum(pmap)\n","    kl = stats.entropy(gt.flatten(), pmap.flatten())\n","    if kl == np.inf:\n","      continue\n","    kls[border[i]+j] = kl\n","    temp.append(kl)\n","  print(i, \"mean kl\", np.mean(temp))\n","print(kls.mean())"],"execution_count":18,"outputs":[{"output_type":"stream","text":["0 mean kl 2.9055948920626378\n","1 mean kl 2.9675145910702425\n","2 mean kl 2.93364121398603\n","3 mean kl 2.904376279428394\n","4 mean kl 2.954111555223964\n","5 mean kl 2.9449326351621545\n","6 mean kl 2.961244929968857\n","7 mean kl 2.959890909019345\n","8 mean kl 2.9817426648708056\n","9 mean kl 3.0044175541659075\n","2.895958080460518\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1zC1XX0IAZ-x","colab_type":"text"},"source":["overlap 3: kl divergence\n"]},{"cell_type":"markdown","metadata":{"id":"r8kGK3ibAImz","colab_type":"text"},"source":["\n"]},{"cell_type":"code","metadata":{"id":"ioySD7oZUeYT","colab_type":"code","colab":{}},"source":["ratio_1\n","overlap 5: kl_divergence\n","0 mean kl 2.6163089808814353\n","1 mean kl 2.8753965817893063\n","2 mean kl 2.866036166178241\n","3 mean kl 2.839589049469307\n","4 mean kl 2.8002224193948586\n","5 mean kl 2.7976602635052896\n","6 mean kl 2.776942131565275\n","7 mean kl 2.7878222827655015\n","8 mean kl 2.7505092012763033\n","9 mean kl 2.74410191069035\n","2.737241655913624\n","\n","overlap 4:\n","0 mean kl 2.6100659478117705\n","1 mean kl 2.8564435487711513\n","2 mean kl 2.8491184604782265\n","3 mean kl 2.817959019489922\n","4 mean kl 2.7815341166016436\n","5 mean kl 2.777701293830135\n","6 mean kl 2.757888095920567\n","7 mean kl 2.7704798382440265\n","8 mean kl 2.7349647613795596\n","9 mean kl 2.7299936093780865\n","2.7283556132124596\n","\n","overlap 3\n","0 mean kl 2.6085916882382834\n","1 mean kl 2.8292348078654737\n","2 mean kl 2.820811807183378\n","3 mean kl 2.791181309139243\n","4 mean kl 2.762313691383919\n","5 mean kl 2.7547291164301706\n","6 mean kl 2.7405205780466804\n","7 mean kl 2.750608592249947\n","8 mean kl 2.721995328715782\n","9 mean kl 2.7192830214153765\n","2.717923379904669\n","\n","overlap 10\n","0 mean kl 2.7753871251337663\n","1 mean kl 3.0302378841369033\n","2 mean kl 2.9991861274385294\n","3 mean kl 2.9434782696579727\n","4 mean kl 2.920269374847127\n","5 mean kl 2.909823645930598\n","6 mean kl 2.89084027398056\n","7 mean kl 2.902485352306911\n","8 mean kl 2.855393801654071\n","9 mean kl 2.8440827687959764\n","2.8432295439653377"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XnIbgxKtRfIZ","colab_type":"code","colab":{}},"source":["ratio2 \n","overlap 10\n","0 mean kl 2.78751347970808\n","1 mean kl 3.0770529865454987\n","2 mean kl 3.049556663938309\n","3 mean kl 3.0019593188098597\n","4 mean kl 3.0338597806365777\n","5 mean kl 2.964702376967148\n","6 mean kl 2.948014540856044\n","7 mean kl 2.973138355750508\n","8 mean kl 2.938854330519554\n","9 mean kl 2.955926342189674\n","2.9423290810156018"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R1OdRz7QaKa1","colab_type":"code","colab":{}},"source":["ratio3\n","0 mean kl 2.5617848816902273\n","1 mean kl 2.9615626864881635\n","2 mean kl 2.879493789567673\n","3 mean kl 2.8252716277631866\n","4 mean kl 2.9035969343326524\n","5 mean kl 2.872025146531248\n","6 mean kl 2.8751694721629666\n","7 mean kl 2.908918915133712\n","8 mean kl 2.8766034414893342\n","9 mean kl 2.8966481953131815\n","2.8187283588592575"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"itPglejX07x1","colab_type":"code","colab":{}},"source":["ratio4\n","0 mean kl 2.92640563839942\n","1 mean kl 3.057036631113963\n","2 mean kl 3.0523901373753484\n","3 mean kl 3.055620712414837\n","4 mean kl 3.047826981225571\n","5 mean kl 3.028641382657027\n","6 mean kl 3.035205260144986\n","7 mean kl 3.02426302800163\n","8 mean kl 3.0306466077710734\n","9 mean kl 3.0302878726411806\n","3.023318210534106"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RSXc6HX8WjTy","colab_type":"code","colab":{}},"source":["ratio 5\n","0 mean kl 2.6102924420325104\n","1 mean kl 3.056996957150096\n","2 mean kl 2.993175665924335\n","3 mean kl 2.933419261364506\n","4 mean kl 2.9700195668672977\n","5 mean kl 2.9511598986357215\n","6 mean kl 2.9355646228847476\n","7 mean kl 2.959898989088979\n","8 mean kl 2.9204692729041324\n","9 mean kl 2.9291596814920604\n","2.9291596814920604"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KcGYPoeEZimZ","colab_type":"code","colab":{}},"source":["ratio 6 \n","0 mean kl 2.6871636202241023\n","1 mean kl 3.0877852419167957\n","2 mean kl 2.995067160916525\n","3 mean kl 2.9400063153028806\n","4 mean kl 2.9454528502453514\n","5 mean kl 2.923680459711544\n","6 mean kl 2.9050300056313687\n","7 mean kl 2.923790665282685\n","8 mean kl 2.8810601626583248\n","9 mean kl 2.880443626259657\n","2.880443626259657"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"STN7IId5bRSx","colab_type":"code","colab":{}},"source":["ratio 7\n","0 mean kl 2.560195787736453\n","1 mean kl 2.8156223253343104\n","2 mean kl 2.738813908040841\n","3 mean kl 2.75447621848629\n","4 mean kl 2.747612327836614\n","5 mean kl 2.777388223145542\n","6 mean kl 2.7809560683082064\n","7 mean kl 2.80386887747819\n","8 mean kl 2.759662688746271\n","9 mean kl 2.7521729954598158\n","2.5248435060348347"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L4CfJqd2eR0u","colab_type":"code","colab":{}},"source":["ratio 8\n","0 mean kl 2.656541431748879\n","1 mean kl 2.8407070131187933\n","2 mean kl 2.8102019654082584\n","3 mean kl 2.7997584110905165\n","4 mean kl 2.8655736959865603\n","5 mean kl 2.892894408786466\n","6 mean kl 2.8886316985559644\n","7 mean kl 2.9027008629355824\n","8 mean kl 2.865921417443035\n","9 mean kl 2.8800192946230725\n","2.8143548547056665"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5ft5eu8BgwLS","colab_type":"code","colab":{}},"source":["ratio 9\n","0 mean kl 2.5680342576202184\n","1 mean kl 2.909500316896012\n","2 mean kl 2.818598413399716\n","3 mean kl 2.8447214663226044\n","4 mean kl 2.8516289927678704\n","5 mean kl 2.9034391950962597\n","6 mean kl 2.8880943160276282\n","7 mean kl 2.900752060024396\n","8 mean kl 2.846135787700065\n","9 mean kl 2.85113712658574\n","2.8508520128730814"],"execution_count":0,"outputs":[]}]}